{
    "openapi": "3.0.3",
    "info": {
        "title": "Fordefi API",
        "version": "0.2.0"
    },
    "servers": [
        {
            "url": "http://localhost:8000",
            "description": "Local"
        }
    ],
    "paths": {
        "/api/v1/blockchains": {
            "get": {
                "tags": [
                    "Blockchains"
                ],
                "summary": "List Chains",
                "description": "Get a list of all supported blockchains.",
                "operationId": "list_chains_api_v1_blockchains_get",
                "parameters": [
                    {
                        "name": "chain_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Chain Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainType"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListBlockchainsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/blockchains/suggested-fees": {
            "get": {
                "tags": [
                    "Blockchains"
                ],
                "summary": "Get Suggested Fees",
                "description": "Get the suggested fees in a specific network.",
                "operationId": "get_suggested_fees_api_v1_blockchains_suggested_fees_get",
                "parameters": [
                    {
                        "name": "chains",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Chains",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainUniqueId"
                            }
                        }
                    },
                    {
                        "name": "chain_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Chain Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainType"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetSuggestedFeesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/blockchains/rpc-endpoints": {
            "get": {
                "tags": [
                    "Blockchains"
                ],
                "summary": "Get Rpc Endpoints",
                "description": "Get the suggested fees in a specific network.",
                "operationId": "get_rpc_endpoints_api_v1_blockchains_rpc_endpoints_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetRpcEndpointsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List Users",
                "description": "Get a list of users in the organization.",
                "operationId": "list_users_api_v1_users_get",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 400,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The types of the users to filter on.",
                            "title": "Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserType"
                            }
                        },
                        "description": "The types of the users to filter on."
                    },
                    {
                        "name": "roles",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The roles of the users to filter on.",
                            "title": "Roles",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserRole"
                            }
                        },
                        "description": "The roles of the users to filter on."
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The states of the users to filter on.  Is one of: <ul><li>`active`: The user can perform all actions in the Fordefi platform.<li>`onboarding`: The user has been approved but still needs to activate the account.<li>`pending_approval`: The user has been invited but not yet approved.<li>`deleted`: The user has been deleted.</ul>",
                            "title": "States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserState"
                            }
                        },
                        "description": "The states of the users to filter on.  Is one of: <ul><li>`active`: The user can perform all actions in the Fordefi platform.<li>`onboarding`: The user has been approved but still needs to activate the account.<li>`pending_approval`: The user has been invited but not yet approved.<li>`deleted`: The user has been deleted.</ul>"
                    },
                    {
                        "name": "include_deleted",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "default": false,
                            "title": "Include Deleted",
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Name",
                            "type": "string"
                        }
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Email",
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of the users.",
                            "title": "User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The unique identifiers of the users."
                    },
                    {
                        "name": "external_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "External Id",
                            "type": "string"
                        }
                    },
                    {
                        "name": "group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of the user groups.",
                            "title": "Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The unique identifiers of the user groups."
                    },
                    {
                        "name": "group_ids__not",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of the user groups to exclude.",
                            "title": "Group Ids  Not",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The unique identifiers of the user groups to exclude."
                    },
                    {
                        "name": "states_on_groups",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The states of the user groups to filter group_ids on. Is one of: <ul><li>`active`: The user group is active.<li>`pending_addition`: The user is pending to be added to the group.<li>`pending_removal`: The user is pending to be removed from the group.</ul>",
                            "title": "States On Groups",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserStateOnGroup"
                            }
                        },
                        "description": "The states of the user groups to filter group_ids on. Is one of: <ul><li>`active`: The user group is active.<li>`pending_addition`: The user is pending to be added to the group.<li>`pending_removal`: The user is pending to be removed from the group.</ul>"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListUsersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create User",
                "description": "api for creating a new user.",
                "operationId": "create_user_api_v1_users_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateUserErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/extended": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List Users Ext",
                "description": "Returns a paginated list of users with extended fields for Fordefi's internal use",
                "operationId": "list_users_ext_api_v1_users_extended_get",
                "parameters": [
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The type of the user.",
                            "title": "Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserType"
                            }
                        },
                        "description": "The type of the user."
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The state of the user.",
                            "title": "States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserState"
                            }
                        },
                        "description": "The state of the user."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListUsersExtResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/count": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Count Users",
                "description": "Get a list of all active users in an organization.",
                "operationId": "count_users_api_v1_users_count_get",
                "parameters": [
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The type of the user.",
                            "title": "Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserType"
                            }
                        },
                        "description": "The type of the user."
                    },
                    {
                        "name": "roles",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The role of the user.",
                            "title": "Roles",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserRole"
                            }
                        },
                        "description": "The role of the user."
                    },
                    {
                        "name": "include_deleted",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "`True` to include deleted users in the response, `False` otherwise.",
                            "default": false,
                            "title": "Include Deleted"
                        },
                        "description": "`True` to include deleted users in the response, `False` otherwise."
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserState"
                            },
                            "description": "The state of the user.",
                            "title": "States"
                        },
                        "description": "The state of the user."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CountUsersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/info": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Current User Info",
                "description": "Gets the current user info.",
                "operationId": "get_current_user_info_api_v1_users_info_get",
                "parameters": [
                    {
                        "name": "include_active_device_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "`True` to include active device id for each organization, `False` otherwise.",
                            "default": false,
                            "title": "Include Active Device Id",
                            "type": "boolean"
                        },
                        "description": "`True` to include active device id for each organization, `False` otherwise."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCurrentUserInfoResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/onboarding-info": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Current User Onboarding Info",
                "description": "Gets the current user onboarding info.",
                "operationId": "get_current_user_onboarding_info_api_v1_users_onboarding_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetCurrentUserOnboardingInfoResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/membership-organizations": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Membership Organizations",
                "description": "Gets the organizations the user is a member of (active or onboarding state).",
                "operationId": "get_membership_organizations_api_v1_users_membership_organizations_get",
                "parameters": [
                    {
                        "name": "user_email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "email",
                            "description": "The email of the user.",
                            "title": "User Email"
                        },
                        "description": "The email of the user."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetMembershipOrganizationsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/authzero-invitations": {
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete Pending Invitations",
                "description": "Delete pending Authzero invitations for the user",
                "operationId": "delete_pending_invitations_api_v1_users_authzero_invitations_delete",
                "parameters": [
                    {
                        "name": "user_email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "email",
                            "description": "The email of the user.",
                            "title": "User Email"
                        },
                        "description": "The email of the user."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get User",
                "description": "Gets the user that corresponds to the given ID.",
                "operationId": "get_user_api_v1_users__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the user to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "description": "Delete a user.",
                "operationId": "delete_user_api_v1_users__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the user to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_DeleteUserErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/abort": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Abort User",
                "description": "Abort user's onboarding.",
                "operationId": "abort_user_api_v1_users__id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to abort its onboarding.",
                            "title": "Id"
                        },
                        "description": "ID of the user to abort its onboarding."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_AbortOnboardingErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/approve": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Approve User Onboarding",
                "description": "Approve user onboarding.",
                "operationId": "approve_user_onboarding_api_v1_users__id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to approve.",
                            "title": "Id"
                        },
                        "description": "ID of the user to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/onboarding-state/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get User Onboarding State",
                "description": "Get user's onboarding state.",
                "operationId": "get_user_onboarding_state_api_v1_users_onboarding_state__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the user to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PersonOnboardingStateResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_GetOnboardingStateErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/delete-prerequisites/{id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get Delete User Prerequisites",
                "description": "Get user's delete prerequisites.",
                "operationId": "get_delete_user_prerequisites_api_v1_users_delete_prerequisites__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the user to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetDeleteUserPrerequisitesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/keep-alive": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Api Signer Keep Alive",
                "operationId": "api_signer_keep_alive_api_v1_users_keep_alive_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/register-api-signer-invite": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Register Api Signer Invite",
                "description": "Register api-signer invite.",
                "operationId": "register_api_signer_invite_api_v1_users__id__register_api_signer_invite_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to register.",
                            "title": "Id"
                        },
                        "description": "ID of the user to register."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterApiSignerInviteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/complete-api-signer-onboarding": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Complete Api Signer Onboarding",
                "description": "Complete api-signer's onboarding.",
                "operationId": "complete_api_signer_onboarding_api_v1_users_complete_api_signer_onboarding_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompleteOnboardingApiSignerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/key": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Set Api User Key",
                "description": "Set api-user's provisioning key.",
                "operationId": "set_api_user_key_api_v1_users__id__key_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of an api-user to set key.",
                            "title": "Id"
                        },
                        "description": "ID of an api-user to set key."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetKeyApiUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SetUserKeyErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Remove Api User Key",
                "description": "Remove api-user's provisioning key.",
                "operationId": "remove_api_user_key_api_v1_users__id__key_delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of an api-user to remove key.",
                            "title": "Id"
                        },
                        "description": "ID of an api-user to remove key."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_RemoveUserKeyErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/disable": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Disable User",
                "description": "Disable a user and all it's memberships by force deleting it while ignoring prerequisite warnings and errors.",
                "operationId": "disable_user_api_v1_users_disable_post",
                "parameters": [
                    {
                        "name": "user_email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The email of the user to disable.",
                            "title": "User Email"
                        },
                        "description": "The email of the user to disable."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisableUserMembershipResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/disable-membership": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Disable Membership",
                "description": "Disable user's membership by force deleting it while ignoring prerequisite warnings and errors.",
                "operationId": "disable_membership_api_v1_users_disable_membership_post",
                "parameters": [
                    {
                        "name": "user_email",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "The email of the user to disable.",
                            "title": "User Email"
                        },
                        "description": "The email of the user to disable."
                    },
                    {
                        "name": "organization_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the organization which membership should be disabled.",
                            "title": "Organization Id"
                        },
                        "description": "ID of the organization which membership should be disabled."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DisableUserMembershipResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/abort-device-onboarding": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Abort Device Onboarding",
                "description": "Abort device onboarding for a specific user.",
                "operationId": "abort_device_onboarding_api_v1_users__id__abort_device_onboarding_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user owning the aborted device reset.",
                            "title": "Id"
                        },
                        "description": "ID of the user owning the aborted device reset."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/acknowledge-banner": {
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Acknowledge Banner",
                "description": "set acknowledge time of a banner to current time.",
                "operationId": "acknowledge_banner_api_v1_users_acknowledge_banner_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AcknowledgeBannerRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/reset-mfa": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Reset User Mfa",
                "description": "Reset user's mfa enrollment.",
                "operationId": "reset_user_mfa_api_v1_users_reset_mfa_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetUserMultiFactorAuthenticationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/proposals": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Submit User Change Proposal",
                "description": "Create a user change proposal.",
                "operationId": "submit_user_change_proposal_api_v1_users__id__proposals_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to edit.",
                            "title": "Id"
                        },
                        "description": "ID of the user to edit."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitUserChangeProposalRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/proposals/{proposal_id}/approve": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Approve User Change Proposal",
                "description": "Approve user change proposal.",
                "operationId": "approve_user_change_proposal_api_v1_users__id__proposals__proposal_id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to approve its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the user to approve its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the change proposal to approve.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the change proposal to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/proposals/{proposal_id}/abort": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Abort User Change Proposal",
                "description": "Abort user change proposal.",
                "operationId": "abort_user_change_proposal_api_v1_users__id__proposals__proposal_id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user to abort its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the user to abort its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the change proposal to abort.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the change proposal to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-groups": {
            "get": {
                "tags": [
                    "User Groups"
                ],
                "summary": "List User Groups",
                "description": "Get a list of user groups",
                "operationId": "list_user_groups_api_v1_user_groups_get",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserGroupState"
                            }
                        }
                    },
                    {
                        "name": "user_group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "User Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "modified_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Modified By",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Name",
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string",
                            "minLength": 1
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sort By",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserGroupSortableFields"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListUserGroupsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Create User Group",
                "description": "Create a new user group.",
                "operationId": "create_user_group_api_v1_user_groups_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateUserGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateUserGroupErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-groups/{id}": {
            "get": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Get User Group",
                "description": "Retrieve user group details",
                "operationId": "get_user_group_api_v1_user_groups__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the user group to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetUserGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Delete Group",
                "description": "Delete a user group.",
                "operationId": "delete_group_api_v1_user_groups__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the user group to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_DeleteUserGroupErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-groups/{id}/proposals": {
            "post": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Submit User Group Change Proposal",
                "description": "Submits a change proposal for a user group.",
                "operationId": "submit_user_group_change_proposal_api_v1_user_groups__id__proposals_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group to submit a proposal for.",
                            "title": "Id"
                        },
                        "description": "ID of the user group to submit a proposal for."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitUserGroupChangeProposalRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SubmitChangeProposalErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-groups/{id}/proposals/{proposal_id}/approve": {
            "post": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Approve User Group Change Proposal",
                "description": "Approves the change proposal for a user group.",
                "operationId": "approve_user_group_change_proposal_api_v1_user_groups__id__proposals__proposal_id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group to approve its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the user group to approve its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group proposal to approve.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the user group proposal to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-groups/{id}/proposals/{proposal_id}/abort": {
            "post": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Abort User Group Change Proposal",
                "description": "Aborts the change proposal for a user group.",
                "operationId": "abort_user_group_change_proposal_api_v1_user_groups__id__proposals__proposal_id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group to abort its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the user group to abort its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group proposal to abort.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the user group proposal to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-groups/{id}/delete-prerequisites": {
            "get": {
                "tags": [
                    "User Groups"
                ],
                "summary": "Get Delete Group Prerequisites",
                "description": "Get delete prerequisites for a user group.",
                "operationId": "get_delete_group_prerequisites_api_v1_user_groups__id__delete_prerequisites_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the user group to get delete prerequisites for.",
                            "title": "Id"
                        },
                        "description": "ID of the user group to get delete prerequisites for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteUserGroupPrerequisitesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "List Vaults",
                "description": "Get a list of all vaults in an organization.",
                "operationId": "list_vaults_api_v1_vaults_get",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "vault_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Vault IDs to filter on.",
                            "title": "Vault Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "Vault IDs to filter on."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "vault_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Vault types to filter on.",
                            "title": "Vault Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultType"
                            }
                        },
                        "description": "Vault types to filter on."
                    },
                    {
                        "name": "vault_states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Vault states to filter on.",
                            "title": "Vault States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultState"
                            }
                        },
                        "description": "Vault states to filter on."
                    },
                    {
                        "name": "keyset_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of keyset IDs to filter on.",
                            "title": "Keyset Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "List of keyset IDs to filter on."
                    },
                    {
                        "name": "key_holder_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of key holder IDs to filter on.",
                            "title": "Key Holder Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "List of key holder IDs to filter on."
                    },
                    {
                        "name": "vault_group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of vault group IDs to filter on. Filter applies to current and pending vault groups.",
                            "title": "Vault Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "List of vault group IDs to filter on. Filter applies to current and pending vault groups."
                    },
                    {
                        "name": "exclude_vault_group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of vault group IDs to exclude.",
                            "title": "Exclude Vault Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "List of vault group IDs to exclude."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListVaultsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Create Vault",
                "description": "Create a new vault.",
                "operationId": "create_vault_api_v1_vaults_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateVaultRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateVaultResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateVaultErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/balances": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "List Vaults With Assets",
                "description": "Get a list of all vaults and their assets in an organization.",
                "operationId": "list_vaults_with_assets_api_v1_vaults_balances_get",
                "parameters": [
                    {
                        "name": "include_assets_info",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "`True` if assets information is included in the response, `False` otherwise.",
                            "default": true,
                            "title": "Include Assets Info"
                        },
                        "description": "`True` if assets information is included in the response, `False` otherwise."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "vault_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Vault Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "chains",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of chains to filter by. If empty, all chains will be included. A filter will be applied only if results contain one page of vaults.",
                            "title": "Chains",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainUniqueId"
                            }
                        },
                        "description": "List of chains to filter by. If empty, all chains will be included. A filter will be applied only if results contain one page of vaults."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "vault_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Vault Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultType"
                            }
                        }
                    },
                    {
                        "name": "vault_states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Vault States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultState"
                            }
                        }
                    },
                    {
                        "name": "utxo_vault_sub_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Utxo Vault Sub Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UtxoVaultSubType"
                            }
                        }
                    },
                    {
                        "name": "key_holder_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of key holder IDs to filter on.",
                            "title": "Key Holder Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "List of key holder IDs to filter on."
                    },
                    {
                        "name": "hide_empty",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "default": false,
                            "title": "Hide Empty",
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "vault_group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of vault group IDs to filter on. Filter applies to current and pending vault groups.",
                            "title": "Vault Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "List of vault group IDs to filter on. Filter applies to current and pending vault groups."
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sort By",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultSortableFields"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListVaultsWithAssetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/export": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Export Vaults With Assets",
                "description": "Get a CSV-format list of balances of all vaults and their assets.",
                "operationId": "export_vaults_with_assets_api_v1_vaults_export_get",
                "parameters": [
                    {
                        "name": "vaults_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Vault IDs to filter on.",
                            "title": "Vaults Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "Vault IDs to filter on."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exported vaults in CSV format",
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/metadata": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Get Vault Metadata",
                "description": "Retrieve extra vault details.",
                "operationId": "get_vault_metadata_api_v1_vaults__id__metadata_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The unique identifier of the vault to retrieve.",
                            "title": "Id"
                        },
                        "description": "The unique identifier of the vault to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVaultMetadataResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Get Vault",
                "description": "Retrieve vault details.",
                "operationId": "get_vault_api_v1_vaults__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetVaultResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/assets/{asset_id}": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Get Vault Asset",
                "description": "Get a specific asset in a vault.",
                "operationId": "get_vault_asset_api_v1_vaults__id__assets__asset_id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to retrieve."
                    },
                    {
                        "name": "asset_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the asset to retrieve.",
                            "title": "Asset Id"
                        },
                        "description": "ID of the asset to retrieve."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOwnedAssetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/assets": {
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Get Vault Assets",
                "description": "Get a list of all assets in a vault.",
                "operationId": "get_vault_assets_api_v1_vaults__id__assets_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to retrieve."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "asset_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Asset Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListOwnedAssetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/archive": {
            "post": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Archive Vault",
                "description": "Archive an existing vault.",
                "operationId": "archive_vault_api_v1_vaults__id__archive_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to archive.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to archive."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/restore": {
            "post": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Restore Vault",
                "description": "Restore an archived vault.",
                "operationId": "restore_vault_api_v1_vaults__id__restore_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to restore.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to restore."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/name": {
            "put": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Rename Vault",
                "description": "Rename an existing vault.",
                "operationId": "rename_vault_api_v1_vaults__id__name_put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to rename.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to rename."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenameVaultRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/{id}/addresses": {
            "post": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Create Address",
                "description": "Create a new address.",
                "operationId": "create_address_api_v1_vaults__id__addresses_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault to create address in.",
                            "title": "Id"
                        },
                        "description": "ID of the vault to create address in."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateVaultAddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateVaultAddressResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateVaultAddressErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Vaults"
                ],
                "summary": "List Vault Addresses",
                "description": "Get a list of all addresses in a vault.",
                "operationId": "list_vault_addresses_api_v1_vaults__id__addresses_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault.",
                            "title": "Id"
                        },
                        "description": "ID of the vault."
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultAddressSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "addresses",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "List of addresses to filter on.",
                            "title": "Addresses",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "List of addresses to filter on."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListVaultAddressesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vaults/addresses/{id}/name": {
            "put": {
                "tags": [
                    "Vaults"
                ],
                "summary": "Rename Vault Address",
                "description": "Rename an existing vault address.",
                "operationId": "rename_vault_address_api_v1_vaults_addresses__id__name_put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault address to rename.",
                            "title": "Id"
                        },
                        "description": "ID of the vault address to rename."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RenameVaultRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vault-groups": {
            "get": {
                "tags": [
                    "Vault Groups"
                ],
                "summary": "List Vault Groups",
                "description": "Get a list of vault groups in the organization.",
                "operationId": "list_vault_groups_api_v1_vault_groups_get",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/VaultGroupSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "vault_group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Vault group IDs to filter on.",
                            "title": "Vault Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "Vault group IDs to filter on."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "access_level",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/ListVaultGroupsFilterByAccessLevel"
                                }
                            ],
                            "default": "view",
                            "title": "Access Level"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListVaultGroupsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Vault Groups"
                ],
                "summary": "Create Vault Group",
                "description": "Create a new vault group.",
                "operationId": "create_vault_group_api_v1_vault_groups_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateVaultGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateVaultGroupResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateVaultGroupErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vault-groups/{id}/permissions": {
            "put": {
                "tags": [
                    "Vault Groups"
                ],
                "summary": "Update Vault Group Permissions",
                "description": "Updates a vaults group permissions.",
                "operationId": "update_vault_group_permissions_api_v1_vault_groups__id__permissions_put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault group to update it's permissions.",
                            "title": "Id"
                        },
                        "description": "ID of the vault group to update it's permissions."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateVaultGroupPermissionsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_UpdateVaultGroupPermissionsErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vault-groups/{id}/proposals": {
            "post": {
                "tags": [
                    "Vault Groups"
                ],
                "summary": "Submit Vault Group Change Proposal",
                "description": "Create a vault group change request.",
                "operationId": "submit_vault_group_change_proposal_api_v1_vault_groups__id__proposals_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault group to edit.",
                            "title": "Id"
                        },
                        "description": "ID of the vault group to edit."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitVaultGroupChangeProposalRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vault-groups/{id}/proposals/{proposal_id}/approve": {
            "post": {
                "tags": [
                    "Vault Groups"
                ],
                "summary": "Approve Vault Group Change Proposal",
                "description": "Approve vault group change proposal.",
                "operationId": "approve_vault_group_change_proposal_api_v1_vault_groups__id__proposals__proposal_id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault group to approve its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the vault group to approve its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault group proposal to approve.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the vault group proposal to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/vault-groups/{id}/proposals/{proposal_id}/abort": {
            "post": {
                "tags": [
                    "Vault Groups"
                ],
                "summary": "Abort Vault Group Change Proposal",
                "description": "Abort vault group change proposal.",
                "operationId": "abort_vault_group_change_proposal_api_v1_vault_groups__id__proposals__proposal_id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault group to abort its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the vault group to abort its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the vault group proposal to abort.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the vault group proposal to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/assets/owned-assets/{id}": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "summary": "Get Owned Asset",
                "description": "Get a a specific asset owned by an organization.",
                "operationId": "get_owned_asset_api_v1_assets_owned_assets__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the asset to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the asset to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetOwnedAssetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/assets/owned-assets": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "summary": "List Owned Assets",
                "description": "Get a list of all assets owned by an organization.",
                "operationId": "list_owned_assets_api_v1_assets_owned_assets_get",
                "parameters": [
                    {
                        "name": "vault_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Vault Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "chains",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Chains",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainUniqueId"
                            }
                        }
                    },
                    {
                        "name": "end_user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "End User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "asset_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Asset Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "is_hidden",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Is Hidden",
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListOwnedAssetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/assets": {
            "put": {
                "tags": [
                    "Assets"
                ],
                "summary": "Update Asset Configuration",
                "description": "Update the asset's configuration under the entire organization.",
                "operationId": "update_asset_configuration_api_v1_assets_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAssetConfiguration"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/assets/prices": {
            "post": {
                "tags": [
                    "Assets"
                ],
                "summary": "Fetch Asset Prices",
                "description": "Fetch the prices of assets.",
                "operationId": "fetch_asset_prices_api_v1_assets_prices_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FetchAssetPricesRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FetchAssetPricesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/assets/": {
            "get": {
                "tags": [
                    "Assets"
                ],
                "summary": "List Assets",
                "description": "List all assets on the Fordefi platform.",
                "operationId": "list_assets_api_v1_assets__get",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "include_spam",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Include Spam"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAssetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/assets/enrich-assets": {
            "post": {
                "tags": [
                    "Assets"
                ],
                "summary": "Enrich Assets",
                "description": "Enrich assets from the Fordefi platform.",
                "operationId": "enrich_assets_api_v1_assets_enrich_assets_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnrichAssetsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/next_api_signer_transaction": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Get Next Api Signer Transaction",
                "description": "Get the first transaction ready for signing by api-signer.",
                "operationId": "get_next_api_signer_transaction_api_v1_transactions_next_api_signer_transaction_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNextApiSignerTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/next_api_signer_transaction_v2": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Get Next Api Signer Transaction V2",
                "description": "Get the first transaction ready for signing by api-signer.",
                "operationId": "get_next_api_signer_transaction_v2_api_v1_transactions_next_api_signer_transaction_v2_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetNextApiSignerTransactionResponseV2"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/next_api_signer_transaction_v3": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Process Next Api Signer Transaction V3",
                "description": "Get the first transaction ready for signing by api-signer while it already registered for signing.",
                "operationId": "process_next_api_signer_transaction_v3_api_v1_transactions_next_api_signer_transaction_v3_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NextApiSignerTransactionRequestV3"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NextApiSignerTransactionResponseV3"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/export": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Export Transactions",
                "description": "Get a CSV-format list of transactions.",
                "operationId": "export_transactions_api_v1_transactions_export_get",
                "responses": {
                    "200": {
                        "description": "Exported transactions in CSV format",
                        "content": {
                            "text/csv": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Get Transaction",
                "description": "Retrieve transaction details.",
                "operationId": "get_transaction_api_v1_transactions__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "List Transactions",
                "description": "Get a list of all transactions in an organization.",
                "operationId": "list_transactions_api_v1_transactions_get",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "created_before",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Created Before",
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "created_after",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Created After",
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "modified_after",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Modified After",
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "vault_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The filter applies both to transactions that have been signed by the vault and also to transactions that have interacted with the vault. ",
                            "title": "Vault Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The filter applies both to transactions that have been signed by the vault and also to transactions that have interacted with the vault. "
                    },
                    {
                        "name": "chains",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Chains",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainUniqueId"
                            }
                        }
                    },
                    {
                        "name": "initiator_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Initiator Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "State of the transaction. Can be one of:<ul> <li>`pending`</li> <li>`finalized`, which can be one of: <ul><li>`completed` </li> <li>`aborted` </li>  <li>`error_pushing_to_blockchain` </li> <li>`reverted`  </li> <li>`accelerated` </li>  <li>`canceled` </li>  </ul><li>`approved` </li> </ul>",
                            "title": "States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TransactionState"
                            }
                        },
                        "description": "State of the transaction. Can be one of:<ul> <li>`pending`</li> <li>`finalized`, which can be one of: <ul><li>`completed` </li> <li>`aborted` </li>  <li>`error_pushing_to_blockchain` </li> <li>`reverted`  </li> <li>`accelerated` </li>  <li>`canceled` </li>  </ul><li>`approved` </li> </ul>"
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TransactionType"
                            }
                        }
                    },
                    {
                        "name": "sub_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sub Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TransactionSubType"
                            }
                        }
                    },
                    {
                        "name": "signer_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Signer Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/SignerType"
                            }
                        }
                    },
                    {
                        "name": "transaction_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Transaction Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "end_user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "End User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "is_hidden",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Is Hidden",
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Direction",
                            "$ref": "#/components/schemas/TransactionDirection"
                        }
                    },
                    {
                        "name": "include_full_response",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true,
                            "title": "Include Full Response"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sort By",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TransactionSortableFields"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Create Transaction",
                "description": "Create a new transaction.",
                "operationId": "create_transaction_api_v1_transactions_post",
                "parameters": [
                    {
                        "name": "x-signature",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. ",
                            "title": "X-Signature",
                            "type": "string",
                            "example": "SGVsbG8="
                        },
                        "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. "
                    },
                    {
                        "name": "x-timestamp",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks.",
                            "title": "X-Timestamp",
                            "type": "integer"
                        },
                        "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks."
                    },
                    {
                        "name": "x-idempotence-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Optional idempotence ID of a transaction.",
                            "title": "X-Idempotence-Id",
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Optional idempotence ID of a transaction."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/create-with-wait": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Create Transaction With Wait",
                "description": "Create a new transaction and wait until transaction reaches given state.",
                "operationId": "create_transaction_with_wait_api_v1_transactions_create_with_wait_post",
                "parameters": [
                    {
                        "name": "x-signature",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. ",
                            "title": "X-Signature",
                            "type": "string",
                            "example": "SGVsbG8="
                        },
                        "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. "
                    },
                    {
                        "name": "x-timestamp",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks.",
                            "title": "X-Timestamp",
                            "type": "integer"
                        },
                        "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks."
                    },
                    {
                        "name": "x-idempotence-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Optional idempotence ID of a transaction.",
                            "title": "X-Idempotence-Id",
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Optional idempotence ID of a transaction."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTransactionWithWaitRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateTransactionWithWaitResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/approve": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Approve Transaction",
                "description": "Approve a transaction.\n\nA transaction awaits approval when the caller API user has been specified as a\npotential approver in the policy and the transaction\nis in the `waiting_for_approval` state.",
                "operationId": "approve_transaction_api_v1_transactions__id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to approve.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_ApproveTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/abort": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Abort Transaction",
                "description": "Abort a transaction.\n\nAbort is possible only for a transaction that is in one of the following states:\n   <ul>\n   <li>Waiting for approval\n   <li>Approved\n   </ul>\n\nThe aborting user must be one of the following:\n<ul>\n<li>The user who created the transaction\n<li>An admin\n<li>A legitimate approver\n</ul>\n\nAPI users can abort only the transactions they created.",
                "operationId": "abort_transaction_api_v1_transactions__id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to abort.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_AbortTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/release": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Release Transaction",
                "description": "Release a transaction.",
                "operationId": "release_transaction_api_v1_transactions__id__release_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to release.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to release."
                    },
                    {
                        "name": "x-signature",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. ",
                            "title": "X-Signature",
                            "type": "string",
                            "example": "SGVsbG8="
                        },
                        "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. "
                    },
                    {
                        "name": "x-timestamp",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks.",
                            "title": "X-Timestamp",
                            "type": "integer"
                        },
                        "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReleaseTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReleaseTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_ReleaseTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/describe": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Describe Transaction",
                "description": "Get the current blockchain fee price and estimate the total transaction fee.",
                "operationId": "describe_transaction_api_v1_transactions_describe_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DescribeTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DescribeTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/predict": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Predict Transaction",
                "description": "Simulate the transaction and show the exact token's balance change, in addition to the fee estimation.",
                "operationId": "predict_transaction_api_v1_transactions_predict_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PredictTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PredictTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_PredictTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/register-sign-session": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Register Transaction Sign Session",
                "description": "Register a sign-session for a transaction.",
                "operationId": "register_transaction_sign_session_api_v1_transactions__id__register_sign_session_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to start signing.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to start signing."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterTransactionSignSessionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterTransactionSignSessionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SignTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/submit-signature": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Submit Transaction Signature",
                "description": "Submit a signature for a transaction.",
                "operationId": "submit_transaction_signature_api_v1_transactions__id__submit_signature_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to submit signature.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to submit signature."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitSignedTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SignTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/push": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Push Transaction",
                "description": "Push a transaction to the chain.",
                "operationId": "push_transaction_api_v1_transactions__id__push_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to be pushed to chain.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to be pushed to chain."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PushTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PushTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/update-for-signing": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Update Transaction For Signing",
                "description": "Update a transaction before signing it.",
                "operationId": "update_transaction_for_signing_api_v1_transactions__id__update_for_signing_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to update for signing.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to update for signing."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTransactionForSigningRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateTransactionForSigningResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SignTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/{id}/update-spam-state": {
            "put": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Update Transaction Spam State",
                "description": "Update transaction's spam state.",
                "operationId": "update_transaction_spam_state_api_v1_transactions__id__update_spam_state_put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to update spam state.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to update spam state."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTransactionSpamStateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/bulk": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Bulk Create Transactions",
                "description": "Create a batch of transactions.",
                "operationId": "bulk_create_transactions_api_v1_transactions_bulk_post",
                "parameters": [
                    {
                        "name": "x-signature",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. ",
                            "title": "X-Signature",
                            "type": "string",
                            "example": "SGVsbG8="
                        },
                        "description": "Signature of the body. Base64 encoded string. If the request is made programatically by an API user, signing of the request is required and is intended to protect you from malicious backends. "
                    },
                    {
                        "name": "x-timestamp",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks.",
                            "title": "X-Timestamp",
                            "type": "integer"
                        },
                        "description": "Timestamp of the signature. Integer. Specify an Epoch date. If the request is made programatically by an API user, the timestamp of the request is required and is intended to protect you from replay attacks."
                    },
                    {
                        "name": "x-idempotence-id",
                        "in": "header",
                        "required": false,
                        "schema": {
                            "description": "Optional idempotence ID of a transaction.",
                            "title": "X-Idempotence-Id",
                            "type": "string",
                            "format": "uuid"
                        },
                        "description": "Optional idempotence ID of a transaction."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkCreateTransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkCreateTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/bulk/describe": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Bulk Describe Transactions",
                "description": "Get the current blockchain fee price and estimate the total transaction fee for the batch of transactions.",
                "operationId": "bulk_describe_transactions_api_v1_transactions_bulk_describe_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkDescribeTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkDescribeTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/bulk/predict": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Bulk Predict Transactions",
                "description": "Simulate the batch of transactions and show the exact token's balance change,\nin addition to the fee estimation.",
                "operationId": "bulk_predict_transactions_api_v1_transactions_bulk_predict_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkPredictTransactionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPredictTransactionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_PredictTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/bulk/{batch_id}/abort": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Bulk Abort Transactions",
                "description": "Abort a batch of transactions.",
                "operationId": "bulk_abort_transactions_api_v1_transactions_bulk__batch_id__abort_post",
                "parameters": [
                    {
                        "name": "batch_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the batch of transactions.",
                            "title": "Batch Id"
                        },
                        "description": "ID of the batch of transactions."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_AbortTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/transactions/bulk/{batch_id}/approve": {
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Bulk Approve Transactions",
                "description": "Approve a batch of transactions.",
                "operationId": "bulk_approve_transactions_api_v1_transactions_bulk__batch_id__approve_post",
                "parameters": [
                    {
                        "name": "batch_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the batch of transactions.",
                            "title": "Batch Id"
                        },
                        "description": "ID of the batch of transactions."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_ApproveTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Create Contact",
                "description": "Create a new address book contact in an organization.",
                "operationId": "create_contact_api_v1_addressbook_contacts_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateContactRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressBookContact"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Address Book"
                ],
                "summary": "List Contacts",
                "description": "Get a list of all contacts in an organization.",
                "operationId": "list_contacts_api_v1_addressbook_contacts_get",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ContactSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "contact_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The contact IDs to filter by.",
                            "title": "Contact Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The contact IDs to filter by."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The states to filter by.",
                            "title": "States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/AddressBookContactState"
                            }
                        },
                        "description": "The states to filter by."
                    },
                    {
                        "name": "chain_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The chain types to filter by.",
                            "title": "Chain Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainType"
                            }
                        },
                        "description": "The chain types to filter by."
                    },
                    {
                        "name": "chains",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The chain unique ids to filter by.",
                            "title": "Chains",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChainUniqueId"
                            }
                        },
                        "description": "The chain unique ids to filter by."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAddressBookContactResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts/{id}/proposals/{proposal_id}/abort": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Abort Contact",
                "description": "Abort a contact change proposal.",
                "operationId": "abort_contact_api_v1_addressbook_contacts__id__proposals__proposal_id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact to abort its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the address book contact to abort its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact proposal to abort.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the address book contact proposal to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts/{id}/proposals/{proposal_id}/approve": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Approve Contact",
                "description": "Approve a contact change proposal.",
                "operationId": "approve_contact_api_v1_addressbook_contacts__id__proposals__proposal_id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact to approve its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the address book contact to approve its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact proposal to approve.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the address book contact proposal to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts/{id}/proposals/{proposal_id}/sign": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Sign Contact Change Proposal",
                "description": "Sign a contact change proposal.",
                "operationId": "sign_contact_change_proposal_api_v1_addressbook_contacts__id__proposals__proposal_id__sign_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact to sign its proposal.",
                            "title": "Id"
                        },
                        "description": "ID of the address book contact to sign its proposal."
                    },
                    {
                        "name": "proposal_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact proposal to sign.",
                            "title": "Proposal Id"
                        },
                        "description": "ID of the address book contact proposal to sign."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignContactChangeProposalRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts/{id}/proposals": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Edit Contact",
                "description": "Edit address book contact.",
                "operationId": "edit_contact_api_v1_addressbook_contacts__id__proposals_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book contact.",
                            "title": "Id"
                        },
                        "description": "ID of the address book contact."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditContactRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts/{id}/delete-prerequisites": {
            "get": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Get Delete Contact Prerequisites",
                "description": "Get the prerequisites for deleting a contact.",
                "operationId": "get_delete_contact_prerequisites_api_v1_addressbook_contacts__id__delete_prerequisites_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the contact to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the contact to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteContactPrerequisitesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/contacts/{id}": {
            "delete": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Delete Contact",
                "description": "Delete a contact.",
                "operationId": "delete_contact_api_v1_addressbook_contacts__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the contact to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the contact to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/groups": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Create Group",
                "description": "Create a new address group in an organization.",
                "operationId": "create_group_api_v1_addressbook_groups_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressBookGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Address Book"
                ],
                "summary": "List Groups",
                "description": "Get a list of address book groups in an organization.",
                "operationId": "list_groups_api_v1_addressbook_groups_get",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/AddressBookGroupsSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "group_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The group IDs to filter by.",
                            "title": "Group Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The group IDs to filter by."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "contact_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The contact IDs to filter by.",
                            "title": "Contact Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The contact IDs to filter by."
                    },
                    {
                        "name": "states",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The states to filter by.",
                            "title": "States",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/AddressBookGroupState"
                            }
                        },
                        "description": "The states to filter by."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAddressBookGroupsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/groups/{id}": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Edit Group",
                "description": "Edit address book group.",
                "operationId": "edit_group_api_v1_addressbook_groups__id__post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book group to edit.",
                            "title": "Id"
                        },
                        "description": "ID of the address book group to edit."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EditGroupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Delete Group",
                "description": "Delete a group.",
                "operationId": "delete_group_api_v1_addressbook_groups__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the group to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the group to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/groups/change-requests/{id}/abort": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Abort Group Edit",
                "description": "Abort editing an address book group.",
                "operationId": "abort_group_edit_api_v1_addressbook_groups_change_requests__id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book group edit change request.",
                            "title": "Id"
                        },
                        "description": "ID of the address book group edit change request."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/groups/change-requests/{id}/approve": {
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Approve Group Edit",
                "description": "Approve editing an address book group.",
                "operationId": "approve_group_edit_api_v1_addressbook_groups_change_requests__id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the address book group edit change request.",
                            "title": "Id"
                        },
                        "description": "ID of the address book group edit change request."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/addressbook/groups/{id}/delete-prerequisites": {
            "get": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Get Delete Group Prerequisites",
                "description": "Get delete prerequisites for a group.",
                "operationId": "get_delete_group_prerequisites_api_v1_addressbook_groups__id__delete_prerequisites_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the group to get delete prerequisites for.",
                            "title": "Id"
                        },
                        "description": "ID of the group to get delete prerequisites for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteGroupPrerequisitesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "List Webhooks",
                "description": "Get a list of all webhooks in an organization.",
                "operationId": "list_webhooks_api_v1_webhooks_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListWebhooksResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Create Webhook",
                "description": "Create a new webhook.",
                "operationId": "create_webhook_api_v1_webhooks_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateWebhookRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateWebhookResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/{id}": {
            "delete": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Delete Webhook",
                "description": "Delete a webhook.",
                "operationId": "delete_webhook_api_v1_webhooks__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "ID of the webhook to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the webhook to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/test": {
            "post": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Test Webhook",
                "description": "Test a webhook.",
                "operationId": "test_webhook_api_v1_webhooks_test_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TestWebhookRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_TestWebhookErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                },
                "callbacks": {
                    "webhook_event": {
                        "{$request.body.url}": {
                            "post": {
                                "tags": [
                                    "Webhooks"
                                ],
                                "summary": "Webhook Event",
                                "operationId": "webhook_event__request_body_url__post",
                                "requestBody": {
                                    "content": {
                                        "application/json": {
                                            "schema": {
                                                "$ref": "#/components/schemas/WebhookEvent"
                                            }
                                        }
                                    },
                                    "required": true
                                },
                                "responses": {
                                    "200": {
                                        "description": "Successful Response",
                                        "content": {
                                            "application/json": {
                                                "schema": {}
                                            }
                                        }
                                    },
                                    "422": {
                                        "description": "Validation Error"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/verification-key": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Get Webhooks Verification Key",
                "description": "Get the verification key for webhooks.",
                "operationId": "get_webhooks_verification_key_api_v1_webhooks_verification_key_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetWebhooksVerificationKeyResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/trigger/transaction/{id}": {
            "post": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Trigger Transaction Webhook",
                "description": "Trigger transaction create and latest state via webhooks.",
                "operationId": "trigger_transaction_webhook_api_v1_webhooks_trigger_transaction__id__post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the transaction to send events for.",
                            "title": "Id"
                        },
                        "description": "ID of the transaction to send events for."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/webhooks/{id}/revive": {
            "post": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Revive Webhook",
                "description": "Revive a suspended webhook.",
                "operationId": "revive_webhook_api_v1_webhooks__id__revive_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the webhook to revive.",
                            "title": "Id"
                        },
                        "description": "ID of the webhook to revive."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/keysets": {
            "get": {
                "tags": [
                    "Keysets"
                ],
                "summary": "List Keysets",
                "description": "Get a list of all keysets.",
                "operationId": "list_keysets_api_v1_keysets_get",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "keyset_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Keyset Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "scopes",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Scopes",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/KeysetScope"
                            }
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sort By",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/KeysetSortableFields"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListKeysetsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Keysets"
                ],
                "summary": "Create Keyset",
                "description": "Create a new keyset.",
                "operationId": "create_keyset_api_v1_keysets_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateKeysetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateKeysetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateKeysetErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/keysets/{id}": {
            "get": {
                "tags": [
                    "Keysets"
                ],
                "summary": "Get Keyset",
                "description": "Retrieve keyset details.",
                "operationId": "get_keyset_api_v1_keysets__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the keyset to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the keyset to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetKeysetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/keysets/{id}/encrypted-device-shares": {
            "post": {
                "tags": [
                    "Keysets"
                ],
                "summary": "Upload Encrypted Device Shares",
                "description": "Upload encrypted device shares for a keyset.",
                "operationId": "upload_encrypted_device_shares_api_v1_keysets__id__encrypted_device_shares_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the keyset to upload encrypted device shares for.",
                            "title": "Id"
                        },
                        "description": "ID of the keyset to upload encrypted device shares for."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadKeysetEncryptedDeviceSharesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_EncryptedDeviceSharesUploadErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/keysets/{id}/desired-key-types": {
            "post": {
                "tags": [
                    "Keysets"
                ],
                "summary": "Set Desired Key Types",
                "description": "Set desired key types for a keyset.",
                "operationId": "set_desired_key_types_api_v1_keysets__id__desired_key_types_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the keyset to set desired key types for.",
                            "title": "Id"
                        },
                        "description": "ID of the keyset to set desired key types for."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetKeysetDesiredKeyTypesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SetDesiredKeyTypesErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/mpc_shares": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Get Mpc Shares",
                "description": "Gets the encrypted shares of the organization.",
                "operationId": "get_mpc_shares_api_v1_organizations_mpc_shares_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEncryptedSharesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations": {
            "get": {
                "tags": [
                    "Organizations"
                ],
                "summary": "List Organizations",
                "description": "Lists all organizations.",
                "operationId": "list_organizations_api_v1_organizations_get",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "names_to_exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The list of organization names to exclude from the results.",
                            "title": "Names To Exclude",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The list of organization names to exclude from the results."
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The list of organization types to filter by.",
                            "title": "Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/OrganizationType"
                            }
                        },
                        "description": "The list of organization types to filter by."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListOrganizationsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{organization_id}": {
            "patch": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Update Organization",
                "description": "Update organization.",
                "operationId": "update_organization_api_v1_organizations__organization_id__patch",
                "parameters": [
                    {
                        "name": "organization_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the organization to configure.",
                            "title": "Organization Id"
                        },
                        "description": "ID of the organization to configure."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrganizationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/start-onboarding": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Start Onboarding",
                "description": "Starts the onboarding process of a new organization.",
                "operationId": "start_onboarding_api_v1_organizations_start_onboarding_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StartOnboardingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StartOnboardingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/complete-onboarding": {
            "post": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Complete Onboarding",
                "description": "Completes the onboarding process of an organization.",
                "operationId": "complete_onboarding_api_v1_organizations_complete_onboarding_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompleteOrganizationOnboardingRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompleteOrganizationOnboardingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/organizations/{id}/config-mfa": {
            "put": {
                "tags": [
                    "Organizations"
                ],
                "summary": "Config Mfa",
                "description": "Configure MFA for an organization.",
                "operationId": "config_mfa_api_v1_organizations__id__config_mfa_put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the organization to configure.",
                            "title": "Id"
                        },
                        "description": "ID of the organization to configure."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigMultiFactorAuthenticationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}/message": {
            "get": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Get Mpc Message",
                "description": "Get the next message of the MPC session.\nThis, together with the post method, are the middle steps in the mpc process (used for sign and keygen).",
                "operationId": "get_mpc_message_api_v1_mpc_sessions__id__message_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the MPC session.",
                            "title": "Id"
                        },
                        "description": "ID of the MPC session."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MpcMessage"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_SignTransactionErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}/messages": {
            "post": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Post Mpc Message",
                "description": "Send a message to the MPC session.\nThis, together with the get method, are the middle steps in the mpc process (used for sign and keygen).",
                "operationId": "post_mpc_message_api_v1_mpc_sessions__id__messages_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the MPC session.",
                            "title": "Id"
                        },
                        "description": "ID of the MPC session."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MpcMessage"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}": {
            "delete": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Abort Mpc Session",
                "description": "Abort the MPC session.",
                "operationId": "abort_mpc_session_api_v1_mpc_sessions__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the MPC session.",
                            "title": "Id"
                        },
                        "description": "ID of the MPC session."
                    },
                    {
                        "name": "reason",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Reason for aborting the MPC session.",
                            "title": "Reason"
                        },
                        "description": "Reason for aborting the MPC session."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/register-keygen": {
            "post": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Register Keygen",
                "description": "Register a keygen session.\nThis is the first step in the keygen process.",
                "operationId": "register_keygen_api_v1_mpc_sessions_register_keygen_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterKeygenSessionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterKeygenSessionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}/create-master-key": {
            "post": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Create Master Key",
                "description": "Create a key for device users in organization.\nThis request requires a device signature as to verify the validity of the generator.\nThis is done in order to prevent a malicious device (e.g. malicious backend)\nfrom creating a key for the entire organization.",
                "operationId": "create_master_key_api_v1_mpc_sessions__id__create_master_key_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the MPC session.",
                            "title": "Id"
                        },
                        "description": "ID of the MPC session."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMasterKeyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}/create-user-key": {
            "post": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Create User Key",
                "description": "Create a key for keyset users (i.e. end user).\nThis request does not require a device signature as the key will be personal and only the device\ncreating it will access it. As opposed to create master key,\nin this case a malicious device that creates a key won't be able to influence others with it.",
                "operationId": "create_user_key_api_v1_mpc_sessions__id__create_user_key_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the MPC session.",
                            "title": "Id"
                        },
                        "description": "ID of the MPC session."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserKeyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}/initiate-sign": {
            "post": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Initiate Sign Session",
                "description": "Initiate an MPC sign-session process.\nUsed only for transactions with multiple inputs like utxo.",
                "operationId": "initiate_sign_session_api_v1_mpc_sessions__id__initiate_sign_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the session to initiate.",
                            "title": "Id"
                        },
                        "description": "ID of the session to initiate."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InitiateSignSessionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/mpc-sessions/{id}/set-mock-keygen-seed": {
            "post": {
                "tags": [
                    "Mpc Sessions"
                ],
                "summary": "Set Mock Keygen Seed",
                "description": "Set the mock keygen seed.",
                "operationId": "set_mock_keygen_seed_api_v1_mpc_sessions__id__set_mock_keygen_seed_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the MPC session.",
                            "title": "Id"
                        },
                        "description": "ID of the MPC session."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetMockKeygenSeedRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/contracts/update": {
            "post": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Update Contract",
                "description": "Try to add missing dapp and abi for a contracts in db.",
                "operationId": "update_contract_api_v1_contracts_update_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateContractRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateContractResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user-actions": {
            "get": {
                "tags": [
                    "User Actions"
                ],
                "summary": "List User Actions",
                "description": "Get a list of user actions.",
                "operationId": "list_user_actions_api_v1_user_actions_get",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "modified_after",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Modified After",
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Types",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ActionType"
                            }
                        }
                    },
                    {
                        "name": "related_user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Related User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "referenced_object_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Referenced Object Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        }
                    },
                    {
                        "name": "include_finalized",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "default": false,
                            "title": "Include Finalized",
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Sort By",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/UserActionSortableFields"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListUserActionsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/policies/transactions": {
            "get": {
                "tags": [
                    "Transactions Policy"
                ],
                "summary": "Get Transactions Policy",
                "description": "Returns the published policy for transactions.",
                "operationId": "get_transactions_policy_api_v1_policies_transactions_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionsPolicy"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/policies/transactions/proposal": {
            "get": {
                "tags": [
                    "Transactions Policy"
                ],
                "summary": "Get Transactions Policy Proposal",
                "description": "Returns the policy proposal for transactions.",
                "operationId": "get_transactions_policy_proposal_api_v1_policies_transactions_proposal_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionsPolicyProposal"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Transactions Policy"
                ],
                "summary": "Submit Transactions Policy Proposal",
                "description": "Submits a policy proposal for transactions.",
                "operationId": "submit_transactions_policy_proposal_api_v1_policies_transactions_proposal_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitTransactionsPolicyProposalRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateTransactionsPolicyProposalErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/policies/transactions/proposal/approve": {
            "post": {
                "tags": [
                    "Transactions Policy"
                ],
                "summary": "Approve Transactions Policy Proposal",
                "description": "Approves the policy proposal for transactions.",
                "operationId": "approve_transactions_policy_proposal_api_v1_policies_transactions_proposal_approve_post",
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/policies/transactions/proposal/abort": {
            "post": {
                "tags": [
                    "Transactions Policy"
                ],
                "summary": "Abort Transactions Policy Proposal",
                "description": "Aborts the policy proposal for transactions.",
                "operationId": "abort_transactions_policy_proposal_api_v1_policies_transactions_proposal_abort_post",
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/wallet/connect": {
            "get": {
                "tags": [
                    "Wallet"
                ],
                "summary": "Connect Wallet",
                "description": "Connect a wallet",
                "operationId": "connect_wallet_api_v1_wallet_connect_get",
                "parameters": [
                    {
                        "name": "url",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uri",
                            "minLength": 1,
                            "description": "The url of the dapp to be connected to",
                            "title": "Url"
                        },
                        "description": "The url of the dapp to be connected to"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_ConnectWalletErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/verify_public_key": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Verify Public Key",
                "description": "Verifies the public key of the device.",
                "operationId": "verify_public_key_api_v1_devices_verify_public_key_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyPublicKeyRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid Device Public Key",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/{id}/register-invite": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Register Invite",
                "description": "Registers an invite for a device.",
                "operationId": "register_invite_api_v1_devices__id__register_invite_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the device that will register the invite.",
                            "title": "Id"
                        },
                        "description": "The id of the device that will register the invite."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterDeviceInviteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Create New Device",
                "description": "Creates a new device.",
                "operationId": "create_new_device_api_v1_devices_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateDeviceRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateDeviceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/{id}/abort": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Abort Create New Device",
                "description": "Abort a request to create a new device.",
                "operationId": "abort_create_new_device_api_v1_devices__id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the device to abort creation.",
                            "title": "Id"
                        },
                        "description": "The id of the device to abort creation."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/{id}/complete-onboarding": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Complete Onboarding",
                "description": "Completes the onboarding process of a new device.",
                "operationId": "complete_onboarding_api_v1_devices__id__complete_onboarding_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the device that will complete onboarding.",
                            "title": "Id"
                        },
                        "description": "The id of the device that will complete onboarding."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompleteDeviceOnboardingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompleteDeviceOnboardingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/{id}/encrypted-mpc-keys": {
            "get": {
                "tags": [
                    "Devices"
                ],
                "summary": "Get Encrypted Mpc Keys",
                "description": "Gets the encrypted MPC keys of a device.",
                "operationId": "get_encrypted_mpc_keys_api_v1_devices__id__encrypted_mpc_keys_get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the device.",
                            "title": "Id"
                        },
                        "description": "The id of the device."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEncryptedMPCKeysResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/{id}/push-token": {
            "put": {
                "tags": [
                    "Devices"
                ],
                "summary": "Update Device Push Token",
                "description": "Update device push token.",
                "operationId": "update_device_push_token_api_v1_devices__id__push_token_put",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the device.",
                            "title": "Id"
                        },
                        "description": "The id of the device."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDevicePushTokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/devices/{id}/disable": {
            "post": {
                "tags": [
                    "Devices"
                ],
                "summary": "Disable Device",
                "description": "Disables a device.",
                "operationId": "disable_device_api_v1_devices__id__disable_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the device.",
                            "title": "Id"
                        },
                        "description": "The id of the device."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/download-snapshot": {
            "get": {
                "tags": [
                    "Backups"
                ],
                "summary": "Download Backup Snapshot",
                "description": "Download encrypted backup snapshot.",
                "operationId": "download_backup_snapshot_api_v1_backups_download_snapshot_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/zip": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/public-key": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Start Public Key Backup",
                "description": "Start backup process with public key.",
                "operationId": "start_public_key_backup_api_v1_backups_public_key_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePublicKeyBackupRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/key-share": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Start Key Share Backup",
                "description": "Start backup process with key share.",
                "operationId": "start_key_share_backup_api_v1_backups_key_share_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateKeyShareBackupRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/change-requests/{id}/abort": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Abort Backup",
                "description": "Abort backup process.",
                "operationId": "abort_backup_api_v1_backups_change_requests__id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the backup request to abort.",
                            "title": "Id"
                        },
                        "description": "The id of the backup request to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/change-requests/{id}/approve": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Approve Backup",
                "description": "Approve backup process.",
                "operationId": "approve_backup_api_v1_backups_change_requests__id__approve_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the backup request to approve.",
                            "title": "Id"
                        },
                        "description": "The id of the backup request to approve."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/change-requests/{id}/public-key-sign": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Sign Public Key Backup",
                "description": "Sign public_key backup process.",
                "operationId": "sign_public_key_backup_api_v1_backups_change_requests__id__public_key_sign_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the backup request to sign.",
                            "title": "Id"
                        },
                        "description": "The id of the backup request to sign."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignPublicKeyBackupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/change-requests/{id}/key-share-sign": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Sign Key Share Backup",
                "description": "Sign key share backup process.",
                "operationId": "sign_key_share_backup_api_v1_backups_change_requests__id__key_share_sign_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the backup request to sign.",
                            "title": "Id"
                        },
                        "description": "The id of the backup request to sign."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignKeyShareBackupRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups": {
            "get": {
                "tags": [
                    "Backups"
                ],
                "summary": "Get Backup Info",
                "description": "Get backup info.",
                "operationId": "get_backup_info_api_v1_backups_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBackupInfoResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/email-change": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Start Backup Email Change",
                "description": "Start backup email change process.",
                "operationId": "start_backup_email_change_api_v1_backups_email_change_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateBackupEmailChangeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/email-change-requests/{id}/abort": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Abort Email Change",
                "description": "Abort backup email change process.",
                "operationId": "abort_email_change_api_v1_backups_email_change_requests__id__abort_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the backup email change request to abort.",
                            "title": "Id"
                        },
                        "description": "The id of the backup email change request to abort."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/email-change-requests/{id}/confirm": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Confirm Email Change",
                "description": "Confirm backup email change process.",
                "operationId": "confirm_email_change_api_v1_backups_email_change_requests__id__confirm_post",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The id of the backup email change request to confirm.",
                            "title": "Id"
                        },
                        "description": "The id of the backup email change request to confirm."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/keys": {
            "get": {
                "tags": [
                    "Backups"
                ],
                "summary": "Get Backup Keys",
                "description": "Get backup keys.",
                "operationId": "get_backup_keys_api_v1_backups_keys_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetBackupKeysResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/backups/migrate": {
            "post": {
                "tags": [
                    "Backups"
                ],
                "summary": "Migrate Backup",
                "description": "Migrate backup.",
                "operationId": "migrate_backup_api_v1_backups_migrate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MigrateBackupRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/end-users": {
            "get": {
                "tags": [
                    "End Users"
                ],
                "summary": "List End Users",
                "description": "Get a list of end users in the organization.",
                "operationId": "list_end_users_api_v1_end_users_get",
                "parameters": [
                    {
                        "name": "sort_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/EndUserSortableFields"
                            },
                            "title": "Sort By"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "Search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of the users.",
                            "title": "User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The unique identifiers of the users."
                    },
                    {
                        "name": "external_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "title": "External Id",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListEndUsersResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "End Users"
                ],
                "summary": "Create End User",
                "description": "Create a new end user.",
                "operationId": "create_end_user_api_v1_end_users_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateEndUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreateEndUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_CreateEndUserErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Already Exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/end-users/login": {
            "post": {
                "tags": [
                    "End Users"
                ],
                "summary": "End User Login",
                "description": "Validate that current user can login.",
                "operationId": "end_user_login_api_v1_end_users_login_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Request",
                                "$ref": "#/components/schemas/LoginEndUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndUserLoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/end-users/{id}": {
            "get": {
                "tags": [
                    "End Users"
                ],
                "summary": "Get End User",
                "description": "Gets the end user that corresponds to the given ID.",
                "operationId": "get_end_user_api_v1_end_users__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the end user to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the end user to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetEndUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/authorization-tokens": {
            "post": {
                "tags": [
                    "Authorization Tokens"
                ],
                "summary": "Issue Authorization Token",
                "description": "Issue authorization token for an end user.",
                "operationId": "issue_authorization_token_api_v1_authorization_tokens_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueAuthTokenRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueAuthTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DefinedPreconditionError_IssueEndUserAuthTokenErrorType_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Authorization Tokens"
                ],
                "summary": "List Authorization Tokens",
                "description": "List authorization tokens of end users.",
                "operationId": "list_authorization_tokens_api_v1_authorization_tokens_get",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "description": "The page number to fetch.",
                            "default": 1,
                            "title": "Page"
                        },
                        "description": "The page number to fetch."
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100,
                            "minimum": 1,
                            "description": "The number of items per page.",
                            "default": 50,
                            "title": "Size"
                        },
                        "description": "The number of items per page."
                    },
                    {
                        "name": "user_ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The unique identifiers of the users.",
                            "title": "User Ids",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "description": "The unique identifiers of the users."
                    },
                    {
                        "name": "user_types",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "User types to filter. Only end users are currently supported.",
                            "title": "User Types",
                            "type": "array",
                            "items": {
                                "enum": [
                                    "end_user"
                                ],
                                "type": "string"
                            }
                        },
                        "description": "User types to filter. Only end users are currently supported."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAuthTokensResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/authorization-tokens/{id}": {
            "delete": {
                "tags": [
                    "Authorization Tokens"
                ],
                "summary": "Delete Authorization Token",
                "description": "Delete authorization token of an end user.",
                "operationId": "delete_authorization_token_api_v1_authorization_tokens__id__delete",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the authorization token to delete.",
                            "title": "Id"
                        },
                        "description": "ID of the authorization token to delete."
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/authorization-tokens/create-token": {
            "post": {
                "tags": [
                    "Authorization Tokens"
                ],
                "summary": "Hidden Issue Authorization Token",
                "description": "Hidden api to issue authorization tokens.",
                "operationId": "hidden_issue_authorization_token_api_v1_authorization_tokens_create_token_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueApiUserAuthTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueApiUserAuthTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin-quorum": {
            "get": {
                "tags": [
                    "Admin Quorum"
                ],
                "summary": "Get Admin Quorum",
                "description": "Get admin quorum",
                "operationId": "get_admin_quorum_api_v1_admin_quorum_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAdminQuorumResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Admin Quorum"
                ],
                "summary": "Set Admin Quorum",
                "description": "Set admin quorum",
                "operationId": "set_admin_quorum_api_v1_admin_quorum_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetAdminQuorumRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SetAdminQuorumResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin-quorum/proposal/approve": {
            "post": {
                "tags": [
                    "Admin Quorum"
                ],
                "summary": "Approve Admin Quorum Change Proposal",
                "description": "Approve pending admin quorum change proposal",
                "operationId": "approve_admin_quorum_change_proposal_api_v1_admin_quorum_proposal_approve_post",
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/admin-quorum/proposal/abort": {
            "post": {
                "tags": [
                    "Admin Quorum"
                ],
                "summary": "Abort Admin Quorum Change Proposal",
                "description": "Abort pending admin quorum change proposal",
                "operationId": "abort_admin_quorum_change_proposal_api_v1_admin_quorum_proposal_abort_post",
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/impersonations/set-by-user": {
            "put": {
                "tags": [
                    "Impersonations"
                ],
                "summary": "Set Impersonation By User",
                "operationId": "set_impersonation_by_user_api_v1_impersonations_set_by_user_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetImpersonationByUserRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/impersonations/set-by-organization": {
            "put": {
                "tags": [
                    "Impersonations"
                ],
                "summary": "Set Impersonation By Organization",
                "operationId": "set_impersonation_by_organization_api_v1_impersonations_set_by_organization_put",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SetImpersonationByOrganizationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/impersonations": {
            "get": {
                "tags": [
                    "Impersonations"
                ],
                "summary": "Get Impersonation",
                "operationId": "get_impersonation_api_v1_impersonations_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetImpersonationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/logs": {
            "post": {
                "tags": [
                    "Logs"
                ],
                "summary": "Create Logs",
                "description": "Create logs.",
                "operationId": "create_logs_api_v1_logs_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLogsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/enclave-keys": {
            "get": {
                "tags": [
                    "Enclave Keys"
                ],
                "summary": "List Enclave Keys",
                "description": "Get the public keys of the enclave.",
                "operationId": "list_enclave_keys_api_v1_enclave_keys_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListEnclaveKeysResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/invites/{id}": {
            "get": {
                "tags": [
                    "Invites"
                ],
                "summary": "Get Api Signer Invite",
                "description": "Get an invite for the API Signer.",
                "operationId": "get_api_signer_invite_api_v1_invites__id__get",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid",
                            "description": "ID of the invite to retrieve.",
                            "title": "Id"
                        },
                        "description": "ID of the invite to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetApiSignerInviteResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResourceError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth-tokens": {
            "get": {
                "tags": [
                    "Auth Tokens"
                ],
                "summary": "Issue Auth Token For Client",
                "description": "Issue an auth token for a client.",
                "operationId": "issue_auth_token_for_client_api_v1_auth_tokens_get",
                "parameters": [
                    {
                        "name": "client_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "ID of the client.",
                            "title": "Client Id"
                        },
                        "description": "ID of the client."
                    },
                    {
                        "name": "client_secret",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Secret of the client.",
                            "title": "Client Secret"
                        },
                        "description": "Secret of the client."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueAuthTokenForClientResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Auth Tokens"
                ],
                "summary": "Issue Auth Token For Client Oauth Format",
                "description": "Issue an auth token for a client (oauth format).",
                "operationId": "issue_auth_token_for_client_oauth_format_api_v1_auth_tokens_post",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_issue_auth_token_for_client_oauth_format_api_v1_auth_tokens_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueAuthTokenForClientOauthResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth-tokens/internal": {
            "post": {
                "tags": [
                    "Auth Tokens"
                ],
                "summary": "Issue Internal Auth Token",
                "description": "Issue internal auth token.",
                "operationId": "issue_internal_auth_token_api_v1_auth_tokens_internal_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IssueInternalAuthTokenRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IssueInternalAuthTokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreconditionFailedError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "408": {
                        "description": "Request Timeout",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BaseError"
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Rate Limit Exceeded",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RateLimitError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AbortOnboardingErrorType": {
                "type": "string",
                "enum": [
                    "user_is_not_onboarding",
                    "user_type_cannot_abort_onboarding"
                ]
            },
            "AbortTransactionErrorType": {
                "type": "string",
                "enum": [
                    "invalid_transaction_state",
                    "non_managed_transaction",
                    "transactions_already_aborted",
                    "transaction_is_in_batch"
                ]
            },
            "AcknowledgeBannerRequest": {
                "properties": {
                    "banner_type": {
                        "$ref": "#/components/schemas/BannerType"
                    }
                },
                "type": "object",
                "required": [
                    "banner_type"
                ]
            },
            "ActionSigner": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "has_signed": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "user",
                    "modified_at",
                    "has_signed"
                ]
            },
            "ActionSigningRequest": {
                "properties": {
                    "signers": {
                        "items": {
                            "$ref": "#/components/schemas/ActionSigner"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "signers"
                ]
            },
            "ActionType": {
                "type": "string",
                "enum": [
                    "add_person_membership",
                    "add_api_signer",
                    "user_group_change",
                    "addressbook_contact_change",
                    "addressbook_group_change",
                    "transaction",
                    "transactions_policy",
                    "create_backup",
                    "backup_email_change",
                    "vault_group_change",
                    "admin_quorum_change",
                    "user_change",
                    "add_device"
                ]
            },
            "AddApiSignerAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "add_api_signer"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "api_signer_ref": {
                        "$ref": "#/components/schemas/ApiSignerRef"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted"
                        ]
                    },
                    "device_signing_request": {
                        "$ref": "#/components/schemas/ActionSigningRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "api_signer_ref",
                    "state",
                    "device_signing_request"
                ]
            },
            "AddDeviceAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "add_device"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/PersonRef"
                    },
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "signed",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "device_signing_request": {
                        "$ref": "#/components/schemas/ActionSigningRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "owner",
                    "device_id",
                    "state",
                    "device_signing_request"
                ]
            },
            "AddPersonMembershipAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "add_person_membership"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "person_ref": {
                        "$ref": "#/components/schemas/PersonRef"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "approved",
                            "completed",
                            "aborted"
                        ]
                    },
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "signing_request": {
                        "$ref": "#/components/schemas/ActionSigningRequest"
                    },
                    "pending_addition_to_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "person_ref",
                    "state",
                    "approval_request"
                ]
            },
            "AddVaultGroupChanges": {
                "properties": {
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "added_vaults": {
                        "items": {
                            "$ref": "#/components/schemas/VaultRef"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "add_group"
                        ],
                        "type": "string"
                    },
                    "new_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "change_request_id",
                    "added_vaults",
                    "type",
                    "new_name"
                ]
            },
            "AddressBookContact": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosAddressBookContact"
                    },
                    {
                        "$ref": "#/components/schemas/EVMAddressBookContact"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaAddressBookContact"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoAddressBookContact"
                    }
                ],
                "discriminator": {
                    "propertyName": "chain_type",
                    "mapping": {
                        "cosmos": "#/components/schemas/CosmosAddressBookContact",
                        "evm": "#/components/schemas/EVMAddressBookContact",
                        "solana": "#/components/schemas/SolanaAddressBookContact",
                        "utxo": "#/components/schemas/UtxoAddressBookContact"
                    }
                }
            },
            "AddressBookContactChangeReason": {
                "type": "string",
                "enum": [
                    "creation",
                    "modification"
                ]
            },
            "AddressBookContactChanges": {
                "properties": {
                    "is_being_edited": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "change_request_reason": {
                        "$ref": "#/components/schemas/AddressBookContactChangeReason"
                    }
                },
                "type": "object",
                "required": [
                    "is_being_edited",
                    "change_request_reason"
                ]
            },
            "AddressBookContactDetails": {
                "properties": {
                    "address": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CosmosAddressBookContactAddress"
                            },
                            {
                                "$ref": "#/components/schemas/EVMAddressBookContactAddress"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaAddressBookContactAddress"
                            },
                            {
                                "$ref": "#/components/schemas/UtxoAddressBookContactAddress"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "chain_type",
                            "mapping": {
                                "cosmos": "#/components/schemas/CosmosAddressBookContactAddress",
                                "evm": "#/components/schemas/EVMAddressBookContactAddress",
                                "solana": "#/components/schemas/SolanaAddressBookContactAddress",
                                "utxo": "#/components/schemas/UtxoAddressBookContactAddress"
                            }
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "name"
                ]
            },
            "AddressBookContactState": {
                "type": "string",
                "enum": [
                    "pending",
                    "active",
                    "deleted"
                ]
            },
            "AddressBookGroup": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "contacts": {
                        "items": {
                            "$ref": "#/components/schemas/AddressBookContact"
                        },
                        "type": "array"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "pending_changes": {
                        "$ref": "#/components/schemas/AddressBookGroupChanges"
                    },
                    "state": {
                        "$ref": "#/components/schemas/AddressBookGroupState"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "contacts",
                    "modified_by",
                    "state"
                ]
            },
            "AddressBookGroupChanges": {
                "properties": {
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "added_contacts": {
                        "items": {
                            "$ref": "#/components/schemas/AddressBookContact"
                        },
                        "type": "array"
                    },
                    "removed_contacts": {
                        "items": {
                            "$ref": "#/components/schemas/AddressBookContact"
                        },
                        "type": "array"
                    },
                    "new_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "added_contacts",
                    "removed_contacts",
                    "new_name"
                ]
            },
            "AddressBookGroupState": {
                "type": "string",
                "enum": [
                    "active",
                    "deleted"
                ]
            },
            "AddressBookGroupsSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "modified_at_asc",
                    "modified_at_desc",
                    "name_asc",
                    "name_desc"
                ]
            },
            "AddressGroupChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "addressbook_group_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "group_name": {
                        "type": "string"
                    },
                    "group_contacts": {
                        "items": {
                            "$ref": "#/components/schemas/AddressBookContact"
                        },
                        "type": "array"
                    },
                    "pending_changes": {
                        "$ref": "#/components/schemas/AddressBookGroupChanges"
                    },
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "group_id",
                    "group_name",
                    "group_contacts",
                    "pending_changes",
                    "change_request_id",
                    "state",
                    "approval_request"
                ]
            },
            "AddressLookupTableState": {
                "properties": {
                    "addresses": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedSolanaAddress"
                        },
                        "type": "array"
                    },
                    "authority": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "deactivation_slot": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "last_extended_slot": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "last_extended_slot_start_index": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "deactivation_slot",
                    "last_extended_slot",
                    "last_extended_slot_start_index"
                ]
            },
            "AdminQuorumChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "admin_quorum_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "old_quorum_size": {
                        "type": "integer"
                    },
                    "new_quorum_size": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "approval_request",
                    "state",
                    "old_quorum_size",
                    "new_quorum_size"
                ]
            },
            "AdminQuorumProposal": {
                "properties": {
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "created_by",
                    "quorum_size",
                    "modified_at"
                ]
            },
            "AllowanceDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "allowance"
                        ],
                        "type": "string"
                    },
                    "spender": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "spender"
                ]
            },
            "AllowanceEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Erc20AllowanceChange"
                    },
                    {
                        "$ref": "#/components/schemas/Erc721AllowanceChange"
                    },
                    {
                        "$ref": "#/components/schemas/Erc721AllowanceForAllChange"
                    },
                    {
                        "$ref": "#/components/schemas/Erc1155AllowanceForAllChange"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "erc1155_for_all": "#/components/schemas/Erc1155AllowanceForAllChange",
                        "erc20": "#/components/schemas/Erc20AllowanceChange",
                        "erc721": "#/components/schemas/Erc721AllowanceChange",
                        "erc721_for_all": "#/components/schemas/Erc721AllowanceForAllChange"
                    }
                }
            },
            "AminoMessage": {
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "value"
                ]
            },
            "AminoMessagesList": {
                "properties": {
                    "format": {
                        "enum": [
                            "amino"
                        ],
                        "type": "string"
                    },
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/AminoMessage"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "messages"
                ]
            },
            "AminoRequestData": {
                "properties": {
                    "format": {
                        "enum": [
                            "amino"
                        ],
                        "type": "string"
                    },
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/AminoMessage"
                        },
                        "type": "array"
                    },
                    "memo": {
                        "default": "",
                        "type": "string"
                    },
                    "std_fee": {
                        "$ref": "#/components/schemas/StdFeeRequest"
                    },
                    "timeout_height": {
                        "type": "integer",
                        "minimum": 0.0,
                        "default": 0
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "messages",
                    "std_fee"
                ]
            },
            "AminoSignDoc": {
                "properties": {
                    "format": {
                        "enum": [
                            "amino"
                        ],
                        "type": "string"
                    },
                    "sign_doc": {
                        "$ref": "#/components/schemas/StdSignDoc"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "sign_doc"
                ]
            },
            "AmountLimitCondition": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+(\\.\\d+)?$",
                        "example": "1000000000000000000"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/AmountLimitCurrencyCondition"
                    }
                },
                "type": "object",
                "required": [
                    "currency"
                ]
            },
            "AmountLimitCurrencyCondition": {
                "type": "string",
                "enum": [
                    "usd",
                    "token"
                ]
            },
            "ApiSigner": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "api_signer"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "onboarding",
                            "deleted"
                        ]
                    },
                    "last_keep_alive_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "name",
                    "state"
                ]
            },
            "ApiSignerExt": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "api_signer"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "onboarding",
                            "deleted"
                        ]
                    },
                    "last_keep_alive_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "name",
                    "state"
                ]
            },
            "ApiSignerRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_type": {
                        "enum": [
                            "api_signer"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "onboarding",
                            "deleted"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_type",
                    "name",
                    "state"
                ]
            },
            "ApiUser": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deleted"
                        ]
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_addition_to_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_removal_from_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "name",
                    "state",
                    "role"
                ]
            },
            "ApiUserExt": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deleted"
                        ]
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_addition_to_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_removal_from_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "public_key_hmac": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "is_saved_to_enclave": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "name",
                    "state",
                    "role",
                    "public_key",
                    "public_key_hmac",
                    "is_saved_to_enclave"
                ]
            },
            "ApiUserRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deleted"
                        ]
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_type",
                    "name",
                    "state",
                    "role"
                ]
            },
            "ApiUserResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deleted"
                        ]
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_addition_to_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_removal_from_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "access_token": {
                        "type": "string",
                        "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Im9FVmMtcWJKTjJYWUkzejNzOTg5aCJ9.eyJodHRwczovL2ZvcmRlZmkuY29tL29yZ19pZCI6Im9yZ19qS1FqUEhMUUM4NWlYTW5XIiwiaHR0cHM6Ly9mb3JkZWZpLmNvbS9lbWFpbCI6InJvbnlAYXJuYWMuaW8iLCJpc3MiOiJodHRwczovL2F1dGgtc3RhZ2luZy5zdGcuYXJuYWMuaW8vIiwic3ViIjoiZ29vZ2xlLW9hdXRoMnwxMTUzMDMzMDQxNDIzOTEwOTU2NzgiLCJhdWQiOlsiaHR0cHM6Ly9hcGktc3RhZ2luZy5zdGcuYXJuYWMuaW8vIiwiaHR0cHM6Ly9mb3JkZWZpLXN0YWdpbmcudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTY3MDMxNzU2MywiZXhwIjoxNjcwNDAzOTYzLCJhenAiOiJRckxtZGVTVm9KSW9BRUtRMWZ5SjRuNzkzUndtdHJzbiIsInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJwZXJtaXNzaW9ucyI6W119.D_5HsXSgSwdIEpH3Bw82SwLi4nClQclAUc5Tbsp7er7Q0dZi8_zl2LiwHp5UcmwOweNrCHnl4rfnMEp1NU92EFyynoKqTLqYAySS0dB4iVC60OJRM-HEeq0aezuZf5EakRa9yHbrejRR2BrlKttqVYWTjmp_d_8wfoHL_y9iIbUNv0E1NPNPIyzan30PLxU_sqWsbiMzr5RQsLyCUReoQZA2Wft2XQvxz2zHhAQut-u6v1Kwd9OSlpkLNghzCwHT85dAGl3sn5SeECxMShg12nT2LXgPeA8yog3jJsBANoAwWmCQr4ayFBOyQeVy7cQk0h_lI86uMlpa1r4mHHApXQ"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "name",
                    "state",
                    "role",
                    "access_token"
                ]
            },
            "ApprovalDecision": {
                "type": "string",
                "enum": [
                    "pending",
                    "approve",
                    "not_participated"
                ]
            },
            "ApprovalGroup": {
                "properties": {
                    "threshold": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "user_refs": {
                        "items": {
                            "$ref": "#/components/schemas/UserRef"
                        },
                        "type": "array"
                    },
                    "user_group_refs": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "threshold",
                    "user_refs",
                    "user_group_refs"
                ]
            },
            "ApprovalGroupRequest": {
                "properties": {
                    "threshold": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "user_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "user_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "threshold",
                    "user_ids",
                    "user_group_ids"
                ]
            },
            "ApprovalRequest": {
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/ApprovalRequestState"
                    },
                    "quorum_size": {
                        "type": "integer"
                    },
                    "approvers": {
                        "items": {
                            "$ref": "#/components/schemas/RequestApprover"
                        },
                        "type": "array"
                    },
                    "approval_groups": {
                        "items": {
                            "$ref": "#/components/schemas/ApprovalRequestGroup"
                        },
                        "type": "array"
                    },
                    "error_message": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "state",
                    "quorum_size",
                    "approvers"
                ]
            },
            "ApprovalRequestGroup": {
                "properties": {
                    "quorum_size": {
                        "type": "integer"
                    },
                    "approvers": {
                        "items": {
                            "$ref": "#/components/schemas/RequestApprover"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "quorum_size",
                    "approvers"
                ]
            },
            "ApprovalRequestState": {
                "type": "string",
                "enum": [
                    "created",
                    "approved",
                    "insufficient_approvers",
                    "auto_approved",
                    "failed"
                ]
            },
            "ApprovalState": {
                "type": "string",
                "enum": [
                    "pending",
                    "approved",
                    "unauthorized",
                    "not_participated"
                ]
            },
            "ApproveTransactionErrorType": {
                "type": "string",
                "enum": [
                    "invalid_transaction_state",
                    "non_managed_transaction"
                ]
            },
            "Asset": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosAsset"
                    },
                    {
                        "$ref": "#/components/schemas/EvmAsset"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaAsset"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoAsset"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_asset": "#/components/schemas/CosmosAsset",
                        "evm_asset": "#/components/schemas/EvmAsset",
                        "solana_asset": "#/components/schemas/SolanaAsset",
                        "utxo_asset": "#/components/schemas/UtxoAsset"
                    }
                }
            },
            "AssetIdentifierRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosAssetIdentifierRequest"
                    },
                    {
                        "$ref": "#/components/schemas/EvmAssetIdentifierRequest"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaAssetIdentifierRequest"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoAssetIdentifierRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos": "#/components/schemas/CosmosAssetIdentifierRequest",
                        "evm": "#/components/schemas/EvmAssetIdentifierRequest",
                        "solana": "#/components/schemas/SolanaAssetIdentifierRequest",
                        "utxo": "#/components/schemas/UtxoAssetIdentifierRequest"
                    }
                }
            },
            "Attestation": {
                "properties": {
                    "attestation": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "certificate": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "attestation",
                    "certificate"
                ]
            },
            "AttestedSigningKey": {
                "properties": {
                    "public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "attestation": {
                        "$ref": "#/components/schemas/Attestation"
                    }
                },
                "type": "object",
                "required": [
                    "public_key",
                    "attestation"
                ]
            },
            "AuthToken": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "expired_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "end_user"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_id",
                    "expired_at",
                    "user_type"
                ]
            },
            "BackupEmailChageState": {
                "properties": {
                    "new_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "initiated_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "request_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "new_email",
                    "initiated_by",
                    "created_at",
                    "modified_at",
                    "request_id"
                ]
            },
            "BackupEmailChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "backup_email_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "current_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "new_email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "state",
                    "request_id",
                    "current_email",
                    "new_email"
                ]
            },
            "BackupPublicKey": {
                "properties": {
                    "file_name": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "file_name",
                    "key"
                ]
            },
            "BackupPublicKeyByDevice": {
                "properties": {
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "device_id",
                    "public_key"
                ]
            },
            "BackupState": {
                "type": "string",
                "enum": [
                    "no_backup",
                    "pending_signature",
                    "pending_approval",
                    "ready"
                ]
            },
            "BackupType": {
                "type": "string",
                "enum": [
                    "public_key",
                    "key_share"
                ]
            },
            "Balances": {
                "properties": {
                    "mined": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "pending_incoming": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "mined",
                    "pending_incoming"
                ]
            },
            "BannerType": {
                "type": "string",
                "enum": [
                    "welcome_message"
                ]
            },
            "BaseError": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "BatchData": {
                "properties": {
                    "batch_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "index_in_batch": {
                        "type": "integer"
                    },
                    "batch_size": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "batch_id",
                    "index_in_batch",
                    "batch_size"
                ]
            },
            "BinaryHashPayload": {
                "properties": {
                    "format": {
                        "enum": [
                            "hash_binary"
                        ],
                        "type": "string"
                    },
                    "hash_binary": {
                        "type": "string",
                        "minLength": 1,
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "hash_binary"
                ]
            },
            "BitcoinVaultCreateAddressType": {
                "type": "string",
                "enum": [
                    "legacy",
                    "segwit"
                ]
            },
            "BlackBoxSignature": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "type": {
                        "enum": [
                            "black_box_signature"
                        ],
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/BlackBoxSignatureState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/BlackBoxSignatureStateChange"
                        },
                        "type": "array"
                    },
                    "payload": {
                        "type": "string",
                        "minLength": 1,
                        "example": "SGVsbG8="
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BlackBoxSignatureEcdsaStarkDetails"
                            },
                            {
                                "$ref": "#/components/schemas/BlackBoxSignatureEcdsaSecp256k1Details"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "ecdsa_secp256k1": "#/components/schemas/BlackBoxSignatureEcdsaSecp256k1Details",
                                "ecdsa_stark": "#/components/schemas/BlackBoxSignatureEcdsaStarkDetails"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "managed_transaction_data",
                    "signatures",
                    "direction",
                    "type",
                    "state",
                    "state_changes",
                    "payload",
                    "vault",
                    "details"
                ]
            },
            "BlackBoxSignatureEcdsaSecp256k1Details": {
                "properties": {
                    "signature": {
                        "$ref": "#/components/schemas/EcdsaSignature"
                    },
                    "hash_binary": {
                        "type": "string",
                        "minLength": 1,
                        "example": "SGVsbG8="
                    },
                    "hash_integer": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    },
                    "type": {
                        "enum": [
                            "ecdsa_secp256k1"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hash_binary",
                    "hash_integer",
                    "type"
                ]
            },
            "BlackBoxSignatureEcdsaStarkDetails": {
                "properties": {
                    "signature": {
                        "$ref": "#/components/schemas/EcdsaSignature"
                    },
                    "hash_binary": {
                        "type": "string",
                        "minLength": 1,
                        "example": "SGVsbG8="
                    },
                    "hash_integer": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    },
                    "type": {
                        "enum": [
                            "ecdsa_stark"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hash_binary",
                    "hash_integer",
                    "type"
                ]
            },
            "BlackBoxSignatureState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "completed",
                    "error_signing",
                    "aborted"
                ]
            },
            "BlackBoxSignatureStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/BlackBoxSignatureState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/BlackBoxSignatureState"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "new_state"
                ]
            },
            "BlackBoxVault": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "derivation_path": {
                        "type": "string",
                        "deprecated": true,
                        "example": "m/44/60/0/0/0"
                    },
                    "public_key_compressed": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "derivation_info": {
                        "$ref": "#/components/schemas/VaultDerivationInfo"
                    },
                    "keyset": {
                        "$ref": "#/components/schemas/KeysetRef"
                    },
                    "key_holder": {
                        "$ref": "#/components/schemas/EndUserRef"
                    },
                    "vault_group": {
                        "$ref": "#/components/schemas/VaultGroupRef"
                    },
                    "pending_vault_group_action": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionAdd"
                            },
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "add": "#/components/schemas/PendingVaultGroupActionAdd",
                                "remove": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultState"
                    },
                    "type": {
                        "enum": [
                            "black_box"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EcdsaStarkBlackBoxVault"
                            },
                            {
                                "$ref": "#/components/schemas/EcdsaSecp256k1BlackBoxVault"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "ecdsa_secp256k1": "#/components/schemas/EcdsaSecp256k1BlackBoxVault",
                                "ecdsa_stark": "#/components/schemas/EcdsaStarkBlackBoxVault"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "created_by",
                    "derivation_path",
                    "public_key_compressed",
                    "derivation_info",
                    "keyset",
                    "vault_group",
                    "state",
                    "type",
                    "details"
                ]
            },
            "BlockchainExplorer": {
                "properties": {
                    "transaction_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "example": "https://etherscan.io/tx/"
                    },
                    "address_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "example": "https://etherscan.io/address/"
                    },
                    "root_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "example": "https://etherscan.io/"
                    },
                    "transaction_format_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "example": "https://etherscan.io/tx/%s"
                    },
                    "address_format_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri",
                        "example": "https://etherscan.io/address/%s"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_url",
                    "address_url",
                    "root_url",
                    "transaction_format_url",
                    "address_format_url"
                ]
            },
            "Body_issue_auth_token_for_client_oauth_format_api_v1_auth_tokens_post": {
                "properties": {
                    "client_id": {
                        "type": "string"
                    },
                    "client_secret": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "client_id",
                    "client_secret"
                ]
            },
            "BridgeDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "cross_chain_bridge"
                        ],
                        "type": "string"
                    },
                    "bridge_effect": {
                        "$ref": "#/components/schemas/EvmBridgeEffect"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "bridge_effect"
                ]
            },
            "BulkCreateSolanaTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "details": {
                        "$ref": "#/components/schemas/BulkCreateTransactionRequestDetails"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "BulkCreateTransactionInstanceDetails": {
                "properties": {
                    "version": {
                        "$ref": "#/components/schemas/SolanaMessageVersion"
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaCompiledInstruction"
                        },
                        "type": "array"
                    },
                    "accounts": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionAccountRequest"
                        },
                        "type": "array"
                    },
                    "address_table_lookups": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaMessageAddressTableLookupRequest"
                        },
                        "type": "array"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionSignaturesRequest"
                        },
                        "type": "array"
                    },
                    "recent_blockhash": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"
                    }
                },
                "type": "object",
                "required": [
                    "version",
                    "instructions",
                    "accounts",
                    "address_table_lookups"
                ]
            },
            "BulkCreateTransactionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BulkCreateSolanaTransactionRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "solana_transaction": "#/components/schemas/BulkCreateSolanaTransactionRequest"
                    }
                }
            },
            "BulkCreateTransactionRequestDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "skip_prediction": {
                        "type": "boolean",
                        "default": false
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    },
                    "transactions": {
                        "items": {
                            "$ref": "#/components/schemas/BulkCreateTransactionInstanceDetails"
                        },
                        "type": "array",
                        "minItems": 1
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "transactions"
                ]
            },
            "BulkCreateTransactionResponse": {
                "properties": {
                    "transactions": {
                        "items": {
                            "$ref": "#/components/schemas/CreateTransactionResponse"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "transactions"
                ]
            },
            "BulkDescribeSolanaTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BulkTransactionDetailsSolanaTransactionRequestDetails"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "solana_raw_transaction": "#/components/schemas/BulkTransactionDetailsSolanaTransactionRequestDetails"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "BulkDescribeTransactionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BulkDescribeSolanaTransactionRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "solana_transaction": "#/components/schemas/BulkDescribeSolanaTransactionRequest"
                    }
                }
            },
            "BulkDescribeTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DescribedCosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedEvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedEvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedSolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedSolanaTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_transaction": "#/components/schemas/DescribedCosmosTransaction",
                        "evm_message": "#/components/schemas/DescribedEvmMessage",
                        "evm_transaction": "#/components/schemas/DescribedEvmTransaction",
                        "solana_message": "#/components/schemas/DescribedSolanaMessage",
                        "solana_transaction": "#/components/schemas/DescribedSolanaTransaction"
                    }
                }
            },
            "BulkPredictSolanaTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BulkTransactionDetailsSolanaTransactionRequestDetails"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "solana_raw_transaction": "#/components/schemas/BulkTransactionDetailsSolanaTransactionRequestDetails"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "BulkPredictTransactionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BulkPredictSolanaTransactionRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "solana_transaction": "#/components/schemas/BulkPredictSolanaTransactionRequest"
                    }
                }
            },
            "BulkPredictTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PredictedCosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedEvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedEvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedSolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedSolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedUtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_transaction": "#/components/schemas/PredictedCosmosTransaction",
                        "evm_message": "#/components/schemas/PredictedEvmMessage",
                        "evm_transaction": "#/components/schemas/PredictedEvmTransaction",
                        "solana_message": "#/components/schemas/PredictedSolanaMessage",
                        "solana_transaction": "#/components/schemas/PredictedSolanaTransaction",
                        "utxo_transaction": "#/components/schemas/PredictedUtxoTransaction"
                    }
                }
            },
            "BulkTransactionDetailsSolanaTransactionInstanceDetails": {
                "properties": {
                    "version": {
                        "$ref": "#/components/schemas/SolanaMessageVersion"
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaCompiledInstruction"
                        },
                        "type": "array"
                    },
                    "accounts": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionAccountRequest"
                        },
                        "type": "array"
                    },
                    "address_table_lookups": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaMessageAddressTableLookupRequest"
                        },
                        "type": "array"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionSignaturesRequest"
                        },
                        "type": "array"
                    },
                    "recent_blockhash": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"
                    }
                },
                "type": "object",
                "required": [
                    "version",
                    "instructions",
                    "accounts",
                    "address_table_lookups"
                ]
            },
            "BulkTransactionDetailsSolanaTransactionRequestDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "skip_simulation": {
                        "type": "boolean",
                        "default": false
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    },
                    "transactions": {
                        "items": {
                            "$ref": "#/components/schemas/BulkTransactionDetailsSolanaTransactionInstanceDetails"
                        },
                        "type": "array",
                        "minItems": 1
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "transactions"
                ]
            },
            "ChainType": {
                "type": "string",
                "enum": [
                    "cosmos",
                    "evm",
                    "solana",
                    "utxo"
                ]
            },
            "ChainUniqueId": {
                "type": "string",
                "enum": [
                    "cosmos_akashnet-2",
                    "cosmos_archway-1",
                    "cosmos_axelar-dojo-1",
                    "cosmos_celestia",
                    "cosmos_cosmoshub-4",
                    "cosmos_dydx-mainnet-1",
                    "cosmos_dydx-testnet-4",
                    "cosmos_dymension_1100-1",
                    "cosmos_noble-1",
                    "cosmos_osmosis-1",
                    "cosmos_pacific-1",
                    "cosmos_stride-1",
                    "evm_1",
                    "evm_5",
                    "evm_10",
                    "evm_56",
                    "evm_100",
                    "evm_137",
                    "evm_250",
                    "evm_324",
                    "evm_1030",
                    "evm_1100",
                    "evm_1101",
                    "evm_2222",
                    "evm_5000",
                    "evm_7700",
                    "evm_8453",
                    "evm_80001",
                    "evm_42161",
                    "evm_43114",
                    "evm_59144",
                    "evm_11155111",
                    "evm_ethereum_mainnet",
                    "evm_ethereum_goerli",
                    "evm_optimism_mainnet",
                    "evm_bsc_mainnet",
                    "evm_gnosis_mainnet",
                    "evm_polygon_mainnet",
                    "evm_fantom_mainnet",
                    "evm_arbitrum_mainnet",
                    "evm_avalanche_chain",
                    "evm_kava_mainnet",
                    "evm_polygon_mumbai",
                    "evm_ethereum_sepolia",
                    "evm_polygon_zkevm_mainnet",
                    "evm_zksync_era_mainnet",
                    "evm_base_mainnet",
                    "evm_linea_mainnet",
                    "evm_canto_mainnet",
                    "evm_conflux_mainnet",
                    "evm_mantle_mainnet",
                    "evm_dymension_mainnet",
                    "solana_mainnet",
                    "solana_devnet",
                    "bitcoin_mainnet",
                    "bitcoin_testnet"
                ]
            },
            "CompleteDeviceOnboardingRequest": {
                "properties": {
                    "pub_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_pin_message": {
                        "$ref": "#/components/schemas/EncryptionData"
                    },
                    "device_info": {
                        "$ref": "#/components/schemas/DeviceSystemInfo"
                    }
                },
                "type": "object",
                "required": [
                    "pub_key",
                    "encrypted_pin_message",
                    "device_info"
                ]
            },
            "CompleteDeviceOnboardingResponse": {
                "properties": {
                    "user_info": {
                        "$ref": "#/components/schemas/UserWithOrganization"
                    }
                },
                "type": "object",
                "required": [
                    "user_info"
                ]
            },
            "CompleteOnboardingApiSignerRequest": {
                "properties": {
                    "public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_pin_message": {
                        "$ref": "#/components/schemas/EncryptionData"
                    }
                },
                "type": "object",
                "required": [
                    "public_key",
                    "encrypted_pin_message"
                ]
            },
            "CompleteOrganizationOnboardingRequest": {
                "properties": {
                    "admin_public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "device_info": {
                        "$ref": "#/components/schemas/DeviceSystemInfo"
                    }
                },
                "type": "object",
                "required": [
                    "admin_public_key",
                    "device_info"
                ]
            },
            "CompleteOrganizationOnboardingResponse": {
                "properties": {
                    "user_info": {
                        "$ref": "#/components/schemas/UserWithOrganization"
                    },
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "timestamped_signature": {
                        "$ref": "#/components/schemas/TimestampedSignature"
                    }
                },
                "type": "object",
                "required": [
                    "user_info",
                    "device_id",
                    "timestamped_signature"
                ]
            },
            "ConfigMultiFactorAuthenticationRequest": {
                "properties": {
                    "is_required": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "is_required"
                ]
            },
            "ConnectWalletErrorType": {
                "type": "string",
                "enum": [
                    "malicious_wallet_url"
                ]
            },
            "ContactChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "addressbook_contact_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "contact_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "contact_info": {
                        "$ref": "#/components/schemas/AddressBookContactDetails"
                    },
                    "previous_contact_info": {
                        "$ref": "#/components/schemas/AddressBookContactDetails"
                    },
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "signed",
                            "completed",
                            "aborted"
                        ]
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "device_signing_request": {
                        "$ref": "#/components/schemas/ActionSigningRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "contact_id",
                    "contact_info",
                    "change_request_id",
                    "state",
                    "approval_request",
                    "device_signing_request"
                ]
            },
            "ContactRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "address_ref": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CosmosAddressBookContactAddressRef"
                            },
                            {
                                "$ref": "#/components/schemas/EVMAddressBookContactAddressRef"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaAddressBookContactAddressRef"
                            },
                            {
                                "$ref": "#/components/schemas/UtxoAddressBookContactAddressRef"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "chain_type",
                            "mapping": {
                                "cosmos": "#/components/schemas/CosmosAddressBookContactAddressRef",
                                "evm": "#/components/schemas/EVMAddressBookContactAddressRef",
                                "solana": "#/components/schemas/SolanaAddressBookContactAddressRef",
                                "utxo": "#/components/schemas/UtxoAddressBookContactAddressRef"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "address_ref"
                ]
            },
            "ContactSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "modified_at_asc",
                    "modified_at_desc",
                    "name_asc",
                    "name_desc"
                ]
            },
            "ContractCallDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "contract_call"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "CosmosAccountRepr": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "bech32_repr": {
                        "type": "string",
                        "example": "cosmos1tdk0g5d4ry9lq0erejttyufqcvwpqdj6tdql38"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "bech32_repr"
                ]
            },
            "CosmosAddressBookContact": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "$ref": "#/components/schemas/AddressBookContactState"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupRef"
                        },
                        "type": "array"
                    },
                    "pending_changes": {
                        "$ref": "#/components/schemas/AddressBookContactChanges"
                    },
                    "chain_type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "modified_by",
                    "state",
                    "groups",
                    "chain_type",
                    "address",
                    "chain"
                ]
            },
            "CosmosAddressBookContactAddress": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chain"
                ]
            },
            "CosmosAddressBookContactAddressRef": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "example": "cosmos1tdk0g5d4ry9lq0erejttyufqcvwpqdj6tdql38"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chain"
                ]
            },
            "CosmosAsset": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "decimals": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "verified": {
                        "type": "boolean"
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EnrichedAssetIdentifier"
                    },
                    "metadata_uri": {
                        "type": "string"
                    },
                    "type": {
                        "deprecated": true,
                        "enum": [
                            "cosmos_asset"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/CosmosNativeAsset"
                            },
                            {
                                "$ref": "#/components/schemas/CosmosTokenAsset"
                            }
                        ],
                        "deprecated": true
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "decimals",
                    "name",
                    "symbol",
                    "hidden",
                    "verified",
                    "asset_identifier",
                    "type",
                    "details"
                ]
            },
            "CosmosAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CosmosNativeAssetIdentifierRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CosmosTokenAssetIdentifierRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native": "#/components/schemas/CosmosNativeAssetIdentifierRequest",
                                "token": "#/components/schemas/CosmosTokenAssetIdentifierRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "CosmosBalanceChangeEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosNativeBalanceChange"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTokenBalanceChange"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "native": "#/components/schemas/CosmosNativeBalanceChange",
                        "token": "#/components/schemas/CosmosTokenBalanceChange"
                    }
                }
            },
            "CosmosBech32Prefix": {
                "type": "string",
                "enum": [
                    "akash",
                    "archway",
                    "axelar",
                    "celestia",
                    "cosmos",
                    "dydx",
                    "dym",
                    "inj",
                    "noble",
                    "osmo",
                    "sei",
                    "stride"
                ]
            },
            "CosmosBechAddress": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    },
                    "address": {
                        "type": "string",
                        "example": "cosmos1tdk0g5d4ry9lq0erejttyufqcvwpqdj6tdql38"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "address"
                ]
            },
            "CosmosBechAddressEnrichedChain": {
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "chain": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    },
                    "enriched_chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "enriched_chain"
                ]
            },
            "CosmosChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "unique_id"
                ]
            },
            "CosmosChainUniqueId": {
                "type": "string",
                "enum": [
                    "cosmos_akashnet-2",
                    "cosmos_archway-1",
                    "cosmos_axelar-dojo-1",
                    "cosmos_celestia",
                    "cosmos_cosmoshub-4",
                    "cosmos_dydx-mainnet-1",
                    "cosmos_dydx-testnet-4",
                    "cosmos_dymension_1100-1",
                    "cosmos_noble-1",
                    "cosmos_osmosis-1",
                    "cosmos_pacific-1",
                    "cosmos_stride-1"
                ]
            },
            "CosmosCoinWithAmount": {
                "properties": {
                    "coin_with_amount": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CosmosNativeCoinWithAmount"
                            },
                            {
                                "$ref": "#/components/schemas/CosmosTokenWithAmount"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native": "#/components/schemas/CosmosNativeCoinWithAmount",
                                "token": "#/components/schemas/CosmosTokenWithAmount"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "coin_with_amount"
                ]
            },
            "CosmosEffects": {
                "properties": {
                    "balance_changes": {
                        "items": {
                            "$ref": "#/components/schemas/CosmosBalanceChangeEffect"
                        },
                        "type": "array"
                    },
                    "transfers": {
                        "items": {
                            "$ref": "#/components/schemas/CosmosTransferEffect"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "balance_changes",
                    "transfers"
                ]
            },
            "CosmosGasDebit": {
                "properties": {
                    "gas_used": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "total_fee": {
                        "items": {
                            "$ref": "#/components/schemas/CosmosCoinWithAmount"
                        },
                        "type": "array"
                    },
                    "fiat_prices": {
                        "items": {
                            "$ref": "#/components/schemas/Price"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "gas_used",
                    "total_fee",
                    "fiat_prices"
                ]
            },
            "CosmosMultipleMessagesTransactionDetails": {
                "properties": {
                    "transaction_data": {
                        "$ref": "#/components/schemas/MessagesList"
                    },
                    "type": {
                        "enum": [
                            "messages"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_data",
                    "type"
                ]
            },
            "CosmosNativeAsset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "type": {
                        "enum": [
                            "cosmos_native_asset"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "CosmosNativeAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain"
                ]
            },
            "CosmosNativeBalanceChange": {
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "coin_info": {
                        "$ref": "#/components/schemas/CosmosNativeCoinInfo"
                    }
                },
                "type": "object",
                "required": [
                    "owner",
                    "diff",
                    "type",
                    "coin_info"
                ]
            },
            "CosmosNativeCoin": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "display": {
                        "default": "",
                        "deprecated": true,
                        "type": "string"
                    },
                    "description": {
                        "default": "",
                        "deprecated": true,
                        "type": "string"
                    },
                    "base_denom": {
                        "type": "string"
                    },
                    "denom": {
                        "type": "string"
                    },
                    "decimals": {
                        "type": "integer"
                    },
                    "logo_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "symbol",
                    "base_denom",
                    "denom",
                    "decimals",
                    "type"
                ]
            },
            "CosmosNativeCoinInfo": {
                "properties": {
                    "is_verified": {
                        "type": "boolean"
                    },
                    "coin": {
                        "$ref": "#/components/schemas/CosmosNativeCoin"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified",
                    "coin"
                ]
            },
            "CosmosNativeCoinWithAmount": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "coin": {
                        "$ref": "#/components/schemas/CosmosNativeCoin"
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "type",
                    "coin"
                ]
            },
            "CosmosNativeTransfer": {
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "coin_info": {
                        "$ref": "#/components/schemas/CosmosNativeCoinInfo"
                    }
                },
                "type": "object",
                "required": [
                    "from",
                    "to",
                    "amount",
                    "type",
                    "coin_info"
                ]
            },
            "CosmosNativeTransferDetails": {
                "properties": {
                    "transaction_data": {
                        "$ref": "#/components/schemas/MessagesList"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "is_internal": {
                        "type": "boolean"
                    },
                    "type": {
                        "enum": [
                            "native_transfer"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_data",
                    "direction",
                    "sender",
                    "recipient",
                    "type"
                ]
            },
            "CosmosPushData": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "transaction_body": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "CosmosSuggestedFees": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "chain_unique_id": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    },
                    "fee_per_signature": {
                        "type": "number"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain_unique_id"
                ]
            },
            "CosmosToken": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "display": {
                        "default": "",
                        "deprecated": true,
                        "type": "string"
                    },
                    "description": {
                        "default": "",
                        "deprecated": true,
                        "type": "string"
                    },
                    "base_denom": {
                        "type": "string"
                    },
                    "denom": {
                        "type": "string"
                    },
                    "decimals": {
                        "type": "integer"
                    },
                    "logo_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "type": {
                        "enum": [
                            "token"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "symbol",
                    "base_denom",
                    "denom",
                    "decimals",
                    "type"
                ]
            },
            "CosmosTokenAsset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "type": {
                        "enum": [
                            "cosmos_token_asset"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "CosmosTokenAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "token"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    },
                    "denom": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "denom"
                ]
            },
            "CosmosTokenBalanceChange": {
                "properties": {
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "type": {
                        "enum": [
                            "token"
                        ],
                        "type": "string"
                    },
                    "coin_info": {
                        "$ref": "#/components/schemas/CosmosTokenInfo"
                    }
                },
                "type": "object",
                "required": [
                    "owner",
                    "diff",
                    "type",
                    "coin_info"
                ]
            },
            "CosmosTokenInfo": {
                "properties": {
                    "is_verified": {
                        "type": "boolean"
                    },
                    "coin": {
                        "$ref": "#/components/schemas/CosmosToken"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified",
                    "coin"
                ]
            },
            "CosmosTokenTransfer": {
                "properties": {
                    "from": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "type": {
                        "enum": [
                            "token"
                        ],
                        "type": "string"
                    },
                    "coin_info": {
                        "$ref": "#/components/schemas/CosmosTokenInfo"
                    }
                },
                "type": "object",
                "required": [
                    "from",
                    "to",
                    "amount",
                    "type",
                    "coin_info"
                ]
            },
            "CosmosTokenTransferDetails": {
                "properties": {
                    "transaction_data": {
                        "$ref": "#/components/schemas/MessagesList"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "is_internal": {
                        "type": "boolean"
                    },
                    "type": {
                        "enum": [
                            "token_transfer"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_data",
                    "direction",
                    "sender",
                    "recipient",
                    "type"
                ]
            },
            "CosmosTokenWithAmount": {
                "properties": {
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "type": {
                        "enum": [
                            "token"
                        ],
                        "type": "string"
                    },
                    "coin": {
                        "$ref": "#/components/schemas/CosmosToken"
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "type",
                    "coin"
                ]
            },
            "CosmosTransaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "cosmos_transaction_type_details": {
                        "$ref": "#/components/schemas/CosmosTransactionTypeDetails"
                    },
                    "memo": {
                        "type": "string",
                        "default": ""
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "from": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 64,
                        "minLength": 64,
                        "pattern": "^[a-fA-F0-9]+$",
                        "example": "12BE33E7F1B6CA644CC006FB8CBD0C4C7C95B1072DA90E9F4C39CB837072BBF5"
                    },
                    "explorer_url": {
                        "example": "https://www.mintscan.io/cosmos/txs/65A22C9050C8A29DE15CD8D0D08C847766B734403008C428C3148A23137ED3EF",
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "state": {
                        "$ref": "#/components/schemas/CosmosTransactionState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/CosmosTransactionStateChange"
                        },
                        "type": "array"
                    },
                    "signers_info": {
                        "items": {
                            "$ref": "#/components/schemas/SignerInfo"
                        },
                        "type": "array"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/CosmosTransactionResult"
                    },
                    "mined_result": {
                        "$ref": "#/components/schemas/CosmosTransactionResult"
                    },
                    "sign_doc": {
                        "$ref": "#/components/schemas/SignDoc"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "direction",
                    "cosmos_transaction_type_details",
                    "chain",
                    "from",
                    "sender",
                    "type",
                    "state",
                    "state_changes",
                    "signers_info"
                ]
            },
            "CosmosTransactionResult": {
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "gas_debit": {
                        "$ref": "#/components/schemas/CosmosGasDebit"
                    },
                    "effects": {
                        "$ref": "#/components/schemas/CosmosEffects"
                    }
                },
                "type": "object",
                "required": [
                    "gas_debit",
                    "effects"
                ]
            },
            "CosmosTransactionState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "pushed_to_blockchain",
                    "mined",
                    "completed",
                    "aborted",
                    "error_pushing_to_blockchain",
                    "mined_reverted",
                    "completed_reverted",
                    "stuck"
                ]
            },
            "CosmosTransactionStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/CosmosTransactionState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/CosmosTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "new_state"
                ]
            },
            "CosmosTransactionType": {
                "type": "string",
                "enum": [
                    "messages",
                    "native_transfer",
                    "token_transfer"
                ]
            },
            "CosmosTransactionTypeDetails": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosMultipleMessagesTransactionDetails"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosNativeTransferDetails"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTokenTransferDetails"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "messages": "#/components/schemas/CosmosMultipleMessagesTransactionDetails",
                        "native_transfer": "#/components/schemas/CosmosNativeTransferDetails",
                        "token_transfer": "#/components/schemas/CosmosTokenTransferDetails"
                    }
                }
            },
            "CosmosTransferEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosNativeTransfer"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTokenTransfer"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "native": "#/components/schemas/CosmosNativeTransfer",
                        "token": "#/components/schemas/CosmosTokenTransfer"
                    }
                }
            },
            "CosmosTransferToAddressRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "address"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CosmosBechAddress"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "address"
                ]
            },
            "CosmosTransferToVaultIdRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "vault_id"
                        ],
                        "type": "string"
                    },
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault_id"
                ]
            },
            "CosmosVault": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "derivation_path": {
                        "type": "string",
                        "deprecated": true,
                        "example": "m/44/60/0/0/0"
                    },
                    "public_key_compressed": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "derivation_info": {
                        "$ref": "#/components/schemas/VaultDerivationInfo"
                    },
                    "keyset": {
                        "$ref": "#/components/schemas/KeysetRef"
                    },
                    "key_holder": {
                        "$ref": "#/components/schemas/EndUserRef"
                    },
                    "vault_group": {
                        "$ref": "#/components/schemas/VaultGroupRef"
                    },
                    "pending_vault_group_action": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionAdd"
                            },
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "add": "#/components/schemas/PendingVaultGroupActionAdd",
                                "remove": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultState"
                    },
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "main_address": {
                        "type": "string",
                        "maxLength": 40,
                        "minLength": 40,
                        "pattern": "^[a-fA-F0-9]+$",
                        "example": "DBCE78FD2D006A3BAC2C548D93271ABA3D63F01E"
                    },
                    "chains_addresses": {
                        "items": {
                            "$ref": "#/components/schemas/CosmosBechAddressEnrichedChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "created_by",
                    "derivation_path",
                    "public_key_compressed",
                    "derivation_info",
                    "keyset",
                    "vault_group",
                    "state",
                    "type",
                    "main_address",
                    "chains_addresses"
                ]
            },
            "CountUsersResponse": {
                "properties": {
                    "count": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "count"
                ]
            },
            "CreateApiSignerUserRequest": {
                "properties": {
                    "user_type": {
                        "enum": [
                            "api_signer"
                        ],
                        "type": "string"
                    },
                    "user_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "user_type",
                    "user_name"
                ]
            },
            "CreateApiUserRequest": {
                "properties": {
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "user_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "user_type",
                    "user_name"
                ]
            },
            "CreateBackupAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "create_backup"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "signed",
                            "completed",
                            "aborted"
                        ]
                    },
                    "request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "backup_type": {
                        "$ref": "#/components/schemas/BackupType"
                    },
                    "public_key": {
                        "$ref": "#/components/schemas/BackupPublicKey"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "signing_request": {
                        "$ref": "#/components/schemas/ActionSigningRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "state",
                    "request_id",
                    "email",
                    "backup_type",
                    "signing_request"
                ]
            },
            "CreateBackupEmailChangeRequest": {
                "properties": {
                    "backup_email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "type": "object",
                "required": [
                    "backup_email"
                ]
            },
            "CreateBlackBoxSignatureRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "black_box_signature"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BinaryHashPayload"
                            },
                            {
                                "$ref": "#/components/schemas/IntegerHashPayload"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "format",
                            "mapping": {
                                "hash_binary": "#/components/schemas/BinaryHashPayload",
                                "hash_integer": "#/components/schemas/IntegerHashPayload"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateBlackBoxSignatureWithWaitRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "black_box_signature"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/BinaryHashPayload"
                            },
                            {
                                "$ref": "#/components/schemas/IntegerHashPayload"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "format",
                            "mapping": {
                                "hash_binary": "#/components/schemas/BinaryHashPayload",
                                "hash_integer": "#/components/schemas/IntegerHashPayload"
                            }
                        }
                    },
                    "wait_for_state": {
                        "$ref": "#/components/schemas/BlackBoxSignatureState"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details",
                    "wait_for_state"
                ]
            },
            "CreateBlackBoxVaultRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "black_box"
                        ],
                        "type": "string"
                    },
                    "key_type": {
                        "type": "string",
                        "enum": [
                            "ecdsa_stark",
                            "ecdsa_secp256k1"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "key_type"
                ]
            },
            "CreateContactRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreateCosmosContactRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateEVMContactRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateSolanaContactRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateUtxoContactRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos": "#/components/schemas/CreateCosmosContactRequest",
                        "evm": "#/components/schemas/CreateEVMContactRequest",
                        "solana": "#/components/schemas/CreateSolanaContactRequest",
                        "utxo": "#/components/schemas/CreateUtxoContactRequest"
                    }
                }
            },
            "CreateCosmosContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "address",
                    "chain"
                ]
            },
            "CreateCosmosTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TypedCosmosRawTransactionRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TypedCosmosTransferRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "cosmos_raw_transaction": "#/components/schemas/TypedCosmosRawTransactionRequest",
                                "cosmos_transfer": "#/components/schemas/TypedCosmosTransferRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateCosmosTransactionWithWaitRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TypedCosmosRawTransactionRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TypedCosmosTransferRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "cosmos_raw_transaction": "#/components/schemas/TypedCosmosRawTransactionRequest",
                                "cosmos_transfer": "#/components/schemas/TypedCosmosTransferRequest"
                            }
                        }
                    },
                    "wait_for_state": {
                        "$ref": "#/components/schemas/CosmosTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details",
                    "wait_for_state"
                ]
            },
            "CreateCosmosTransferRequestExplicitValue": {
                "properties": {
                    "type": {
                        "enum": [
                            "value"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "value"
                ]
            },
            "CreateCosmosTransferRequestMaxValue": {
                "properties": {
                    "type": {
                        "enum": [
                            "max"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "CreateCosmosVaultRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "CreateDeviceRequest": {
                "properties": {
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "user_id"
                ]
            },
            "CreateDeviceResponse": {
                "properties": {
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "device_id"
                ]
            },
            "CreateEVMContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EvmChainUniqueId"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "address",
                    "chains"
                ]
            },
            "CreateEndUserErrorType": {
                "type": "string",
                "enum": [
                    "unsupported_organization",
                    "backup_not_ready"
                ]
            },
            "CreateEndUserRequest": {
                "properties": {
                    "external_id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "external_id"
                ]
            },
            "CreateEndUserResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "external_id": {
                        "type": "string",
                        "example": "user|1234"
                    },
                    "last_login_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "external_id",
                    "last_login_at"
                ]
            },
            "CreateEvmMessageRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateEvmTypedMessageRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmPersonalMessageRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "personal_message_type": "#/components/schemas/CreateEvmPersonalMessageRequest",
                                "typed_message_type": "#/components/schemas/CreateEvmTypedMessageRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateEvmMessageWithWaitRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateEvmTypedMessageRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmPersonalMessageRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "personal_message_type": "#/components/schemas/CreateEvmPersonalMessageRequest",
                                "typed_message_type": "#/components/schemas/CreateEvmTypedMessageRequest"
                            }
                        }
                    },
                    "wait_for_state": {
                        "$ref": "#/components/schemas/EvmMessageState"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details",
                    "wait_for_state"
                ]
            },
            "CreateEvmPersonalMessageRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "personal_message_type"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "raw_data": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "raw_data"
                ]
            },
            "CreateEvmRawTransactionRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "use_secure_node": {
                        "type": "boolean",
                        "default": false
                    },
                    "gas": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GasPriorityRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CustomGasRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "custom": "#/components/schemas/CustomGasRequest",
                                "priority": "#/components/schemas/GasPriorityRequest"
                            }
                        }
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "skip_prediction": {
                        "type": "boolean",
                        "default": false
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "funder": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "to": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "data": {
                        "$ref": "#/components/schemas/EvmDataRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "gas",
                    "chain",
                    "to",
                    "value"
                ]
            },
            "CreateEvmRevokeAllowanceRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_revoke_allowance"
                        ],
                        "type": "string"
                    },
                    "use_secure_node": {
                        "type": "boolean",
                        "default": false
                    },
                    "gas": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GasPriorityRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CustomGasRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "custom": "#/components/schemas/CustomGasRequest",
                                "priority": "#/components/schemas/GasPriorityRequest"
                            }
                        }
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "skip_prediction": {
                        "type": "boolean",
                        "default": false
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "funder": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "token": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "spender": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "gas",
                    "chain",
                    "token",
                    "spender"
                ]
            },
            "CreateEvmTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateEvmRawTransactionRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmTransferRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmRevokeAllowanceRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "evm_raw_transaction": "#/components/schemas/CreateEvmRawTransactionRequest",
                                "evm_revoke_allowance": "#/components/schemas/CreateEvmRevokeAllowanceRequest",
                                "evm_transfer": "#/components/schemas/CreateEvmTransferRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateEvmTransactionWithWaitRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateEvmRawTransactionRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmTransferRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmRevokeAllowanceRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "evm_raw_transaction": "#/components/schemas/CreateEvmRawTransactionRequest",
                                "evm_revoke_allowance": "#/components/schemas/CreateEvmRevokeAllowanceRequest",
                                "evm_transfer": "#/components/schemas/CreateEvmTransferRequest"
                            }
                        }
                    },
                    "wait_for_state": {
                        "$ref": "#/components/schemas/EvmTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details",
                    "wait_for_state"
                ]
            },
            "CreateEvmTransferRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_transfer"
                        ],
                        "type": "string"
                    },
                    "use_secure_node": {
                        "type": "boolean",
                        "default": false
                    },
                    "gas": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/GasPriorityRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CustomGasRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "custom": "#/components/schemas/CustomGasRequest",
                                "priority": "#/components/schemas/GasPriorityRequest"
                            }
                        }
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "skip_prediction": {
                        "type": "boolean",
                        "default": false
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "funder": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 42,
                                "minLength": 42,
                                "pattern": "^0[xX][a-fA-F0-9]+$",
                                "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                            },
                            {
                                "type": "string",
                                "format": "uuid"
                            }
                        ]
                    },
                    "chain": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "token": {
                        "deprecated": true,
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EvmAssetIdentifierRequest"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateEvmTransferRequestExplicitValue"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmTransferRequestMaxValue"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "max": "#/components/schemas/CreateEvmTransferRequestMaxValue",
                                "value": "#/components/schemas/CreateEvmTransferRequestExplicitValue"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "gas",
                    "to",
                    "value"
                ]
            },
            "CreateEvmTransferRequestExplicitValue": {
                "properties": {
                    "type": {
                        "enum": [
                            "value"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "value"
                ]
            },
            "CreateEvmTransferRequestMaxValue": {
                "properties": {
                    "type": {
                        "enum": [
                            "max"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "CreateEvmTypedMessageRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "typed_message_type"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "raw_data": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "raw_data"
                ]
            },
            "CreateEvmVaultRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "CreateGroupRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "contact_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "contact_ids"
                ]
            },
            "CreateKeyShareBackupRequest": {
                "properties": {
                    "backup_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "user_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array",
                        "maxItems": 2,
                        "minItems": 2
                    }
                },
                "type": "object",
                "required": [
                    "backup_email",
                    "user_ids"
                ]
            },
            "CreateKeysetErrorType": {
                "type": "string",
                "enum": [
                    "cannot_create_keyset_for_user_id",
                    "cannot_create_keyset_for_user_type"
                ]
            },
            "CreateKeysetRequest": {
                "properties": {
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "type": "object",
                "required": [
                    "user_id",
                    "name"
                ]
            },
            "CreateKeysetResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/OrganizationKeyset"
                    },
                    {
                        "$ref": "#/components/schemas/UserKeyset"
                    }
                ],
                "discriminator": {
                    "propertyName": "scope",
                    "mapping": {
                        "organization": "#/components/schemas/OrganizationKeyset",
                        "user": "#/components/schemas/UserKeyset"
                    }
                }
            },
            "CreateLogsRequest": {
                "properties": {
                    "logs": {
                        "items": {
                            "$ref": "#/components/schemas/LogMessage"
                        },
                        "type": "array",
                        "minItems": 1
                    },
                    "client_type": {
                        "$ref": "#/components/schemas/LogClientType"
                    },
                    "client_gitrev": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "logs",
                    "client_type",
                    "client_gitrev"
                ]
            },
            "CreateMasterKeyRequest": {
                "properties": {
                    "encrypted_share": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "key_type": {
                        "$ref": "#/components/schemas/KeyType"
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_share",
                    "signature",
                    "key_type"
                ]
            },
            "CreatePersonResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "person"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "example": "John Doe",
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserState"
                    },
                    "is_new_device_provisioning": {
                        "type": "boolean"
                    },
                    "welcome_message_acknowledged_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_addition_to_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_removal_from_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_change": {
                        "$ref": "#/components/schemas/PendingUserChangeRef"
                    },
                    "user_action_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "email",
                    "state",
                    "is_new_device_provisioning",
                    "welcome_message_acknowledged_at",
                    "role",
                    "user_action_id"
                ]
            },
            "CreatePersonUserRequest": {
                "properties": {
                    "user_type": {
                        "enum": [
                            "person"
                        ],
                        "type": "string"
                    },
                    "user_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "user_role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "user_type",
                    "user_email",
                    "user_role"
                ]
            },
            "CreatePublicKeyBackupRequest": {
                "properties": {
                    "backup_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "public_key": {
                        "$ref": "#/components/schemas/BackupPublicKey"
                    }
                },
                "type": "object",
                "required": [
                    "backup_email",
                    "public_key"
                ]
            },
            "CreateSolanaContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaChainUniqueId"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "address",
                    "chains"
                ]
            },
            "CreateSolanaMessageRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "solana_message"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/SolanaPersonalMessageRequest"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateSolanaRawTransactionRequest": {
                "properties": {
                    "version": {
                        "$ref": "#/components/schemas/SolanaMessageVersion"
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaCompiledInstruction"
                        },
                        "type": "array"
                    },
                    "accounts": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionAccountRequest"
                        },
                        "type": "array"
                    },
                    "address_table_lookups": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaMessageAddressTableLookupRequest"
                        },
                        "type": "array"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionSignaturesRequest"
                        },
                        "type": "array"
                    },
                    "recent_blockhash": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"
                    },
                    "type": {
                        "enum": [
                            "solana_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "skip_prediction": {
                        "type": "boolean",
                        "default": false
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "version",
                    "instructions",
                    "accounts",
                    "address_table_lookups",
                    "type",
                    "chain"
                ]
            },
            "CreateSolanaTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateSolanaTransferRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateSolanaRawTransactionRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "solana_raw_transaction": "#/components/schemas/CreateSolanaRawTransactionRequest",
                                "solana_transfer": "#/components/schemas/CreateSolanaTransferRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateSolanaTransactionWithWaitRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateSolanaTransferRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CreateSolanaRawTransactionRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "solana_raw_transaction": "#/components/schemas/CreateSolanaRawTransactionRequest",
                                "solana_transfer": "#/components/schemas/CreateSolanaTransferRequest"
                            }
                        }
                    },
                    "wait_for_state": {
                        "$ref": "#/components/schemas/SolanaTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details",
                    "wait_for_state"
                ]
            },
            "CreateSolanaTransferRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana_transfer"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "push_mode": {
                        "default": "auto",
                        "$ref": "#/components/schemas/PushMode"
                    },
                    "skip_prediction": {
                        "type": "boolean",
                        "default": false
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 44,
                                "minLength": 32,
                                "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                                "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                            },
                            {
                                "type": "string",
                                "format": "uuid"
                            }
                        ]
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateSolanaTransferRequestExplicitAmount"
                            },
                            {
                                "$ref": "#/components/schemas/CreateSolanaTransferRequestMaxAmount"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "max": "#/components/schemas/CreateSolanaTransferRequestMaxAmount",
                                "value": "#/components/schemas/CreateSolanaTransferRequestExplicitAmount"
                            }
                        }
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/SolanaAssetIdentifierRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "to",
                    "value",
                    "asset_identifier"
                ]
            },
            "CreateSolanaTransferRequestExplicitAmount": {
                "properties": {
                    "type": {
                        "enum": [
                            "value"
                        ],
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "value"
                ]
            },
            "CreateSolanaTransferRequestMaxAmount": {
                "properties": {
                    "type": {
                        "enum": [
                            "max"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "CreateSolanaVaultRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "CreateTransactionErrorType": {
                "type": "string",
                "enum": [
                    "reverted_transaction",
                    "partial_signed_raw_request",
                    "blocked_by_policy",
                    "transaction_contains_restricted_addresses",
                    "vault_not_found",
                    "missing_signed_raw_request",
                    "redundant_signed_raw_request",
                    "transfer_to_self",
                    "transaction_to_non_contract",
                    "insecure_stark_key_derivation",
                    "invalid_signed_raw_request",
                    "invalid_signer_type",
                    "invalid_evm_message",
                    "invalid_evm_transaction_data",
                    "insufficient_funds",
                    "vault_type_mismatch",
                    "invalid_creator_type",
                    "invalid_recipient",
                    "dust_not_allowed",
                    "invalid_gas_type",
                    "insufficient_approvers",
                    "funding_blocked_by_policy",
                    "funder_not_allowed_for_transaction_type",
                    "origin_vault_used_as_funder"
                ]
            },
            "CreateTransactionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreateBlackBoxSignatureRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateCosmosTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateEvmMessageRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateEvmTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateSolanaMessageRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateSolanaTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateUtxoTransactionRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/CreateBlackBoxSignatureRequest",
                        "cosmos_transaction": "#/components/schemas/CreateCosmosTransactionRequest",
                        "evm_message": "#/components/schemas/CreateEvmMessageRequest",
                        "evm_transaction": "#/components/schemas/CreateEvmTransactionRequest",
                        "solana_message": "#/components/schemas/CreateSolanaMessageRequest",
                        "solana_transaction": "#/components/schemas/CreateSolanaTransactionRequest",
                        "utxo_transaction": "#/components/schemas/CreateUtxoTransactionRequest"
                    }
                }
            },
            "CreateTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxSignature"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/EvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/EvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/BlackBoxSignature",
                        "cosmos_transaction": "#/components/schemas/CosmosTransaction",
                        "evm_message": "#/components/schemas/EvmMessage",
                        "evm_transaction": "#/components/schemas/EvmTransaction",
                        "solana_message": "#/components/schemas/SolanaMessage",
                        "solana_transaction": "#/components/schemas/SolanaTransaction",
                        "utxo_transaction": "#/components/schemas/UtxoTransaction"
                    }
                }
            },
            "CreateTransactionWithWaitRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreateBlackBoxSignatureWithWaitRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateCosmosTransactionWithWaitRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateEvmMessageWithWaitRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateEvmTransactionWithWaitRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateSolanaTransactionWithWaitRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateUtxoTransactionWithWaitRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/CreateBlackBoxSignatureWithWaitRequest",
                        "cosmos_transaction": "#/components/schemas/CreateCosmosTransactionWithWaitRequest",
                        "evm_message": "#/components/schemas/CreateEvmMessageWithWaitRequest",
                        "evm_transaction": "#/components/schemas/CreateEvmTransactionWithWaitRequest",
                        "solana_transaction": "#/components/schemas/CreateSolanaTransactionWithWaitRequest",
                        "utxo_transaction": "#/components/schemas/CreateUtxoTransactionWithWaitRequest"
                    }
                }
            },
            "CreateTransactionWithWaitResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "signatures": {
                        "items": {
                            "type": "string",
                            "example": "SGVsbG8="
                        },
                        "type": "array"
                    },
                    "state": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BlackBoxSignatureState"
                            },
                            {
                                "$ref": "#/components/schemas/CosmosTransactionState"
                            },
                            {
                                "$ref": "#/components/schemas/EvmMessageState"
                            },
                            {
                                "$ref": "#/components/schemas/EvmTransactionState"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaTransactionState"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaMessageState"
                            },
                            {
                                "$ref": "#/components/schemas/UtxoTransactionState"
                            }
                        ]
                    },
                    "has_timed_out": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "state",
                    "has_timed_out"
                ]
            },
            "CreateTransactionsPolicyProposalErrorType": {
                "type": "string",
                "enum": [
                    "invalid_policy_rule"
                ]
            },
            "CreateUserErrorType": {
                "type": "string",
                "enum": [
                    "groups_not_found",
                    "groups_max_capacity_reached"
                ]
            },
            "CreateUserGroupErrorType": {
                "type": "string",
                "enum": [
                    "invalid_group_name",
                    "cannot_create_user_group_with_non_existing_users",
                    "cannot_create_user_group_for_users_state",
                    "cannot_create_user_group_for_users_type"
                ]
            },
            "CreateUserGroupRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "user_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array",
                        "maxItems": 300
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "CreateUserGroupResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "users_count": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserGroupState"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "proposed_change": {
                        "$ref": "#/components/schemas/UserGroupChangeRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "users_count",
                    "state",
                    "modified_by"
                ]
            },
            "CreateUserKeyRequest": {
                "properties": {
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "key_type": {
                        "$ref": "#/components/schemas/KeyType"
                    }
                },
                "type": "object",
                "required": [
                    "keyset_id",
                    "key_type"
                ]
            },
            "CreateUserRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreatePersonUserRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateApiSignerUserRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateApiUserRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_signer": "#/components/schemas/CreateApiSignerUserRequest",
                        "api_user": "#/components/schemas/CreateApiUserRequest",
                        "person": "#/components/schemas/CreatePersonUserRequest"
                    }
                }
            },
            "CreateUserResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreatePersonResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ApiUserResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ApiSigner"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_signer": "#/components/schemas/ApiSigner",
                        "api_user": "#/components/schemas/ApiUserResponse",
                        "person": "#/components/schemas/CreatePersonResponse"
                    }
                }
            },
            "CreateUtxoContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/UtxoChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "address",
                    "chain"
                ]
            },
            "CreateUtxoTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "utxo_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/TransactionDetailsUtxoTransferRequest"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "CreateUtxoTransactionWithWaitRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "note": {
                        "type": "string"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "type": {
                        "enum": [
                            "utxo_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/TransactionDetailsUtxoTransferRequest"
                    },
                    "wait_for_state": {
                        "$ref": "#/components/schemas/UtxoTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details",
                    "wait_for_state"
                ]
            },
            "CreateUtxoVaultAddressRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "address_type": {
                        "default": "segwit",
                        "$ref": "#/components/schemas/BitcoinVaultCreateAddressType"
                    }
                },
                "type": "object"
            },
            "CreateUtxoVaultRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/UtxoChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "chain"
                ]
            },
            "CreateVaultAddressErrorType": {
                "type": "string",
                "enum": [
                    "invalid_vault_type"
                ]
            },
            "CreateVaultAddressRequest": {
                "$ref": "#/components/schemas/CreateUtxoVaultAddressRequest"
            },
            "CreateVaultAddressResponse": {
                "$ref": "#/components/schemas/UtxoVaultAddress"
            },
            "CreateVaultErrorType": {
                "type": "string",
                "enum": [
                    "cosmos_not_supported",
                    "max_vaults_reached",
                    "mpc_key_is_missing",
                    "keyset_is_missing",
                    "user_keyset_is_required_for_organization",
                    "keyset_not_ready"
                ]
            },
            "CreateVaultGroupErrorType": {
                "type": "string",
                "enum": [
                    "vaults_not_found",
                    "user_groups_not_found",
                    "users_not_found"
                ]
            },
            "CreateVaultGroupRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "vault_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/VaultGroupPermissionsRequest"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "permissions"
                ]
            },
            "CreateVaultGroupResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 2
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "vault_count": {
                        "type": "integer"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/VaultGroupPermissions"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/VaultGroupOwner"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "pending_change_request": {
                        "$ref": "#/components/schemas/VaultGroupPendingChangeRequestInfo"
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultGroupState"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "vault_count",
                    "permissions",
                    "owner",
                    "state"
                ]
            },
            "CreateVaultRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CreateBlackBoxVaultRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateCosmosVaultRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateEvmVaultRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateSolanaVaultRequest"
                    },
                    {
                        "$ref": "#/components/schemas/CreateUtxoVaultRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box": "#/components/schemas/CreateBlackBoxVaultRequest",
                        "cosmos": "#/components/schemas/CreateCosmosVaultRequest",
                        "evm": "#/components/schemas/CreateEvmVaultRequest",
                        "solana": "#/components/schemas/CreateSolanaVaultRequest",
                        "utxo": "#/components/schemas/CreateUtxoVaultRequest"
                    }
                }
            },
            "CreateVaultResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxVault"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosVault"
                    },
                    {
                        "$ref": "#/components/schemas/EvmVault"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaVault"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoVault"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box": "#/components/schemas/BlackBoxVault",
                        "cosmos": "#/components/schemas/CosmosVault",
                        "evm": "#/components/schemas/EvmVault",
                        "solana": "#/components/schemas/SolanaVault",
                        "utxo": "#/components/schemas/UtxoVault"
                    }
                }
            },
            "CreateWebhookRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/WebhookResourceType"
                        },
                        "type": "array"
                    },
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "events",
                    "url"
                ]
            },
            "CreateWebhookResponse": {
                "$ref": "#/components/schemas/Webhook"
            },
            "CustomFeeRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "custom"
                        ],
                        "type": "string"
                    },
                    "fee_per_byte": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "fee_per_byte"
                ]
            },
            "CustomGasRequest": {
                "properties": {
                    "gas_limit": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "type": {
                        "enum": [
                            "custom"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LegacyGasRequest"
                            },
                            {
                                "$ref": "#/components/schemas/DynamicGasRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "dynamic": "#/components/schemas/DynamicGasRequest",
                                "legacy": "#/components/schemas/LegacyGasRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "Dapp": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    },
                    "logo_url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            },
            "DefaultActionDiff": {
                "type": "string",
                "enum": [
                    "unmodified",
                    "edited"
                ]
            },
            "DefinedPreconditionError_AbortOnboardingErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/AbortOnboardingErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_AbortTransactionErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/AbortTransactionErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_ApproveTransactionErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/ApproveTransactionErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_ConnectWalletErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/ConnectWalletErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateEndUserErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateEndUserErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateKeysetErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateKeysetErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateTransactionErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateTransactionErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateTransactionsPolicyProposalErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateTransactionsPolicyProposalErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateUserErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateUserErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateUserGroupErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateUserGroupErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateVaultAddressErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateVaultAddressErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateVaultErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateVaultErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_CreateVaultGroupErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/CreateVaultGroupErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_DeleteUserErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/DeleteUserErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_DeleteUserGroupErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/DeleteUserGroupErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_EncryptedDeviceSharesUploadErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/EncryptedDeviceSharesUploadErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_GetOnboardingStateErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/GetOnboardingStateErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_IssueEndUserAuthTokenErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/IssueEndUserAuthTokenErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_PredictTransactionErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/PredictTransactionErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_ReleaseTransactionErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/ReleaseTransactionErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_RemoveUserKeyErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/RemoveUserKeyErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_SetDesiredKeyTypesErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/SetDesiredKeyTypesErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_SetUserKeyErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/SetUserKeyErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_SignTransactionErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/SignTransactionErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_SubmitChangeProposalErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/SubmitChangeProposalErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_TestWebhookErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/TestWebhookErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DefinedPreconditionError_UpdateVaultGroupPermissionsErrorType_": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    },
                    "error_type": {
                        "$ref": "#/components/schemas/UpdateVaultGroupPermissionsErrorType"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "DeleteAddressBookGroupPrerequisite": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DeleteAddressBookGroupPrerequisiteType"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/DeletePrerequisiteSeverity"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "severity"
                ]
            },
            "DeleteAddressBookGroupPrerequisiteType": {
                "type": "string",
                "enum": [
                    "policy_rule_named_group",
                    "policy_draft_named_group"
                ]
            },
            "DeleteContactPrerequisite": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DeleteContactPrerequisiteType"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/DeletePrerequisiteSeverity"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "severity"
                ]
            },
            "DeleteContactPrerequisiteType": {
                "type": "string",
                "enum": [
                    "policy_rule_named_contact",
                    "policy_draft_named_contact",
                    "is_group_member",
                    "is_pending_group_member"
                ]
            },
            "DeleteContactPrerequisitesResponse": {
                "properties": {
                    "prerequisites": {
                        "items": {
                            "$ref": "#/components/schemas/DeleteContactPrerequisite"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "prerequisites"
                ]
            },
            "DeleteGroupPrerequisitesResponse": {
                "properties": {
                    "prerequisites": {
                        "items": {
                            "$ref": "#/components/schemas/DeleteAddressBookGroupPrerequisite"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "prerequisites"
                ]
            },
            "DeletePrerequisiteSeverity": {
                "type": "string",
                "enum": [
                    "error",
                    "warning"
                ]
            },
            "DeleteUserErrorType": {
                "type": "string",
                "enum": [
                    "user_is_not_active"
                ]
            },
            "DeleteUserGroupErrorType": {
                "type": "string",
                "enum": [
                    "unmet_delete_prerequisites"
                ]
            },
            "DeleteUserGroupPrerequisite": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DeleteUserGroupPrerequisiteType"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/DeletePrerequisiteSeverity"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "severity"
                ]
            },
            "DeleteUserGroupPrerequisiteType": {
                "type": "string",
                "enum": [
                    "user_group_has_a_pending_proposal",
                    "user_group_has_onboarding_users_pending_addition",
                    "policy_rule_named_user_group",
                    "policy_draft_named_user_group"
                ]
            },
            "DeleteUserGroupPrerequisitesResponse": {
                "properties": {
                    "prerequisites": {
                        "items": {
                            "$ref": "#/components/schemas/DeleteUserGroupPrerequisite"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "DeleteUserPrerequisite": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DeleteUserPrerequisiteType"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/DeletePrerequisiteSeverity"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "severity"
                ]
            },
            "DeleteUserPrerequisiteType": {
                "type": "string",
                "enum": [
                    "self_delete",
                    "min_quorum_size_limit",
                    "policy_rule_named_member",
                    "policy_draft_named_member",
                    "transaction_in_progress",
                    "admin_delete",
                    "backup_key_holder",
                    "backup_updates_receiver",
                    "pending_quorum_size_update",
                    "user_in_group",
                    "user_pending_addition_to_group",
                    "user_pending_removal_from_group"
                ]
            },
            "DescribeTransactionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/TransactionDetailsCosmosTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsEvmMessageRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsEvmTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsSolanaMessageRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsSolanaTransactionRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_transaction": "#/components/schemas/TransactionDetailsCosmosTransactionRequest",
                        "evm_message": "#/components/schemas/TransactionDetailsEvmMessageRequest",
                        "evm_transaction": "#/components/schemas/TransactionDetailsEvmTransactionRequest",
                        "solana_message": "#/components/schemas/TransactionDetailsSolanaMessageRequest",
                        "solana_transaction": "#/components/schemas/TransactionDetailsSolanaTransactionRequest"
                    }
                }
            },
            "DescribeTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/DescribedCosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedEvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedEvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedSolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/DescribedSolanaTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_transaction": "#/components/schemas/DescribedCosmosTransaction",
                        "evm_message": "#/components/schemas/DescribedEvmMessage",
                        "evm_transaction": "#/components/schemas/DescribedEvmTransaction",
                        "solana_message": "#/components/schemas/DescribedSolanaMessage",
                        "solana_transaction": "#/components/schemas/DescribedSolanaTransaction"
                    }
                }
            },
            "DescribedCosmosTransaction": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "cosmos_transaction_type_details": {
                        "$ref": "#/components/schemas/CosmosTransactionTypeDetails"
                    },
                    "memo": {
                        "default": "",
                        "type": "string"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "gas_debit": {
                        "$ref": "#/components/schemas/CosmosGasDebit"
                    },
                    "suggested_fees": {
                        "$ref": "#/components/schemas/CosmosSuggestedFees"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "cosmos_transaction_type_details",
                    "sender",
                    "chain",
                    "gas_debit",
                    "suggested_fees"
                ]
            },
            "DescribedEvmMessage": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "evm_message_type": {
                        "$ref": "#/components/schemas/EvmMessageType"
                    },
                    "typed_data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UnknownTypedMessageEvmMessage"
                            },
                            {
                                "$ref": "#/components/schemas/PermitTypedMessageEvmMessage"
                            },
                            {
                                "$ref": "#/components/schemas/Permit2TypedMessageEvmMessage"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "permit": "#/components/schemas/PermitTypedMessageEvmMessage",
                                "permit2": "#/components/schemas/Permit2TypedMessageEvmMessage",
                                "unknown": "#/components/schemas/UnknownTypedMessageEvmMessage"
                            }
                        }
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "raw_data": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault",
                    "evm_message_type",
                    "chain",
                    "raw_data"
                ]
            },
            "DescribedEvmTransaction": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "evm_transaction_type_details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmNativeTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/TokenTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/AllowanceDetails"
                            },
                            {
                                "$ref": "#/components/schemas/ContractCallDetails"
                            },
                            {
                                "$ref": "#/components/schemas/BridgeDetails"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "allowance": "#/components/schemas/AllowanceDetails",
                                "contract_call": "#/components/schemas/ContractCallDetails",
                                "cross_chain_bridge": "#/components/schemas/BridgeDetails",
                                "native_transfer": "#/components/schemas/EvmNativeTransferDetails",
                                "token_transfer": "#/components/schemas/TokenTransferDetails"
                            }
                        }
                    },
                    "parsed_data": {
                        "$ref": "#/components/schemas/EvmTransactionParsedData"
                    },
                    "gas_limit": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "deprecated": true,
                        "example": "1000000000000000000"
                    },
                    "gas_estimation": {
                        "$ref": "#/components/schemas/EvmGasEstimation"
                    },
                    "suggested_fees": {
                        "$ref": "#/components/schemas/EvmSuggestedFees"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "evm_transaction_type_details",
                    "parsed_data",
                    "gas_limit",
                    "gas_estimation",
                    "suggested_fees",
                    "from",
                    "to",
                    "chain"
                ]
            },
            "DescribedSolanaMessage": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana_message"
                        ],
                        "type": "string"
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "solana_message_type": {
                        "$ref": "#/components/schemas/SolanaMessageType"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "raw_data": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault",
                    "solana_message_type",
                    "chain",
                    "raw_data"
                ]
            },
            "DescribedSolanaTransaction": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "solana_transaction_type_details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SolanaNativeTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaTokenTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaRawTransactionDetails"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native_transfer": "#/components/schemas/SolanaNativeTransferDetails",
                                "raw_transaction": "#/components/schemas/SolanaRawTransactionDetails",
                                "token_transfer": "#/components/schemas/SolanaTokenTransferDetails"
                            }
                        }
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "fee": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "deprecated": true,
                        "example": "1000000000000000000"
                    },
                    "enriched_fee": {
                        "$ref": "#/components/schemas/SolanaFee"
                    },
                    "suggested_fees": {
                        "$ref": "#/components/schemas/SolanaSuggestedFees"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "solana_transaction_type_details",
                    "sender",
                    "chain",
                    "fee",
                    "enriched_fee",
                    "suggested_fees"
                ]
            },
            "DevicePlatform": {
                "type": "string",
                "enum": [
                    "ios",
                    "android"
                ]
            },
            "DeviceSystemInfo": {
                "properties": {
                    "platform": {
                        "$ref": "#/components/schemas/DevicePlatform"
                    },
                    "model": {
                        "type": "string"
                    },
                    "push_token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "platform",
                    "model",
                    "push_token"
                ]
            },
            "DirectMessage": {
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "value"
                ]
            },
            "DirectMessagesList": {
                "properties": {
                    "format": {
                        "enum": [
                            "direct"
                        ],
                        "type": "string"
                    },
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/DirectMessage"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "messages"
                ]
            },
            "DirectRequestData": {
                "properties": {
                    "format": {
                        "enum": [
                            "direct"
                        ],
                        "type": "string"
                    },
                    "body": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "auth_info": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "account_number": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "body",
                    "auth_info"
                ]
            },
            "DirectSignDoc": {
                "properties": {
                    "format": {
                        "enum": [
                            "direct"
                        ],
                        "type": "string"
                    },
                    "body": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "auth_info": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "account_number": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "signed_body": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "signed_auth_info": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "body",
                    "auth_info",
                    "chain",
                    "account_number",
                    "signed_body",
                    "signed_auth_info"
                ]
            },
            "DisableUserMembershipResponse": {
                "properties": {
                    "auth0_log": {
                        "type": "string"
                    },
                    "db_log": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "auth0_log",
                    "db_log"
                ]
            },
            "DynamicGas": {
                "properties": {
                    "max_priority_fee_per_gas": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "max_fee_per_gas": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/GasPriorityLevel"
                    },
                    "limit": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "type": {
                        "enum": [
                            "dynamic"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "max_priority_fee_per_gas",
                    "max_fee_per_gas",
                    "priority",
                    "limit",
                    "type"
                ]
            },
            "DynamicGasFields": {
                "properties": {
                    "max_priority_fee_per_gas": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "max_fee_per_gas": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "max_priority_fee_per_gas",
                    "max_fee_per_gas"
                ]
            },
            "DynamicGasRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "dynamic"
                        ],
                        "type": "string"
                    },
                    "max_priority_fee_per_gas": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "max_fee_per_gas": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "max_priority_fee_per_gas",
                    "max_fee_per_gas"
                ]
            },
            "EVMAddressBookContact": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "$ref": "#/components/schemas/AddressBookContactState"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupRef"
                        },
                        "type": "array"
                    },
                    "pending_changes": {
                        "$ref": "#/components/schemas/AddressBookContactChanges"
                    },
                    "chain_type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedEvmChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "modified_by",
                    "state",
                    "groups",
                    "chain_type",
                    "address",
                    "chains"
                ]
            },
            "EVMAddressBookContactAddress": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedEvmChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chains"
                ]
            },
            "EVMAddressBookContactAddressRef": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EvmChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chains"
                ]
            },
            "EcdsaSecp256k1BlackBoxVault": {
                "properties": {
                    "type": {
                        "enum": [
                            "ecdsa_secp256k1"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "EcdsaSignature": {
                "properties": {
                    "r": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    },
                    "s": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    },
                    "v": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "r",
                    "s",
                    "v"
                ]
            },
            "EcdsaStarkBlackBoxVault": {
                "properties": {
                    "type": {
                        "enum": [
                            "ecdsa_stark"
                        ],
                        "type": "string"
                    },
                    "public_key": {
                        "type": "string",
                        "maxLength": 66,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "deprecated": true,
                        "example": "0x19c78df8f4ff31e78de58575487ce1eaf19922ad9b8a714e61a441c12e0c8b2"
                    },
                    "stark_key": {
                        "type": "string",
                        "maxLength": 66,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x19c78df8f4ff31e78de58575487ce1eaf19922ad9b8a714e61a441c12e0c8b2"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "public_key",
                    "stark_key"
                ]
            },
            "EditContactRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EditCosmosContactRequest"
                    },
                    {
                        "$ref": "#/components/schemas/EditEvmContactRequest"
                    },
                    {
                        "$ref": "#/components/schemas/EditSolanaContactRequest"
                    },
                    {
                        "$ref": "#/components/schemas/EditUtxoContactRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos": "#/components/schemas/EditCosmosContactRequest",
                        "evm": "#/components/schemas/EditEvmContactRequest",
                        "solana": "#/components/schemas/EditSolanaContactRequest",
                        "utxo": "#/components/schemas/EditUtxoContactRequest"
                    }
                }
            },
            "EditCosmosContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "EditEvmContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EvmChainUniqueId"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "chains"
                ]
            },
            "EditGroupRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "contact_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "contact_ids"
                ]
            },
            "EditSolanaContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaChainUniqueId"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "chains"
                ]
            },
            "EditUtxoContactRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type"
                ]
            },
            "EditVaultGroupChanges": {
                "properties": {
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "added_vaults": {
                        "items": {
                            "$ref": "#/components/schemas/VaultRef"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "edit_group"
                        ],
                        "type": "string"
                    },
                    "removed_vaults": {
                        "items": {
                            "$ref": "#/components/schemas/VaultRef"
                        },
                        "type": "array"
                    },
                    "new_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "change_request_id",
                    "added_vaults",
                    "type",
                    "removed_vaults"
                ]
            },
            "EncryptedBackupShareByDevice": {
                "properties": {
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "encrypted_share": {
                        "$ref": "#/components/schemas/EncryptionData"
                    },
                    "hmac_for_public_rsa_keys": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "device_id",
                    "encrypted_share",
                    "hmac_for_public_rsa_keys"
                ]
            },
            "EncryptedDeviceSharesBackup": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ecdsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "eddsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "ecdsa_stark": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "created_at"
                ]
            },
            "EncryptedDeviceSharesUploadErrorType": {
                "type": "string",
                "enum": [
                    "desired_key_types_are_missing_for_keyset",
                    "backup_keys_mismatch_desired_key_types",
                    "keys_are_not_generated",
                    "share_public_key_mismatch"
                ]
            },
            "EncryptionData": {
                "properties": {
                    "encrypted_session_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "nonce": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "ciphertext": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_session_key",
                    "nonce",
                    "ciphertext"
                ]
            },
            "EndUser": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "external_id": {
                        "type": "string",
                        "example": "user|1234"
                    },
                    "last_login_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "external_id",
                    "last_login_at"
                ]
            },
            "EndUserLoginResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "external_id": {
                        "type": "string",
                        "example": "user|1234"
                    },
                    "last_login_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "external_id",
                    "last_login_at"
                ]
            },
            "EndUserRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_type": {
                        "enum": [
                            "end_user"
                        ],
                        "type": "string"
                    },
                    "external_id": {
                        "type": "string",
                        "example": "user|1234"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "active",
                            "deleted"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_type",
                    "external_id",
                    "state"
                ]
            },
            "EndUserSortableFields": {
                "type": "string",
                "enum": [
                    "created_asc",
                    "created_desc",
                    "end_user_last_login_asc",
                    "end_user_last_login_desc"
                ]
            },
            "EnrichAssetsRequest": {
                "properties": {
                    "asset_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AssetIdentifierRequest"
                        },
                        "type": "array",
                        "minItems": 1
                    }
                },
                "type": "object",
                "required": [
                    "asset_identifiers"
                ]
            },
            "EnrichedAssetIdentifier": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EnrichedCosmosAssetIdentifier"
                    },
                    {
                        "$ref": "#/components/schemas/EnrichedEvmAssetIdentifier"
                    },
                    {
                        "$ref": "#/components/schemas/EnrichedSolanaAssetIdentifier"
                    },
                    {
                        "$ref": "#/components/schemas/EnrichedUtxoAssetIdentifier"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos": "#/components/schemas/EnrichedCosmosAssetIdentifier",
                        "evm": "#/components/schemas/EnrichedEvmAssetIdentifier",
                        "solana": "#/components/schemas/EnrichedSolanaAssetIdentifier",
                        "utxo": "#/components/schemas/EnrichedUtxoAssetIdentifier"
                    }
                }
            },
            "EnrichedChain": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    }
                ],
                "discriminator": {
                    "propertyName": "chain_type",
                    "mapping": {
                        "cosmos": "#/components/schemas/EnrichedCosmosChain",
                        "evm": "#/components/schemas/EnrichedEvmChain",
                        "solana": "#/components/schemas/EnrichedSolanaChain",
                        "utxo": "#/components/schemas/EnrichedUtxoChain"
                    }
                }
            },
            "EnrichedCosmosAssetIdentifier": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EnrichedCosmosNativeAssetIdentifier"
                            },
                            {
                                "$ref": "#/components/schemas/EnrichedCosmosTokenAssetIdentifier"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native": "#/components/schemas/EnrichedCosmosNativeAssetIdentifier",
                                "token": "#/components/schemas/EnrichedCosmosTokenAssetIdentifier"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "EnrichedCosmosBechAddress": {
                "properties": {
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactRef"
                    },
                    "address": {
                        "$ref": "#/components/schemas/CosmosBechAddress"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "EnrichedCosmosChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "cosmos"
                        ],
                        "type": "string"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "native_currency_symbol": {
                        "type": "string",
                        "minLength": 1,
                        "example": "ETH"
                    },
                    "native_currency_name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Ether"
                    },
                    "blockchain_explorer": {
                        "$ref": "#/components/schemas/BlockchainExplorer"
                    },
                    "base_denom": {
                        "type": "string"
                    },
                    "bech32_prefix": {
                        "$ref": "#/components/schemas/CosmosBech32Prefix"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "unique_id",
                    "name",
                    "native_currency_symbol",
                    "native_currency_name",
                    "blockchain_explorer",
                    "base_denom",
                    "bech32_prefix"
                ]
            },
            "EnrichedCosmosNativeAssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "coin": {
                        "$ref": "#/components/schemas/CosmosNativeCoin"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "coin"
                ]
            },
            "EnrichedCosmosTokenAssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "type": {
                        "enum": [
                            "token"
                        ],
                        "type": "string"
                    },
                    "coin": {
                        "$ref": "#/components/schemas/CosmosToken"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "coin"
                ]
            },
            "EnrichedDapp": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    },
                    "logo_url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedChain"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "chain"
                ]
            },
            "EnrichedEvmAddress": {
                "properties": {
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactRef"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/EvmContractMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "EnrichedEvmAssetIdentifier": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EnrichedEvmNativeAssetIdentifier"
                            },
                            {
                                "$ref": "#/components/schemas/EnrichedEvmErc20AssetIdentifier"
                            },
                            {
                                "$ref": "#/components/schemas/EnrichedEvmErc721AssetIdentifier"
                            },
                            {
                                "$ref": "#/components/schemas/EnrichedEvmErc1155AssetIdentifier"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "erc1155": "#/components/schemas/EnrichedEvmErc1155AssetIdentifier",
                                "erc20": "#/components/schemas/EnrichedEvmErc20AssetIdentifier",
                                "erc721": "#/components/schemas/EnrichedEvmErc721AssetIdentifier",
                                "native": "#/components/schemas/EnrichedEvmNativeAssetIdentifier"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "EnrichedEvmChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "named_chain_id": {
                        "$ref": "#/components/schemas/EvmChainName"
                    },
                    "chain_id": {
                        "$ref": "#/components/schemas/EvmChainId"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/EvmChainUniqueId"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "native_currency_symbol": {
                        "type": "string",
                        "minLength": 1,
                        "example": "ETH"
                    },
                    "native_currency_name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Ether"
                    },
                    "blockchain_explorer": {
                        "$ref": "#/components/schemas/BlockchainExplorer"
                    },
                    "gas_type": {
                        "$ref": "#/components/schemas/GasType"
                    },
                    "supports_secure_node": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "named_chain_id",
                    "chain_id",
                    "unique_id",
                    "name",
                    "native_currency_symbol",
                    "native_currency_name",
                    "blockchain_explorer",
                    "gas_type"
                ]
            },
            "EnrichedEvmErc1155AssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "erc1155"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token",
                    "token_id"
                ]
            },
            "EnrichedEvmErc20AssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token"
                ]
            },
            "EnrichedEvmErc721AssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "erc721"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token",
                    "token_id"
                ]
            },
            "EnrichedEvmNativeAssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "EnrichedSolanaAddress": {
                "properties": {
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactRef"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "contract": {
                        "$ref": "#/components/schemas/SolanaContractMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "EnrichedSolanaAssetIdentifier": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EnrichedSolanaNativeAssetIdentifier"
                            },
                            {
                                "$ref": "#/components/schemas/EnrichedSolanaSplTokenAssetIdentifier"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native": "#/components/schemas/EnrichedSolanaNativeAssetIdentifier",
                                "spl_token": "#/components/schemas/EnrichedSolanaSplTokenAssetIdentifier"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "EnrichedSolanaChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "native_currency_symbol": {
                        "type": "string",
                        "minLength": 1,
                        "example": "ETH"
                    },
                    "native_currency_name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Ether"
                    },
                    "blockchain_explorer": {
                        "$ref": "#/components/schemas/BlockchainExplorer"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "unique_id",
                    "name",
                    "native_currency_symbol",
                    "native_currency_name",
                    "blockchain_explorer"
                ]
            },
            "EnrichedSolanaNativeAssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "EnrichedSolanaSplTokenAssetIdentifier": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "type": {
                        "enum": [
                            "spl_token"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token"
                ]
            },
            "EnrichedUtxoAddress": {
                "properties": {
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "contact": {
                        "$ref": "#/components/schemas/ContactRef"
                    },
                    "address": {
                        "$ref": "#/components/schemas/UtxoAddress"
                    },
                    "vault_address": {
                        "$ref": "#/components/schemas/VaultAddressRef"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "EnrichedUtxoAssetIdentifier": {
                "properties": {
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/EnrichedUtxoNativeAssetIdentifier"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "EnrichedUtxoChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/UtxoChainUniqueId"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "native_currency_symbol": {
                        "type": "string",
                        "minLength": 1,
                        "example": "ETH"
                    },
                    "native_currency_name": {
                        "type": "string",
                        "minLength": 1,
                        "example": "Ether"
                    },
                    "blockchain_explorer": {
                        "$ref": "#/components/schemas/BlockchainExplorer"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "unique_id",
                    "name",
                    "native_currency_symbol",
                    "native_currency_name",
                    "blockchain_explorer"
                ]
            },
            "EnrichedUtxoNativeAssetIdentifier": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain"
                ]
            },
            "Erc1155": {
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EvmAddress"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "erc1155"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "name",
                    "symbol",
                    "type"
                ]
            },
            "Erc1155AllowanceForAllChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc1155_for_all"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "approved": {
                        "type": "boolean"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc1155Contract"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "operator",
                    "approved",
                    "token_contract"
                ]
            },
            "Erc1155BalanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc1155"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc1155Contract"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "token_id",
                    "diff",
                    "token_contract"
                ]
            },
            "Erc1155Contract": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "dapp": {
                        "$ref": "#/components/schemas/Dapp"
                    },
                    "is_verified": {
                        "type": "boolean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/Erc1155"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified",
                    "token"
                ]
            },
            "Erc1155Transfer": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc1155"
                        ],
                        "type": "string"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc1155Contract"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "from",
                    "to",
                    "token_id",
                    "amount",
                    "token_contract"
                ]
            },
            "Erc20": {
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EvmAddress"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "decimals": {
                        "type": "integer"
                    },
                    "logo_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "name",
                    "symbol",
                    "type",
                    "decimals"
                ]
            },
            "Erc20AllowanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "spender": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc20Contract"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "spender",
                    "amount",
                    "token_contract"
                ]
            },
            "Erc20BalanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc20Contract"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "diff",
                    "token_contract"
                ]
            },
            "Erc20Contract": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "dapp": {
                        "$ref": "#/components/schemas/Dapp"
                    },
                    "is_verified": {
                        "type": "boolean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/Erc20"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified",
                    "token"
                ]
            },
            "Erc20Transfer": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc20Contract"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "from",
                    "to",
                    "amount",
                    "token_contract"
                ]
            },
            "Erc721": {
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EvmAddress"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "erc721"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "name",
                    "symbol",
                    "type"
                ]
            },
            "Erc721AllowanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc721"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc721Contract"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "operator",
                    "token_id",
                    "token_contract"
                ]
            },
            "Erc721AllowanceForAllChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc721_for_all"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "approved": {
                        "type": "boolean"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc721Contract"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "operator",
                    "approved",
                    "token_contract"
                ]
            },
            "Erc721Contract": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "dapp": {
                        "$ref": "#/components/schemas/Dapp"
                    },
                    "is_verified": {
                        "type": "boolean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/Erc721"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified",
                    "token"
                ]
            },
            "Erc721OwnershipChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc721"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "owned": {
                        "type": "boolean"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc721Contract"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "token_id",
                    "owned",
                    "token_contract"
                ]
            },
            "Erc721Transfer": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc721"
                        ],
                        "type": "string"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/Erc721Contract"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "from",
                    "to",
                    "token_id",
                    "token_contract"
                ]
            },
            "EvmAccountRepr": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "hex_repr": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "hex_repr"
                ]
            },
            "EvmAddress": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EvmChain"
                    },
                    "hex_repr": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "hex_repr"
                ]
            },
            "EvmAddressRequest": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainUniqueId"
                    },
                    "hex_repr": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "hex_repr"
                ]
            },
            "EvmAsset": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "decimals": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "verified": {
                        "type": "boolean"
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EnrichedAssetIdentifier"
                    },
                    "metadata_uri": {
                        "type": "string"
                    },
                    "type": {
                        "deprecated": true,
                        "enum": [
                            "evm_asset"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmNativeAsset"
                            },
                            {
                                "$ref": "#/components/schemas/EvmErc20Asset"
                            },
                            {
                                "$ref": "#/components/schemas/EvmErc721Asset"
                            },
                            {
                                "$ref": "#/components/schemas/EvmErc1155Asset"
                            }
                        ],
                        "deprecated": true,
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "evm_erc1155_asset": "#/components/schemas/EvmErc1155Asset",
                                "evm_erc20_asset": "#/components/schemas/EvmErc20Asset",
                                "evm_erc721_asset": "#/components/schemas/EvmErc721Asset",
                                "evm_native_asset": "#/components/schemas/EvmNativeAsset"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "decimals",
                    "name",
                    "symbol",
                    "hidden",
                    "verified",
                    "asset_identifier",
                    "type",
                    "details"
                ]
            },
            "EvmAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmNativeAssetIdentifierRequest"
                            },
                            {
                                "$ref": "#/components/schemas/EvmErc20AssetIdentifierRequest"
                            },
                            {
                                "$ref": "#/components/schemas/EvmErc721AssetIdentifierRequest"
                            },
                            {
                                "$ref": "#/components/schemas/EvmErc1155AssetIdentifierRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "erc1155": "#/components/schemas/EvmErc1155AssetIdentifierRequest",
                                "erc20": "#/components/schemas/EvmErc20AssetIdentifierRequest",
                                "erc721": "#/components/schemas/EvmErc721AssetIdentifierRequest",
                                "native": "#/components/schemas/EvmNativeAssetIdentifierRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "EvmBalanceChangeEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EvmNativeCurrencyBalanceChange"
                    },
                    {
                        "$ref": "#/components/schemas/Erc20BalanceChange"
                    },
                    {
                        "$ref": "#/components/schemas/Erc721OwnershipChange"
                    },
                    {
                        "$ref": "#/components/schemas/Erc1155BalanceChange"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "erc1155": "#/components/schemas/Erc1155BalanceChange",
                        "erc20": "#/components/schemas/Erc20BalanceChange",
                        "erc721": "#/components/schemas/Erc721OwnershipChange",
                        "native": "#/components/schemas/EvmNativeCurrencyBalanceChange"
                    }
                }
            },
            "EvmBlockData": {
                "properties": {
                    "number": {
                        "type": "integer"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 66,
                        "minLength": 66,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x780f21260f89d610f24eed21b34d29229611a37e0003e83dd0da91981d7131ae"
                    },
                    "mined_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "number",
                    "hash",
                    "mined_at"
                ]
            },
            "EvmBridgeEffect": {
                "properties": {
                    "bridge_name": {
                        "type": "string"
                    },
                    "source": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmBridgeEffectSourceNative"
                            },
                            {
                                "$ref": "#/components/schemas/EvmBridgeEffectSourceErc20"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "erc20": "#/components/schemas/EvmBridgeEffectSourceErc20",
                                "native": "#/components/schemas/EvmBridgeEffectSourceNative"
                            }
                        }
                    },
                    "destination": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmBridgeEffectKnownDestination"
                            },
                            {
                                "$ref": "#/components/schemas/EvmBridgeEffectUnknownDestination"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "known_target_chain": "#/components/schemas/EvmBridgeEffectKnownDestination",
                                "unknown_target_chain": "#/components/schemas/EvmBridgeEffectUnknownDestination"
                            }
                        }
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "bridge_name",
                    "source",
                    "destination",
                    "amount"
                ]
            },
            "EvmBridgeEffectKnownDestination": {
                "properties": {
                    "type": {
                        "enum": [
                            "known_target_chain"
                        ],
                        "type": "string"
                    },
                    "dest_address": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "dest_chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "dest_address",
                    "dest_chain"
                ]
            },
            "EvmBridgeEffectSourceErc20": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "source_address": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token": {
                        "$ref": "#/components/schemas/Erc20"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "source_address",
                    "token"
                ]
            },
            "EvmBridgeEffectSourceNative": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "source_address": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "source_address"
                ]
            },
            "EvmBridgeEffectUnknownDestination": {
                "properties": {
                    "type": {
                        "enum": [
                            "unknown_target_chain"
                        ],
                        "type": "string"
                    },
                    "dest_address": {
                        "type": "string"
                    },
                    "dest_chain": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "dest_chain"
                ]
            },
            "EvmChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "named_chain_id": {
                        "$ref": "#/components/schemas/EvmChainName"
                    },
                    "chain_id": {
                        "$ref": "#/components/schemas/EvmChainId"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/EvmChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "named_chain_id",
                    "chain_id",
                    "unique_id"
                ]
            },
            "EvmChainId": {
                "type": "integer",
                "enum": [
                    1,
                    5,
                    10,
                    56,
                    100,
                    137,
                    250,
                    324,
                    1030,
                    1100,
                    1101,
                    2222,
                    5000,
                    7700,
                    8453,
                    80001,
                    42161,
                    43114,
                    59144,
                    11155111
                ]
            },
            "EvmChainName": {
                "type": "string",
                "enum": [
                    "ethereum_mainnet",
                    "ethereum_goerli",
                    "optimism_mainnet",
                    "bsc_mainnet",
                    "gnosis_mainnet",
                    "polygon_mainnet",
                    "fantom_mainnet",
                    "arbitrum_mainnet",
                    "avalanche_chain",
                    "kava_mainnet",
                    "polygon_mumbai",
                    "ethereum_sepolia",
                    "polygon_zkevm_mainnet",
                    "zksync_era_mainnet",
                    "base_mainnet",
                    "linea_mainnet",
                    "canto_mainnet",
                    "conflux_mainnet",
                    "mantle_mainnet",
                    "dymension_mainnet"
                ]
            },
            "EvmChainRequest": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/EvmChainName"
                    },
                    {
                        "$ref": "#/components/schemas/EvmChainId"
                    },
                    {
                        "$ref": "#/components/schemas/EvmChainUniqueId"
                    }
                ]
            },
            "EvmChainUniqueId": {
                "type": "string",
                "enum": [
                    "evm_1",
                    "evm_5",
                    "evm_10",
                    "evm_56",
                    "evm_100",
                    "evm_137",
                    "evm_250",
                    "evm_324",
                    "evm_1030",
                    "evm_1100",
                    "evm_1101",
                    "evm_2222",
                    "evm_5000",
                    "evm_7700",
                    "evm_8453",
                    "evm_80001",
                    "evm_42161",
                    "evm_43114",
                    "evm_59144",
                    "evm_11155111",
                    "evm_ethereum_mainnet",
                    "evm_ethereum_goerli",
                    "evm_optimism_mainnet",
                    "evm_bsc_mainnet",
                    "evm_gnosis_mainnet",
                    "evm_polygon_mainnet",
                    "evm_fantom_mainnet",
                    "evm_arbitrum_mainnet",
                    "evm_avalanche_chain",
                    "evm_kava_mainnet",
                    "evm_polygon_mumbai",
                    "evm_ethereum_sepolia",
                    "evm_polygon_zkevm_mainnet",
                    "evm_zksync_era_mainnet",
                    "evm_base_mainnet",
                    "evm_linea_mainnet",
                    "evm_canto_mainnet",
                    "evm_conflux_mainnet",
                    "evm_mantle_mainnet",
                    "evm_dymension_mainnet"
                ]
            },
            "EvmContractMetadata": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "dapp": {
                        "$ref": "#/components/schemas/Dapp"
                    },
                    "is_verified": {
                        "type": "boolean"
                    },
                    "token": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/Erc20"
                            },
                            {
                                "$ref": "#/components/schemas/Erc721"
                            },
                            {
                                "$ref": "#/components/schemas/Erc1155"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "erc1155": "#/components/schemas/Erc1155",
                                "erc20": "#/components/schemas/Erc20",
                                "erc721": "#/components/schemas/Erc721"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "is_verified"
                ]
            },
            "EvmDataRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EvmDataRequestBase64"
                    },
                    {
                        "$ref": "#/components/schemas/EvmDataRequestFullDetails"
                    },
                    {
                        "$ref": "#/components/schemas/EvmDataRequestHex"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "base64": "#/components/schemas/EvmDataRequestBase64",
                        "full_details": "#/components/schemas/EvmDataRequestFullDetails",
                        "hex": "#/components/schemas/EvmDataRequestHex"
                    }
                }
            },
            "EvmDataRequestBase64": {
                "properties": {
                    "type": {
                        "enum": [
                            "base64"
                        ],
                        "type": "string"
                    },
                    "raw_data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "raw_data"
                ]
            },
            "EvmDataRequestFullDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "full_details"
                        ],
                        "type": "string"
                    },
                    "method_name": {
                        "type": "string"
                    },
                    "method_arguments": {
                        "type": "object"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "method_name",
                    "method_arguments"
                ]
            },
            "EvmDataRequestHex": {
                "properties": {
                    "type": {
                        "enum": [
                            "hex"
                        ],
                        "type": "string"
                    },
                    "hex_data": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "hex_data"
                ]
            },
            "EvmDynamicSuggestedFees": {
                "properties": {
                    "type": {
                        "enum": [
                            "dynamic"
                        ],
                        "type": "string"
                    },
                    "low": {
                        "$ref": "#/components/schemas/DynamicGasFields"
                    },
                    "medium": {
                        "$ref": "#/components/schemas/DynamicGasFields"
                    },
                    "high": {
                        "$ref": "#/components/schemas/DynamicGasFields"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "low",
                    "medium",
                    "high"
                ]
            },
            "EvmEffects": {
                "properties": {
                    "balance_changes": {
                        "items": {
                            "$ref": "#/components/schemas/EvmBalanceChangeEffect"
                        },
                        "type": "array"
                    },
                    "transfers": {
                        "items": {
                            "$ref": "#/components/schemas/EvmTransferEffect"
                        },
                        "type": "array"
                    },
                    "allowances": {
                        "items": {
                            "$ref": "#/components/schemas/AllowanceEffect"
                        },
                        "type": "array"
                    },
                    "bridge": {
                        "items": {
                            "$ref": "#/components/schemas/EvmBridgeEffect"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "balance_changes",
                    "transfers",
                    "allowances",
                    "bridge"
                ]
            },
            "EvmErc1155Asset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "evm_erc1155_asset"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token",
                    "token_id"
                ]
            },
            "EvmErc1155AssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc1155"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EvmAddressRequest"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "token",
                    "token_id"
                ]
            },
            "EvmErc20Asset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "evm_erc20_asset"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token"
                ]
            },
            "EvmErc20AssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc20"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EvmAddressRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "token"
                ]
            },
            "EvmErc721Asset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "evm_erc721_asset"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type",
                    "token",
                    "token_id"
                ]
            },
            "EvmErc721AssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "erc721"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EvmAddressRequest"
                    },
                    "token_id": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "token",
                    "token_id"
                ]
            },
            "EvmGasEstimation": {
                "properties": {
                    "gas_limit": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "fiat_price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "gas_limit"
                ]
            },
            "EvmLegacySuggestedFees": {
                "properties": {
                    "type": {
                        "enum": [
                            "legacy"
                        ],
                        "type": "string"
                    },
                    "low": {
                        "$ref": "#/components/schemas/LegacyGasFields"
                    },
                    "medium": {
                        "$ref": "#/components/schemas/LegacyGasFields"
                    },
                    "high": {
                        "$ref": "#/components/schemas/LegacyGasFields"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "low",
                    "medium",
                    "high"
                ]
            },
            "EvmMessage": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "evm_message_type": {
                        "$ref": "#/components/schemas/EvmMessageType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/EvmMessageState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/EvmMessageStateChange"
                        },
                        "type": "array"
                    },
                    "raw_data": {
                        "type": "string"
                    },
                    "typed_data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UnknownTypedMessageEvmMessage"
                            },
                            {
                                "$ref": "#/components/schemas/PermitTypedMessageEvmMessage"
                            },
                            {
                                "$ref": "#/components/schemas/Permit2TypedMessageEvmMessage"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "permit": "#/components/schemas/PermitTypedMessageEvmMessage",
                                "permit2": "#/components/schemas/Permit2TypedMessageEvmMessage",
                                "unknown": "#/components/schemas/UnknownTypedMessageEvmMessage"
                            }
                        }
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "direction",
                    "type",
                    "evm_message_type",
                    "state",
                    "state_changes",
                    "raw_data",
                    "vault",
                    "chain"
                ]
            },
            "EvmMessageDomainData": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "chain_id": {
                        "$ref": "#/components/schemas/EvmChainId"
                    },
                    "verifying_contract": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "salt": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object"
            },
            "EvmMessageState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "completed",
                    "error_signing",
                    "aborted"
                ]
            },
            "EvmMessageStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "prices": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/EvmPrices"
                    },
                    "asset_prices": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/EvmMessageState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/EvmMessageState"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "prices",
                    "asset_prices",
                    "new_state"
                ]
            },
            "EvmMessageType": {
                "type": "string",
                "enum": [
                    "personal_message_type",
                    "typed_message_type"
                ]
            },
            "EvmNativeAsset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "type": {
                        "enum": [
                            "evm_native_asset"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "EvmNativeAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain"
                ]
            },
            "EvmNativeCurrencyBalanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "address",
                    "diff"
                ]
            },
            "EvmNativeCurrencyTransfer": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "from",
                    "to",
                    "amount"
                ]
            },
            "EvmNativeTransferDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "native_transfer"
                        ],
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "is_internal": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "direction"
                ]
            },
            "EvmPrices": {
                "properties": {
                    "native_currency_price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "token_prices": {
                        "items": {
                            "$ref": "#/components/schemas/PricedErc20"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "token_prices"
                ]
            },
            "EvmReversion": {
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/EvmReversionState"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "state"
                ]
            },
            "EvmReversionState": {
                "type": "string",
                "enum": [
                    "not_reverted",
                    "unknown_revert",
                    "contract_asserted",
                    "out_of_gas",
                    "max_fee_less_than_block_base_fee",
                    "base_fee_exceeds_gas_limit",
                    "insufficient_funds_gas_and_value",
                    "invalid_input",
                    "transaction_rejected",
                    "gas_limit_exceeds_block_limit"
                ]
            },
            "EvmSuggestedFees": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "fees": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmLegacySuggestedFees"
                            },
                            {
                                "$ref": "#/components/schemas/EvmDynamicSuggestedFees"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "dynamic": "#/components/schemas/EvmDynamicSuggestedFees",
                                "legacy": "#/components/schemas/EvmLegacySuggestedFees"
                            }
                        }
                    },
                    "chain_unique_id": {
                        "$ref": "#/components/schemas/EvmChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "fees",
                    "chain_unique_id"
                ]
            },
            "EvmTransaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "evm_transaction_type_details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EvmNativeTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/TokenTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/AllowanceDetails"
                            },
                            {
                                "$ref": "#/components/schemas/ContractCallDetails"
                            },
                            {
                                "$ref": "#/components/schemas/BridgeDetails"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "allowance": "#/components/schemas/AllowanceDetails",
                                "contract_call": "#/components/schemas/ContractCallDetails",
                                "cross_chain_bridge": "#/components/schemas/BridgeDetails",
                                "native_transfer": "#/components/schemas/EvmNativeTransferDetails",
                                "token_transfer": "#/components/schemas/TokenTransferDetails"
                            }
                        }
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "parsed_data": {
                        "$ref": "#/components/schemas/EvmTransactionParsedData"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 66,
                        "minLength": 66,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x780f21260f89d610f24eed21b34d29229611a37e0003e83dd0da91981d7131ae"
                    },
                    "nonce": {
                        "type": "integer"
                    },
                    "block": {
                        "$ref": "#/components/schemas/EvmBlockData"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/EvmTransactionResult"
                    },
                    "simulation_status_result": {
                        "$ref": "#/components/schemas/SimulationStatusResult"
                    },
                    "mined_result": {
                        "$ref": "#/components/schemas/EvmTransactionResult"
                    },
                    "gas_submitted": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/LegacyGas"
                            },
                            {
                                "$ref": "#/components/schemas/DynamicGas"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "dynamic": "#/components/schemas/DynamicGas",
                                "legacy": "#/components/schemas/LegacyGas"
                            }
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/EvmTransactionState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/EvmTransactionStateChange"
                        },
                        "type": "array"
                    },
                    "parent_transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "child_transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "funding_for_transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "funded_by_transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "funded_by_vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "current_preceding_pushed_to_blockchain_transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_cancelation": {
                        "type": "boolean"
                    },
                    "is_acceleration": {
                        "type": "boolean"
                    },
                    "use_secure_node": {
                        "type": "boolean"
                    },
                    "explorer_url": {
                        "example": "https://etherscan.io/tx/0x123",
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "raw_transaction": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "direction",
                    "type",
                    "evm_transaction_type_details",
                    "chain",
                    "from",
                    "to",
                    "value",
                    "data",
                    "parsed_data",
                    "gas_submitted",
                    "state",
                    "state_changes",
                    "is_cancelation",
                    "is_acceleration",
                    "use_secure_node"
                ]
            },
            "EvmTransactionMethodArgument": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "enriched_address": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "value"
                ]
            },
            "EvmTransactionParsedData": {
                "properties": {
                    "method": {
                        "type": "string"
                    },
                    "method_arguments": {
                        "items": {
                            "$ref": "#/components/schemas/EvmTransactionMethodArgument"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "method",
                    "method_arguments"
                ]
            },
            "EvmTransactionResult": {
                "properties": {
                    "reversion": {
                        "$ref": "#/components/schemas/EvmReversion"
                    },
                    "gas_debit": {
                        "$ref": "#/components/schemas/GasDebit"
                    },
                    "effects": {
                        "$ref": "#/components/schemas/EvmEffects"
                    }
                },
                "type": "object",
                "required": [
                    "reversion",
                    "gas_debit",
                    "effects"
                ]
            },
            "EvmTransactionState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "pushed_to_blockchain",
                    "queued",
                    "mined",
                    "completed",
                    "aborted",
                    "error_signing",
                    "error_pushing_to_blockchain",
                    "mined_reverted",
                    "completed_reverted",
                    "stuck",
                    "accelerating",
                    "canceling",
                    "accelerated",
                    "cancelled"
                ]
            },
            "EvmTransactionStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "prices": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/EvmPrices"
                    },
                    "asset_prices": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/EvmTransactionState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/EvmTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "prices",
                    "asset_prices",
                    "new_state"
                ]
            },
            "EvmTransactionType": {
                "type": "string",
                "enum": [
                    "native_transfer",
                    "token_transfer",
                    "allowance",
                    "contract_call",
                    "cross_chain_bridge"
                ]
            },
            "EvmTransferEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EvmNativeCurrencyTransfer"
                    },
                    {
                        "$ref": "#/components/schemas/Erc20Transfer"
                    },
                    {
                        "$ref": "#/components/schemas/Erc721Transfer"
                    },
                    {
                        "$ref": "#/components/schemas/Erc1155Transfer"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "erc1155": "#/components/schemas/Erc1155Transfer",
                        "erc20": "#/components/schemas/Erc20Transfer",
                        "erc721": "#/components/schemas/Erc721Transfer",
                        "native": "#/components/schemas/EvmNativeCurrencyTransfer"
                    }
                }
            },
            "EvmVault": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "derivation_path": {
                        "type": "string",
                        "deprecated": true,
                        "example": "m/44/60/0/0/0"
                    },
                    "public_key_compressed": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "derivation_info": {
                        "$ref": "#/components/schemas/VaultDerivationInfo"
                    },
                    "keyset": {
                        "$ref": "#/components/schemas/KeysetRef"
                    },
                    "key_holder": {
                        "$ref": "#/components/schemas/EndUserRef"
                    },
                    "vault_group": {
                        "$ref": "#/components/schemas/VaultGroupRef"
                    },
                    "pending_vault_group_action": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionAdd"
                            },
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "add": "#/components/schemas/PendingVaultGroupActionAdd",
                                "remove": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultState"
                    },
                    "type": {
                        "enum": [
                            "evm"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "created_by",
                    "derivation_path",
                    "public_key_compressed",
                    "derivation_info",
                    "keyset",
                    "vault_group",
                    "state",
                    "type",
                    "address"
                ]
            },
            "FeePriorityLevel": {
                "type": "string",
                "enum": [
                    "custom",
                    "low",
                    "medium",
                    "high"
                ]
            },
            "FeePriorityLevelRequest": {
                "type": "string",
                "enum": [
                    "low",
                    "medium",
                    "high"
                ]
            },
            "FeePriorityRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "priority"
                        ],
                        "type": "string"
                    },
                    "priority_level": {
                        "$ref": "#/components/schemas/FeePriorityLevelRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "priority_level"
                ]
            },
            "FetchAssetPricesRequest": {
                "properties": {
                    "asset_identifiers": {
                        "items": {
                            "$ref": "#/components/schemas/AssetIdentifierRequest"
                        },
                        "type": "array",
                        "minItems": 1
                    }
                },
                "type": "object",
                "required": [
                    "asset_identifiers"
                ]
            },
            "FetchAssetPricesResponse": {
                "properties": {
                    "priced_assets": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "priced_assets"
                ]
            },
            "FiatCurrency": {
                "properties": {
                    "currency_symbol": {
                        "$ref": "#/components/schemas/FiatCurrencySymbol"
                    },
                    "decimals": {
                        "type": "integer",
                        "minimum": 0.0
                    }
                },
                "type": "object",
                "required": [
                    "currency_symbol",
                    "decimals"
                ]
            },
            "FiatCurrencySymbol": {
                "type": "string",
                "enum": [
                    "usd"
                ]
            },
            "FiatValue": {
                "properties": {
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "currency": {
                        "$ref": "#/components/schemas/FiatCurrency"
                    }
                },
                "type": "object",
                "required": [
                    "value",
                    "currency"
                ]
            },
            "FordefiRpcEndpoint": {
                "properties": {
                    "type": {
                        "enum": [
                            "fordefi_suggested"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "GasDebit": {
                "properties": {
                    "gas_used": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "gas_price": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "total_fee": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "fiat_price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "gas_used",
                    "gas_price",
                    "total_fee"
                ]
            },
            "GasPriorityLevel": {
                "type": "string",
                "enum": [
                    "custom",
                    "low",
                    "medium",
                    "high"
                ]
            },
            "GasPriorityLevelRequest": {
                "type": "string",
                "enum": [
                    "low",
                    "medium",
                    "high"
                ]
            },
            "GasPriorityRequest": {
                "properties": {
                    "gas_limit": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "type": {
                        "enum": [
                            "priority"
                        ],
                        "type": "string"
                    },
                    "priority_level": {
                        "$ref": "#/components/schemas/GasPriorityLevelRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "priority_level"
                ]
            },
            "GasType": {
                "type": "string",
                "enum": [
                    "dynamic",
                    "legacy"
                ]
            },
            "GetAdminQuorumResponse": {
                "properties": {
                    "current_quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "max_allowed_quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "min_allowed_quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "proposed_change": {
                        "$ref": "#/components/schemas/AdminQuorumProposal"
                    }
                },
                "type": "object",
                "required": [
                    "current_quorum_size",
                    "max_allowed_quorum_size",
                    "min_allowed_quorum_size"
                ]
            },
            "GetApiSignerInviteResponse": {
                "properties": {
                    "encrypted_invite": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_credentials": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_org_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_invite",
                    "encrypted_credentials",
                    "encrypted_org_key"
                ]
            },
            "GetBackupInfoResponse": {
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/BackupState"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BackupType"
                    },
                    "backup_admins": {
                        "items": {
                            "$ref": "#/components/schemas/ActionSigner"
                        },
                        "type": "array"
                    },
                    "backup_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "email_change_status": {
                        "$ref": "#/components/schemas/BackupEmailChageState"
                    },
                    "last_snapshot_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "public_key": {
                        "$ref": "#/components/schemas/BackupPublicKey"
                    },
                    "request_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "state",
                    "backup_admins",
                    "last_snapshot_at"
                ]
            },
            "GetBackupKeysResponse": {
                "properties": {
                    "has_backup": {
                        "type": "boolean"
                    },
                    "devices_public_keys": {
                        "items": {
                            "$ref": "#/components/schemas/BackupPublicKeyByDevice"
                        },
                        "type": "array"
                    },
                    "timestamped_signature": {
                        "$ref": "#/components/schemas/TimestampedSignature"
                    },
                    "device_shares_included": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "has_backup",
                    "devices_public_keys",
                    "timestamped_signature",
                    "device_shares_included"
                ]
            },
            "GetCurrentUserInfoResponse": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "organization_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "organization_name": {
                        "type": "string"
                    },
                    "impersonation_is_active": {
                        "type": "boolean"
                    },
                    "memberships": {
                        "items": {
                            "$ref": "#/components/schemas/OrganizationMembership"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "user",
                    "organization_id",
                    "organization_name",
                    "impersonation_is_active",
                    "memberships"
                ]
            },
            "GetCurrentUserOnboardingInfoResponse": {
                "properties": {
                    "onboardings": {
                        "items": {
                            "$ref": "#/components/schemas/OrganizationOnboarding"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "onboardings"
                ]
            },
            "GetDeleteUserPrerequisitesResponse": {
                "properties": {
                    "prerequisites": {
                        "items": {
                            "$ref": "#/components/schemas/DeleteUserPrerequisite"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "prerequisites"
                ]
            },
            "GetEncryptedMPCKeysResponse": {
                "properties": {
                    "encrypted_mpc_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_share_ecdsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_share_eddsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_share_ecdsa_stark": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_mpc_key",
                    "encrypted_share_ecdsa",
                    "encrypted_share_eddsa",
                    "encrypted_share_ecdsa_stark"
                ]
            },
            "GetEncryptedSharesResponse": {
                "properties": {
                    "encrypted_share_ecdsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_share_eddsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_share_ecdsa_stark": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_share_ecdsa",
                    "encrypted_share_eddsa",
                    "encrypted_share_ecdsa_stark"
                ]
            },
            "GetEndUserResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "external_id": {
                        "type": "string",
                        "example": "user|1234"
                    },
                    "last_login_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "external_id",
                    "last_login_at"
                ]
            },
            "GetImpersonationResponse": {
                "properties": {
                    "impersonator_user_email": {
                        "type": "string"
                    },
                    "impersonated_user_email": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "impersonator_user_email",
                    "impersonated_user_email"
                ]
            },
            "GetKeysetResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/OrganizationKeyset"
                    },
                    {
                        "$ref": "#/components/schemas/UserKeyset"
                    }
                ],
                "discriminator": {
                    "propertyName": "scope",
                    "mapping": {
                        "organization": "#/components/schemas/OrganizationKeyset",
                        "user": "#/components/schemas/UserKeyset"
                    }
                }
            },
            "GetMembershipOrganizationsResponse": {
                "properties": {
                    "authzero_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "authzero_ids"
                ]
            },
            "GetNextApiSignerTransactionResponse": {
                "properties": {
                    "transaction": {
                        "$ref": "#/components/schemas/Transaction"
                    }
                },
                "type": "object"
            },
            "GetNextApiSignerTransactionResponseV2": {
                "properties": {
                    "body": {
                        "$ref": "#/components/schemas/GetNextApiSignerTransactionResponseV2Body"
                    }
                },
                "type": "object"
            },
            "GetNextApiSignerTransactionResponseV2Body": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "transaction_type": {
                        "$ref": "#/components/schemas/TransactionType"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "transaction_type"
                ]
            },
            "GetOnboardingStateErrorType": {
                "type": "string",
                "enum": [
                    "unsupported_user_type"
                ]
            },
            "GetOwnedAssetResponse": {
                "$ref": "#/components/schemas/OwnedAsset"
            },
            "GetRpcEndpointsResponse": {
                "properties": {
                    "endpoints_by_chain": {
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/RpcEndpoint"
                            },
                            "type": "array"
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "required": [
                    "endpoints_by_chain"
                ]
            },
            "GetSuggestedFeesResponse": {
                "properties": {
                    "suggested_fees": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/SuggestedFees"
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "required": [
                    "suggested_fees"
                ]
            },
            "GetTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxSignature"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/EvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/EvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/BlackBoxSignature",
                        "cosmos_transaction": "#/components/schemas/CosmosTransaction",
                        "evm_message": "#/components/schemas/EvmMessage",
                        "evm_transaction": "#/components/schemas/EvmTransaction",
                        "solana_message": "#/components/schemas/SolanaMessage",
                        "solana_transaction": "#/components/schemas/SolanaTransaction",
                        "utxo_transaction": "#/components/schemas/UtxoTransaction"
                    }
                }
            },
            "GetUserGroupResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "users_count": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserGroupState"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "proposed_change": {
                        "$ref": "#/components/schemas/UserGroupChangeRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "users_count",
                    "state",
                    "modified_by"
                ]
            },
            "GetUserResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Person"
                    },
                    {
                        "$ref": "#/components/schemas/ApiUser"
                    },
                    {
                        "$ref": "#/components/schemas/ApiSigner"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_signer": "#/components/schemas/ApiSigner",
                        "api_user": "#/components/schemas/ApiUser",
                        "person": "#/components/schemas/Person"
                    }
                }
            },
            "GetVaultMetadataResponse": {
                "$ref": "#/components/schemas/VaultMetadata"
            },
            "GetVaultResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxVault"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosVault"
                    },
                    {
                        "$ref": "#/components/schemas/EvmVault"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaVault"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoVault"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box": "#/components/schemas/BlackBoxVault",
                        "cosmos": "#/components/schemas/CosmosVault",
                        "evm": "#/components/schemas/EvmVault",
                        "solana": "#/components/schemas/SolanaVault",
                        "utxo": "#/components/schemas/UtxoVault"
                    }
                }
            },
            "GetWebhooksVerificationKeyResponse": {
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "key"
                ]
            },
            "GroupRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "contacts_count": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "contacts_count"
                ]
            },
            "GroupUserRef": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PersonRef"
                    },
                    {
                        "$ref": "#/components/schemas/ApiUserRef"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_user": "#/components/schemas/ApiUserRef",
                        "person": "#/components/schemas/PersonRef"
                    }
                }
            },
            "InitiateSignSessionRequest": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object"
            },
            "InitiatorsCondition": {
                "properties": {
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/UserRef"
                        },
                        "type": "array"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "InitiatorsConditionRequest": {
                "properties": {
                    "user_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "user_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "InstructionError": {
                "properties": {
                    "error_type": {
                        "type": "string"
                    },
                    "instruction_index": {
                        "type": "integer"
                    },
                    "error_description": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "error_type",
                    "instruction_index"
                ]
            },
            "IntegerHashPayload": {
                "properties": {
                    "format": {
                        "enum": [
                            "hash_integer"
                        ],
                        "type": "string"
                    },
                    "hash_integer": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "hash_integer"
                ]
            },
            "IssueApiUserAuthTokenRequest": {
                "properties": {
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "user_type",
                    "user_id"
                ]
            },
            "IssueApiUserAuthTokenResponse": {
                "properties": {
                    "user_type": {
                        "enum": [
                            "api_user"
                        ],
                        "type": "string"
                    },
                    "access_token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "user_type",
                    "access_token"
                ]
            },
            "IssueAuthTokenForClientOauthResponse": {
                "properties": {
                    "access_token": {
                        "type": "string"
                    },
                    "token_type": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "access_token",
                    "token_type",
                    "expires_in"
                ]
            },
            "IssueAuthTokenForClientResponse": {
                "properties": {
                    "access_token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "access_token"
                ]
            },
            "IssueAuthTokenRequest": {
                "$ref": "#/components/schemas/IssueEndUserAuthTokenRequest"
            },
            "IssueAuthTokenResponse": {
                "$ref": "#/components/schemas/IssueEndUserAuthTokenResponse"
            },
            "IssueEndUserAuthTokenErrorType": {
                "type": "string",
                "enum": [
                    "cannot_issue_token_for_user_type"
                ]
            },
            "IssueEndUserAuthTokenRequest": {
                "properties": {
                    "user_type": {
                        "enum": [
                            "end_user"
                        ],
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "user_type",
                    "user_id"
                ]
            },
            "IssueEndUserAuthTokenResponse": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "expired_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "end_user"
                        ],
                        "type": "string"
                    },
                    "access_token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_id",
                    "expired_at",
                    "user_type",
                    "access_token"
                ]
            },
            "IssueInternalAuthTokenRequest": {
                "properties": {
                    "sub": {
                        "type": "string"
                    },
                    "expiration": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "sub"
                ]
            },
            "IssueInternalAuthTokenResponse": {
                "properties": {
                    "access_token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "access_token"
                ]
            },
            "KeyDerivationArgs": {
                "properties": {
                    "key_type": {
                        "$ref": "#/components/schemas/KeyType"
                    },
                    "coin_type": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "account_id": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "address_index": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "key_type",
                    "coin_type",
                    "account_id",
                    "address_index",
                    "keyset_id"
                ]
            },
            "KeyShares": {
                "properties": {
                    "device": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "platform": {
                        "items": {
                            "type": "string",
                            "example": "SGVsbG8="
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "KeyType": {
                "type": "string",
                "enum": [
                    "ecdsa_secp256k1",
                    "eddsa_ed25519",
                    "ecdsa_stark"
                ]
            },
            "Keyset": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/OrganizationKeyset"
                    },
                    {
                        "$ref": "#/components/schemas/UserKeyset"
                    }
                ],
                "discriminator": {
                    "propertyName": "scope",
                    "mapping": {
                        "organization": "#/components/schemas/OrganizationKeyset",
                        "user": "#/components/schemas/UserKeyset"
                    }
                }
            },
            "KeysetKey": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "xpub": {
                        "type": "string"
                    },
                    "encrypted_shares": {
                        "$ref": "#/components/schemas/KeyShares"
                    },
                    "chain_code": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "xpub",
                    "encrypted_shares",
                    "chain_code"
                ]
            },
            "KeysetRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "scope": {
                        "$ref": "#/components/schemas/KeysetScope"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "scope"
                ]
            },
            "KeysetScope": {
                "type": "string",
                "enum": [
                    "organization",
                    "user"
                ]
            },
            "KeysetSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "name_asc",
                    "name_desc",
                    "user_id_asc",
                    "user_id_desc"
                ]
            },
            "LegacyGas": {
                "properties": {
                    "price": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "priority": {
                        "$ref": "#/components/schemas/GasPriorityLevel"
                    },
                    "limit": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "type": {
                        "enum": [
                            "legacy"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "price",
                    "priority",
                    "limit",
                    "type"
                ]
            },
            "LegacyGasFields": {
                "properties": {
                    "price": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "price"
                ]
            },
            "LegacyGasRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "legacy"
                        ],
                        "type": "string"
                    },
                    "price": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "price"
                ]
            },
            "ListAddressBookContactResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "contacts": {
                        "items": {
                            "$ref": "#/components/schemas/AddressBookContact"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "contacts"
                ]
            },
            "ListAddressBookGroupsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/AddressBookGroup"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "groups"
                ]
            },
            "ListAssetsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "assets": {
                        "items": {
                            "$ref": "#/components/schemas/Asset"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "assets"
                ]
            },
            "ListAuthTokensResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "auth_tokens": {
                        "items": {
                            "$ref": "#/components/schemas/AuthToken"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "auth_tokens"
                ]
            },
            "ListBlockchainsResponse": {
                "properties": {
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "chains"
                ]
            },
            "ListEnclaveKeysResponse": {
                "properties": {
                    "sign_key": {
                        "$ref": "#/components/schemas/AttestedSigningKey"
                    },
                    "encryption_key": {
                        "$ref": "#/components/schemas/SignedEncryptionKey"
                    }
                },
                "type": "object",
                "required": [
                    "sign_key",
                    "encryption_key"
                ]
            },
            "ListEndUsersResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "end_users": {
                        "items": {
                            "$ref": "#/components/schemas/EndUser"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "end_users"
                ]
            },
            "ListKeysetsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "keysets": {
                        "items": {
                            "$ref": "#/components/schemas/Keyset"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "keysets"
                ]
            },
            "ListOrganizationsResponse": {
                "properties": {
                    "organizations": {
                        "items": {
                            "$ref": "#/components/schemas/OrganizationInfo"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "organizations"
                ]
            },
            "ListOwnedAssetsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "owned_assets": {
                        "items": {
                            "$ref": "#/components/schemas/OwnedAsset"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "owned_assets"
                ]
            },
            "ListTransactionResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "transactions": {
                        "items": {
                            "$ref": "#/components/schemas/Transaction"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "transactions"
                ]
            },
            "ListUserActionsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "actions": {
                        "items": {
                            "$ref": "#/components/schemas/UserAction"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "actions"
                ]
            },
            "ListUserGroupsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroup"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "user_groups"
                ]
            },
            "ListUsersExtResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/UserExt"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "users"
                ]
            },
            "ListUsersResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "users"
                ]
            },
            "ListVaultAddressesResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "addresses": {
                        "items": {
                            "$ref": "#/components/schemas/UtxoVaultAddress"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "addresses"
                ]
            },
            "ListVaultGroupsFilterByAccessLevel": {
                "type": "string",
                "enum": [
                    "view",
                    "create_edit",
                    "all"
                ]
            },
            "ListVaultGroupsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "vault_groups": {
                        "items": {
                            "$ref": "#/components/schemas/VaultGroup"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "vault_groups"
                ]
            },
            "ListVaultsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "vaults": {
                        "items": {
                            "$ref": "#/components/schemas/Vault"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "vaults"
                ]
            },
            "ListVaultsWithAssetsResponse": {
                "properties": {
                    "total": {
                        "type": "integer"
                    },
                    "page": {
                        "type": "integer"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "vaults": {
                        "items": {
                            "$ref": "#/components/schemas/VaultWithAssets"
                        },
                        "type": "array"
                    },
                    "is_chains_filter_disabled": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "total",
                    "page",
                    "size",
                    "vaults",
                    "is_chains_filter_disabled"
                ]
            },
            "ListWebhooksResponse": {
                "properties": {
                    "webhooks": {
                        "items": {
                            "$ref": "#/components/schemas/Webhook"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "webhooks"
                ]
            },
            "LogClientType": {
                "type": "string",
                "enum": [
                    "web",
                    "extension",
                    "api_signer",
                    "go_sdk_lib"
                ]
            },
            "LogLevel": {
                "type": "string",
                "enum": [
                    "debug",
                    "info",
                    "warning",
                    "error",
                    "panic",
                    "fatal"
                ]
            },
            "LogMessage": {
                "properties": {
                    "level": {
                        "$ref": "#/components/schemas/LogLevel"
                    },
                    "message": {
                        "type": "string",
                        "minLength": 1
                    },
                    "arguments": {
                        "items": {
                            "$ref": "#/components/schemas/LogMessageArgument"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "level",
                    "message"
                ]
            },
            "LogMessageArgument": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value"
                ]
            },
            "LoginEndUserRequest": {
                "properties": {
                    "os": {
                        "type": "string"
                    },
                    "os_version": {
                        "type": "string"
                    },
                    "device_model": {
                        "type": "string"
                    },
                    "device_abi": {
                        "type": "string"
                    },
                    "sdk_version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "os"
                ]
            },
            "ManagedTransactionData": {
                "properties": {
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "device_signing_request": {
                        "$ref": "#/components/schemas/ActionSigningRequest"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "signed_create_request": {
                        "$ref": "#/components/schemas/SignedRawData"
                    },
                    "signer_type": {
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "error_pushing_to_blockchain_message": {
                        "type": "string"
                    },
                    "original_error_pushing_to_blockchain_message": {
                        "type": "string"
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "idempotence_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "has_current_user_vault_permissions": {
                        "type": "boolean"
                    },
                    "batch_data": {
                        "$ref": "#/components/schemas/BatchData"
                    },
                    "push_mode": {
                        "$ref": "#/components/schemas/PushMode"
                    }
                },
                "type": "object",
                "required": [
                    "created_by",
                    "signer_type",
                    "risks",
                    "vault",
                    "has_current_user_vault_permissions"
                ]
            },
            "MasterPublicKey": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "xpub": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "xpub"
                ]
            },
            "MessagesList": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AminoMessagesList"
                    },
                    {
                        "$ref": "#/components/schemas/DirectMessagesList"
                    },
                    {
                        "$ref": "#/components/schemas/MinedMessagesList"
                    }
                ],
                "discriminator": {
                    "propertyName": "format",
                    "mapping": {
                        "amino": "#/components/schemas/AminoMessagesList",
                        "direct": "#/components/schemas/DirectMessagesList",
                        "mined": "#/components/schemas/MinedMessagesList"
                    }
                }
            },
            "MigrateBackupRequest": {
                "properties": {
                    "encrypted_shares_for_backup": {
                        "items": {
                            "$ref": "#/components/schemas/EncryptedBackupShareByDevice"
                        },
                        "type": "array",
                        "minItems": 2
                    },
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "device_shares_included": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array",
                        "minItems": 1
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_shares_for_backup",
                    "signature",
                    "device_shares_included"
                ]
            },
            "MinedMessagesList": {
                "properties": {
                    "format": {
                        "enum": [
                            "mined"
                        ],
                        "type": "string"
                    },
                    "messages": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "messages"
                ]
            },
            "MinedSignDoc": {
                "properties": {
                    "format": {
                        "enum": [
                            "mined"
                        ],
                        "type": "string"
                    },
                    "messages": {
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "format",
                    "messages",
                    "chain"
                ]
            },
            "MpcMessage": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "message_number": {
                        "type": "integer"
                    },
                    "protocol_name": {
                        "type": "string"
                    },
                    "is_last_message": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "message",
                    "signature",
                    "message_number",
                    "protocol_name",
                    "is_last_message"
                ]
            },
            "MultiChainAccount": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosAccountRepr"
                    },
                    {
                        "$ref": "#/components/schemas/EvmAccountRepr"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaAccountRepr"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoAccountRepr"
                    }
                ],
                "discriminator": {
                    "propertyName": "chain_type",
                    "mapping": {
                        "cosmos": "#/components/schemas/CosmosAccountRepr",
                        "evm": "#/components/schemas/EvmAccountRepr",
                        "solana": "#/components/schemas/SolanaAccountRepr",
                        "utxo": "#/components/schemas/UtxoAccountRepr"
                    }
                }
            },
            "NextApiSignerTransactionRequestV3": {
                "properties": {
                    "protocol_version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "protocol_version"
                ]
            },
            "NextApiSignerTransactionResponseV3": {
                "properties": {
                    "body": {
                        "$ref": "#/components/schemas/NextApiSignerTransactionResponseV3Body"
                    }
                },
                "type": "object"
            },
            "NextApiSignerTransactionResponseV3Body": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "register_sign_info": {
                        "$ref": "#/components/schemas/RegisterTransactionSignSessionResponse"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "register_sign_info"
                ]
            },
            "OnboardingType": {
                "type": "string",
                "enum": [
                    "user",
                    "organization",
                    "device",
                    "user_pending_pin_generation",
                    "device_pending_pin_generation"
                ]
            },
            "OrganizationInfo": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/OrganizationType"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "type"
                ]
            },
            "OrganizationKeyset": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "desired_key_types": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array"
                    },
                    "ecdsa": {
                        "$ref": "#/components/schemas/KeysetKey"
                    },
                    "eddsa": {
                        "$ref": "#/components/schemas/KeysetKey"
                    },
                    "ecdsa_stark": {
                        "$ref": "#/components/schemas/KeysetKey"
                    },
                    "encrypted_device_shares_backups": {
                        "items": {
                            "$ref": "#/components/schemas/EncryptedDeviceSharesBackup"
                        },
                        "type": "array"
                    },
                    "scope": {
                        "enum": [
                            "organization"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "scope"
                ]
            },
            "OrganizationMembership": {
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "organization_name": {
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserState"
                    },
                    "is_new_device_provisioning": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "is_end_users_supported_organization": {
                        "type": "boolean"
                    },
                    "organization_activated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "days_left_to_backup": {
                        "type": "integer"
                    },
                    "organization_has_backup": {
                        "type": "boolean"
                    },
                    "active_device_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "organization_id",
                    "organization_name",
                    "state",
                    "is_new_device_provisioning",
                    "is_end_users_supported_organization",
                    "organization_activated_at",
                    "organization_has_backup"
                ]
            },
            "OrganizationOnboarding": {
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "organization_name": {
                        "type": "string"
                    },
                    "device_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "onboarding_type": {
                        "$ref": "#/components/schemas/OnboardingType"
                    },
                    "invited_to_organization_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "organization_id",
                    "organization_name",
                    "device_id",
                    "onboarding_type",
                    "invited_to_organization_at"
                ]
            },
            "OrganizationType": {
                "type": "string",
                "enum": [
                    "testing",
                    "customer",
                    "internal",
                    "trial",
                    "e2e"
                ]
            },
            "OwnedAsset": {
                "properties": {
                    "asset": {
                        "$ref": "#/components/schemas/Asset"
                    },
                    "balance": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "deprecated": true,
                        "example": "1000000000000000000"
                    },
                    "balances": {
                        "$ref": "#/components/schemas/Balances"
                    }
                },
                "type": "object",
                "required": [
                    "asset",
                    "balance",
                    "balances"
                ]
            },
            "PendingUserChange": {
                "properties": {
                    "new_role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "trader"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "new_role"
                ]
            },
            "PendingUserChangeRef": {
                "properties": {
                    "new_role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "trader"
                        ]
                    },
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "new_role",
                    "change_request_id"
                ]
            },
            "PendingVaultGroupActionAdd": {
                "properties": {
                    "type": {
                        "enum": [
                            "add"
                        ],
                        "type": "string"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_group_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault_group_id",
                    "vault_group_name"
                ]
            },
            "PendingVaultGroupActionRemove": {
                "properties": {
                    "type": {
                        "enum": [
                            "remove"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "Permit2TypedMessageEvmMessage": {
                "properties": {
                    "domain": {
                        "$ref": "#/components/schemas/EvmMessageDomainData"
                    },
                    "type": {
                        "enum": [
                            "permit2"
                        ],
                        "type": "string"
                    },
                    "spender": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "deadline": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "token": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "expiration": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "nonce": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "type",
                    "spender",
                    "deadline",
                    "token",
                    "value",
                    "expiration",
                    "nonce"
                ]
            },
            "PermitTypedMessageEvmMessage": {
                "properties": {
                    "domain": {
                        "$ref": "#/components/schemas/EvmMessageDomainData"
                    },
                    "type": {
                        "enum": [
                            "permit"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "spender": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "deadline": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "nonce": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "type",
                    "owner",
                    "spender",
                    "value",
                    "deadline",
                    "nonce"
                ]
            },
            "Person": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "person"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "example": "John Doe",
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserState"
                    },
                    "is_new_device_provisioning": {
                        "type": "boolean"
                    },
                    "welcome_message_acknowledged_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_addition_to_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_removal_from_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_change": {
                        "$ref": "#/components/schemas/PendingUserChangeRef"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "email",
                    "state",
                    "is_new_device_provisioning",
                    "welcome_message_acknowledged_at",
                    "role"
                ]
            },
            "PersonExt": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "user_type": {
                        "enum": [
                            "person"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "example": "John Doe",
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserState"
                    },
                    "is_new_device_provisioning": {
                        "type": "boolean"
                    },
                    "welcome_message_acknowledged_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_addition_to_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_removal_from_user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "pending_change": {
                        "$ref": "#/components/schemas/PendingUserChangeRef"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "user_type",
                    "email",
                    "state",
                    "is_new_device_provisioning",
                    "welcome_message_acknowledged_at",
                    "role"
                ]
            },
            "PersonOnboardingState": {
                "type": "string",
                "enum": [
                    "pending_approval",
                    "pending_device_invite",
                    "pending_device_activation",
                    "active",
                    "deleted"
                ]
            },
            "PersonOnboardingStateResponse": {
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/PersonOnboardingState"
                    }
                },
                "type": "object",
                "required": [
                    "state"
                ]
            },
            "PersonRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_type": {
                        "enum": [
                            "person"
                        ],
                        "type": "string"
                    },
                    "name": {
                        "example": "John Doe",
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserState"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user_type",
                    "email",
                    "state",
                    "role"
                ]
            },
            "PolicyMatch": {
                "properties": {
                    "is_default": {
                        "type": "boolean"
                    },
                    "rule_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "rule_name": {
                        "type": "string"
                    },
                    "action_type": {
                        "$ref": "#/components/schemas/TransactionPolicyMatchActionType"
                    }
                },
                "type": "object",
                "required": [
                    "is_default",
                    "rule_id",
                    "rule_name",
                    "action_type"
                ]
            },
            "PreconditionFailedError": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "system_error_code": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "PredictTransactionErrorType": {
                "type": "string",
                "enum": [
                    "vault_not_found",
                    "invalid_evm_message",
                    "invalid_evm_transaction_data",
                    "reverted_transaction",
                    "transaction_to_non_contract",
                    "vault_type_mismatch",
                    "dust_not_allowed"
                ]
            },
            "PredictTransactionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/TransactionDetailsCosmosTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsEvmMessageRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsEvmTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsSolanaMessageRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsSolanaTransactionRequest"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionDetailsUtxoTransactionRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_transaction": "#/components/schemas/TransactionDetailsCosmosTransactionRequest",
                        "evm_message": "#/components/schemas/TransactionDetailsEvmMessageRequest",
                        "evm_transaction": "#/components/schemas/TransactionDetailsEvmTransactionRequest",
                        "solana_message": "#/components/schemas/TransactionDetailsSolanaMessageRequest",
                        "solana_transaction": "#/components/schemas/TransactionDetailsSolanaTransactionRequest",
                        "utxo_transaction": "#/components/schemas/TransactionDetailsUtxoTransactionRequest"
                    }
                }
            },
            "PredictTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PredictedCosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedEvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedEvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedSolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedSolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/PredictedUtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos_transaction": "#/components/schemas/PredictedCosmosTransaction",
                        "evm_message": "#/components/schemas/PredictedEvmMessage",
                        "evm_transaction": "#/components/schemas/PredictedEvmTransaction",
                        "solana_message": "#/components/schemas/PredictedSolanaMessage",
                        "solana_transaction": "#/components/schemas/PredictedSolanaTransaction",
                        "utxo_transaction": "#/components/schemas/PredictedUtxoTransaction"
                    }
                }
            },
            "PredictedCosmosTransaction": {
                "properties": {
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/CosmosTransactionResult"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "policy_match",
                    "risks",
                    "type",
                    "expected_result",
                    "chain"
                ]
            },
            "PredictedEvmMessage": {
                "properties": {
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    }
                },
                "type": "object",
                "required": [
                    "policy_match",
                    "risks",
                    "type",
                    "chain"
                ]
            },
            "PredictedEvmTransaction": {
                "properties": {
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/EvmTransactionResult"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedEvmChain"
                    },
                    "simulation_status_result": {
                        "$ref": "#/components/schemas/SimulationStatusResult"
                    }
                },
                "type": "object",
                "required": [
                    "policy_match",
                    "risks",
                    "type",
                    "expected_result",
                    "chain",
                    "simulation_status_result"
                ]
            },
            "PredictedSolanaMessage": {
                "properties": {
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "solana_message"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    }
                },
                "type": "object",
                "required": [
                    "policy_match",
                    "risks",
                    "type",
                    "chain"
                ]
            },
            "PredictedSolanaTransaction": {
                "properties": {
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/SolanaTransactionResult"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "simulation_status_result": {
                        "$ref": "#/components/schemas/SimulationStatusResult"
                    }
                },
                "type": "object",
                "required": [
                    "policy_match",
                    "risks",
                    "type",
                    "expected_result",
                    "chain",
                    "simulation_status_result"
                ]
            },
            "PredictedUtxoTransaction": {
                "properties": {
                    "policy_match": {
                        "$ref": "#/components/schemas/PolicyMatch"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "risks": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRisk"
                        },
                        "type": "array"
                    },
                    "type": {
                        "enum": [
                            "utxo_transaction"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/UtxoTransactionResult"
                    }
                },
                "type": "object",
                "required": [
                    "policy_match",
                    "risks",
                    "type",
                    "chain",
                    "expected_result"
                ]
            },
            "Price": {
                "properties": {
                    "price": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "fiat_currency": {
                        "$ref": "#/components/schemas/FiatCurrency"
                    }
                },
                "type": "object",
                "required": [
                    "price",
                    "fiat_currency"
                ]
            },
            "PricedAsset": {
                "properties": {
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EnrichedAssetIdentifier"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "asset_identifier"
                ]
            },
            "PricedErc20": {
                "properties": {
                    "price": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "fiat_currency": {
                        "$ref": "#/components/schemas/FiatCurrency"
                    },
                    "token": {
                        "$ref": "#/components/schemas/Erc20"
                    }
                },
                "type": "object",
                "required": [
                    "price",
                    "fiat_currency",
                    "token"
                ]
            },
            "ProposedDefaultAction": {
                "properties": {
                    "action": {
                        "$ref": "#/components/schemas/RuleAction"
                    },
                    "diff": {
                        "$ref": "#/components/schemas/DefaultActionDiff"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "diff"
                ]
            },
            "ProposedTransactionRule": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "rule_conditions": {
                        "$ref": "#/components/schemas/TransactionRuleConditions"
                    },
                    "rule_action": {
                        "$ref": "#/components/schemas/RuleAction"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "diff": {
                        "$ref": "#/components/schemas/TransactionRuleDiff"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "rule_conditions",
                    "rule_action",
                    "modified_by",
                    "diff"
                ]
            },
            "PublicRpcEndpoint": {
                "properties": {
                    "type": {
                        "enum": [
                            "public"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "PushMode": {
                "type": "string",
                "enum": [
                    "auto",
                    "manual"
                ]
            },
            "PushTransactionRequest": {
                "properties": {
                    "push_data": {
                        "$ref": "#/components/schemas/CosmosPushData"
                    }
                },
                "type": "object"
            },
            "PushTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxSignature"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/EvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/EvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/BlackBoxSignature",
                        "cosmos_transaction": "#/components/schemas/CosmosTransaction",
                        "evm_message": "#/components/schemas/EvmMessage",
                        "evm_transaction": "#/components/schemas/EvmTransaction",
                        "solana_message": "#/components/schemas/SolanaMessage",
                        "solana_transaction": "#/components/schemas/SolanaTransaction",
                        "utxo_transaction": "#/components/schemas/UtxoTransaction"
                    }
                }
            },
            "RateLimitError": {
                "properties": {},
                "type": "object"
            },
            "RecipientsCondition": {
                "properties": {
                    "addresses": {
                        "items": {
                            "$ref": "#/components/schemas/MultiChainAccount"
                        },
                        "type": "array"
                    },
                    "vaults": {
                        "items": {
                            "$ref": "#/components/schemas/VaultRef"
                        },
                        "type": "array"
                    },
                    "vault_groups": {
                        "items": {
                            "$ref": "#/components/schemas/VaultGroupRef"
                        },
                        "type": "array"
                    },
                    "dapps": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedDapp"
                        },
                        "type": "array"
                    },
                    "address_book_contacts": {
                        "items": {
                            "$ref": "#/components/schemas/ContactRef"
                        },
                        "type": "array"
                    },
                    "address_book_groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "RecipientsConditionRequest": {
                "properties": {
                    "addresses": {
                        "items": {
                            "$ref": "#/components/schemas/MultiChainAccount"
                        },
                        "type": "array"
                    },
                    "vault_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "vault_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "dapp_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "address_book_contact_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "address_book_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "RegisterApiSignerInviteRequest": {
                "properties": {
                    "encrypted_pin_message": {
                        "$ref": "#/components/schemas/EncryptionData"
                    },
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_mpc_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "invite_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "encrypted_invite": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "credentials_encryption_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_pin_message",
                    "signature",
                    "encrypted_mpc_key",
                    "invite_id",
                    "encrypted_invite",
                    "credentials_encryption_key"
                ]
            },
            "RegisterDeviceInviteRequest": {
                "properties": {
                    "encrypted_pin_message": {
                        "$ref": "#/components/schemas/EncryptionData"
                    },
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_mpc_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "encrypted_pin_message",
                    "signature",
                    "encrypted_mpc_key"
                ]
            },
            "RegisterKeygenSessionRequest": {
                "properties": {
                    "key_type": {
                        "$ref": "#/components/schemas/KeyType"
                    },
                    "protocol_version": {
                        "type": "string"
                    },
                    "keyset_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "key_type"
                ]
            },
            "RegisterKeygenSessionResponse": {
                "properties": {
                    "session_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "session_id"
                ]
            },
            "RegisterTransactionSignSessionRequest": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "unsigned_message": {
                        "type": "string"
                    },
                    "protocol_version": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RegisterTransactionSignSessionResponse": {
                "properties": {
                    "session_id": {
                        "type": "string",
                        "format": "uuid",
                        "deprecated": true
                    },
                    "hash": {
                        "type": "string",
                        "deprecated": true,
                        "example": "SGVsbG8="
                    },
                    "timestamped_signature": {
                        "$ref": "#/components/schemas/TimestampedSignature"
                    },
                    "timestamped_signature_v2": {
                        "$ref": "#/components/schemas/TimestampedSignature"
                    },
                    "key_derivation_args": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/KeyDerivationArgs"
                    },
                    "sign_sessions": {
                        "items": {
                            "$ref": "#/components/schemas/SignSession"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "session_id",
                    "hash",
                    "timestamped_signature",
                    "timestamped_signature_v2",
                    "key_derivation_args",
                    "sign_sessions"
                ]
            },
            "ReleaseEvmTransactionRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "release_type": {
                        "$ref": "#/components/schemas/ReleaseType"
                    },
                    "signer_type": {
                        "default": "initiator",
                        "$ref": "#/components/schemas/SignerType"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "release_type"
                ]
            },
            "ReleaseTransactionErrorType": {
                "type": "string",
                "enum": [
                    "partial_signed_raw_request",
                    "invalid_transaction_state",
                    "invalid_transaction_type",
                    "missing_signed_raw_request",
                    "redundant_signed_raw_request",
                    "non_managed_transaction",
                    "invalid_signed_raw_request",
                    "invalid_signer_type",
                    "reverted_transaction",
                    "transaction_uses_secure_node"
                ]
            },
            "ReleaseTransactionRequest": {
                "$ref": "#/components/schemas/ReleaseEvmTransactionRequest"
            },
            "ReleaseTransactionResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxSignature"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/EvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/EvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/BlackBoxSignature",
                        "cosmos_transaction": "#/components/schemas/CosmosTransaction",
                        "evm_message": "#/components/schemas/EvmMessage",
                        "evm_transaction": "#/components/schemas/EvmTransaction",
                        "solana_message": "#/components/schemas/SolanaMessage",
                        "solana_transaction": "#/components/schemas/SolanaTransaction",
                        "utxo_transaction": "#/components/schemas/UtxoTransaction"
                    }
                }
            },
            "ReleaseType": {
                "type": "string",
                "enum": [
                    "cancel",
                    "accelerate"
                ]
            },
            "RemoveUserKeyErrorType": {
                "type": "string",
                "enum": [
                    "cannot_remove_key_of_user_type"
                ]
            },
            "RenameVaultRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "RequestApprover": {
                "properties": {
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PersonRef"
                            },
                            {
                                "$ref": "#/components/schemas/ApiUserRef"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "user_type",
                            "mapping": {
                                "api_user": "#/components/schemas/ApiUserRef",
                                "person": "#/components/schemas/PersonRef"
                            }
                        }
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "decision": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/ApprovalDecision"
                    },
                    "state": {
                        "$ref": "#/components/schemas/ApprovalState"
                    }
                },
                "type": "object",
                "required": [
                    "user",
                    "modified_at",
                    "decision",
                    "state"
                ]
            },
            "ResetUserMultiFactorAuthenticationRequest": {
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "Resource": {
                "type": "string",
                "enum": [
                    "user",
                    "user_change_proposals",
                    "user_group",
                    "user_group_change_proposal",
                    "vault",
                    "vault_address",
                    "vault_group",
                    "transaction",
                    "batch_transaction",
                    "path",
                    "keyset",
                    "auth_token",
                    "access_token"
                ]
            },
            "ResourceError": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "string"
                    },
                    "request_id": {
                        "type": "string"
                    },
                    "resource": {
                        "$ref": "#/components/schemas/Resource"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "RpcEndpoint": {
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PublicRpcEndpoint"
                            },
                            {
                                "$ref": "#/components/schemas/FordefiRpcEndpoint"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "fordefi_suggested": "#/components/schemas/FordefiRpcEndpoint",
                                "public": "#/components/schemas/PublicRpcEndpoint"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "url",
                    "details"
                ]
            },
            "RuleAction": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RuleActionAllow"
                    },
                    {
                        "$ref": "#/components/schemas/RuleActionBlock"
                    },
                    {
                        "$ref": "#/components/schemas/RuleActionRequireApproval"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "allow": "#/components/schemas/RuleActionAllow",
                        "block": "#/components/schemas/RuleActionBlock",
                        "require_approval": "#/components/schemas/RuleActionRequireApproval"
                    }
                }
            },
            "RuleActionAllow": {
                "properties": {
                    "type": {
                        "enum": [
                            "allow"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "RuleActionBlock": {
                "properties": {
                    "type": {
                        "enum": [
                            "block"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "RuleActionRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/RuleActionAllow"
                    },
                    {
                        "$ref": "#/components/schemas/RuleActionBlock"
                    },
                    {
                        "$ref": "#/components/schemas/RuleActionRequireApprovalRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "allow": "#/components/schemas/RuleActionAllow",
                        "block": "#/components/schemas/RuleActionBlock",
                        "require_approval": "#/components/schemas/RuleActionRequireApprovalRequest"
                    }
                }
            },
            "RuleActionRequireApproval": {
                "properties": {
                    "type": {
                        "enum": [
                            "require_approval"
                        ],
                        "type": "string"
                    },
                    "approval_groups": {
                        "items": {
                            "$ref": "#/components/schemas/ApprovalGroup"
                        },
                        "type": "array"
                    },
                    "threshold": {
                        "type": "integer",
                        "minimum": 1.0,
                        "deprecated": true
                    },
                    "approvers": {
                        "items": {
                            "$ref": "#/components/schemas/UserRef"
                        },
                        "type": "array",
                        "deprecated": true
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "threshold",
                    "approvers"
                ]
            },
            "RuleActionRequireApprovalRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "require_approval"
                        ],
                        "type": "string"
                    },
                    "approval_groups": {
                        "items": {
                            "$ref": "#/components/schemas/ApprovalGroupRequest"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "approval_groups"
                ]
            },
            "SetAdminQuorumRequest": {
                "properties": {
                    "quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    }
                },
                "type": "object",
                "required": [
                    "quorum_size"
                ]
            },
            "SetAdminQuorumResponse": {
                "properties": {
                    "current_quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "max_allowed_quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "min_allowed_quorum_size": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "proposed_change": {
                        "$ref": "#/components/schemas/AdminQuorumProposal"
                    }
                },
                "type": "object",
                "required": [
                    "current_quorum_size",
                    "max_allowed_quorum_size",
                    "min_allowed_quorum_size"
                ]
            },
            "SetDesiredKeyTypesErrorType": {
                "type": "string",
                "enum": [
                    "cannot_remove_types_from_desired_key_types"
                ]
            },
            "SetImpersonationByOrganizationRequest": {
                "properties": {
                    "impersonated_organization_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "impersonated_organization_id"
                ]
            },
            "SetImpersonationByUserRequest": {
                "properties": {
                    "impersonated_user_email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "type": "object",
                "required": [
                    "impersonated_user_email"
                ]
            },
            "SetKeyApiUserRequest": {
                "properties": {
                    "public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "public_key_hmac": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "public_key",
                    "public_key_hmac"
                ]
            },
            "SetKeysetDesiredKeyTypesRequest": {
                "properties": {
                    "desired_key_types": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array",
                        "minItems": 1
                    }
                },
                "type": "object",
                "required": [
                    "desired_key_types"
                ]
            },
            "SetMockKeygenSeedRequest": {
                "properties": {
                    "seed": {
                        "type": "string"
                    },
                    "key_type": {
                        "$ref": "#/components/schemas/KeyType"
                    }
                },
                "type": "object",
                "required": [
                    "seed",
                    "key_type"
                ]
            },
            "SetUserKeyErrorType": {
                "type": "string",
                "enum": [
                    "cannot_set_key_of_user_type"
                ]
            },
            "SignContactChangeProposalRequest": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "device_hmac": {
                        "deprecated": true,
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "signature"
                ]
            },
            "SignDoc": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AminoSignDoc"
                    },
                    {
                        "$ref": "#/components/schemas/DirectSignDoc"
                    },
                    {
                        "$ref": "#/components/schemas/MinedSignDoc"
                    }
                ],
                "discriminator": {
                    "propertyName": "format",
                    "mapping": {
                        "amino": "#/components/schemas/AminoSignDoc",
                        "direct": "#/components/schemas/DirectSignDoc",
                        "mined": "#/components/schemas/MinedSignDoc"
                    }
                }
            },
            "SignKeyShareBackupRequest": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_device_share": {
                        "$ref": "#/components/schemas/EncryptionData"
                    },
                    "device_shares_included": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array"
                    },
                    "device_hmac": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "backup_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "signature",
                    "encrypted_device_share",
                    "device_shares_included",
                    "device_hmac",
                    "backup_key"
                ]
            },
            "SignPublicKeyBackupRequest": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "encrypted_device_share": {
                        "$ref": "#/components/schemas/EncryptionData"
                    },
                    "device_shares_included": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "signature",
                    "encrypted_device_share",
                    "device_shares_included"
                ]
            },
            "SignSession": {
                "properties": {
                    "session_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "payload_to_sign": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "key_derivation_args": {
                        "$ref": "#/components/schemas/KeyDerivationArgs"
                    }
                },
                "type": "object",
                "required": [
                    "session_id",
                    "payload_to_sign",
                    "key_derivation_args"
                ]
            },
            "SignTransactionErrorType": {
                "type": "string",
                "enum": [
                    "invalid_transaction_state",
                    "non_managed_transaction",
                    "node_rejected_transaction",
                    "node_rejected_transaction_insufficient_funds",
                    "node_rejected_transaction_insufficient_funds_for_fee",
                    "node_rejected_transaction_gas_too_low",
                    "node_rejected_transaction_invalid_nonce"
                ]
            },
            "Signature": {
                "properties": {
                    "data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "signed_by": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PersonRef"
                            },
                            {
                                "$ref": "#/components/schemas/ApiSignerRef"
                            },
                            {
                                "$ref": "#/components/schemas/EndUserRef"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "user_type",
                            "mapping": {
                                "api_signer": "#/components/schemas/ApiSignerRef",
                                "end_user": "#/components/schemas/EndUserRef",
                                "person": "#/components/schemas/PersonRef"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ]
            },
            "SignedEncryptionKey": {
                "properties": {
                    "public_key": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "timestamped_signature": {
                        "$ref": "#/components/schemas/TimestampedSignature"
                    }
                },
                "type": "object",
                "required": [
                    "public_key",
                    "timestamped_signature"
                ]
            },
            "SignedRawData": {
                "properties": {
                    "raw_data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "timestamp_signature": {
                        "$ref": "#/components/schemas/TimestampedSignature"
                    },
                    "url_path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "raw_data",
                    "timestamp_signature",
                    "url_path"
                ]
            },
            "SignerInfo": {
                "properties": {
                    "signer_address": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "public_key": {
                        "type": "string",
                        "pattern": "^[a-fA-F0-9]+$"
                    },
                    "account": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "sequence": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "signer_address",
                    "public_key",
                    "account",
                    "sequence"
                ]
            },
            "SignerType": {
                "type": "string",
                "enum": [
                    "initiator",
                    "api_signer",
                    "end_user"
                ]
            },
            "SimulationStatus": {
                "type": "string",
                "enum": [
                    "success",
                    "failed",
                    "reverted",
                    "skipped"
                ]
            },
            "SimulationStatusResult": {
                "properties": {
                    "simulation_status": {
                        "$ref": "#/components/schemas/SimulationStatus"
                    },
                    "details": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "details"
                ]
            },
            "SolanaAccountRepr": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "base58_repr": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "base58_repr"
                ]
            },
            "SolanaAddress": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChain"
                    },
                    "base58_repr": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "base58_repr"
                ]
            },
            "SolanaAddressBookContact": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "$ref": "#/components/schemas/AddressBookContactState"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupRef"
                        },
                        "type": "array"
                    },
                    "pending_changes": {
                        "$ref": "#/components/schemas/AddressBookContactChanges"
                    },
                    "chain_type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedSolanaChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "modified_by",
                    "state",
                    "groups",
                    "chain_type",
                    "address",
                    "chains"
                ]
            },
            "SolanaAddressBookContactAddress": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedSolanaChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chains"
                ]
            },
            "SolanaAddressBookContactAddressRef": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chains"
                ]
            },
            "SolanaAddressRequest": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    },
                    "base58_repr": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "base58_repr"
                ]
            },
            "SolanaAsset": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "decimals": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "verified": {
                        "type": "boolean"
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EnrichedAssetIdentifier"
                    },
                    "metadata_uri": {
                        "type": "string"
                    },
                    "type": {
                        "deprecated": true,
                        "enum": [
                            "solana_asset"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/SolanaNativeAsset"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaSplTokenAsset"
                            }
                        ],
                        "deprecated": true
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "decimals",
                    "name",
                    "symbol",
                    "hidden",
                    "verified",
                    "asset_identifier",
                    "type",
                    "details"
                ]
            },
            "SolanaAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SolanaNativeAssetIdentifierRequest"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaSplTokenAssetIdentifierRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native": "#/components/schemas/SolanaNativeAssetIdentifierRequest",
                                "spl_token": "#/components/schemas/SolanaSplTokenAssetIdentifierRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "SolanaBalanceChangeEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SolanaNativeCurrencyBalanceChange"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTokenBalanceChange"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "native": "#/components/schemas/SolanaNativeCurrencyBalanceChange",
                        "spl_token": "#/components/schemas/SolanaTokenBalanceChange"
                    }
                }
            },
            "SolanaBlockData": {
                "properties": {
                    "slot": {
                        "type": "integer"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"
                    },
                    "mined_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "slot",
                    "hash",
                    "mined_at"
                ]
            },
            "SolanaChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "unique_id"
                ]
            },
            "SolanaChainUniqueId": {
                "type": "string",
                "enum": [
                    "solana_mainnet",
                    "solana_devnet"
                ]
            },
            "SolanaCompiledInstruction": {
                "properties": {
                    "program_index": {
                        "type": "integer"
                    },
                    "data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "account_indexes": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "program_index",
                    "data",
                    "account_indexes"
                ]
            },
            "SolanaContractMetadata": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "dapp": {
                        "$ref": "#/components/schemas/Dapp"
                    },
                    "is_verified": {
                        "type": "boolean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/SplToken"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified"
                ]
            },
            "SolanaEffects": {
                "properties": {
                    "balance_changes": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaBalanceChangeEffect"
                        },
                        "type": "array"
                    },
                    "transfers": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransferEffect"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "balance_changes",
                    "transfers"
                ]
            },
            "SolanaEnrichedMessageAddressTableLookup": {
                "properties": {
                    "account_key": {
                        "$ref": "#/components/schemas/SolanaAddress"
                    },
                    "writable_indexes": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "readonly_indexes": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/AddressLookupTableState"
                    }
                },
                "type": "object",
                "required": [
                    "account_key",
                    "writable_indexes",
                    "readonly_indexes",
                    "state"
                ]
            },
            "SolanaFee": {
                "properties": {
                    "fee": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "fiat_price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "fee"
                ]
            },
            "SolanaMessage": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "type": {
                        "enum": [
                            "solana_message"
                        ],
                        "type": "string"
                    },
                    "solana_message_type": {
                        "$ref": "#/components/schemas/SolanaMessageType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/SolanaMessageState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaMessageStateChange"
                        },
                        "type": "array"
                    },
                    "string_data": {
                        "type": "string"
                    },
                    "raw_data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "direction",
                    "type",
                    "solana_message_type",
                    "state",
                    "state_changes",
                    "string_data",
                    "raw_data",
                    "chain"
                ]
            },
            "SolanaMessageAddressTableLookupRequest": {
                "properties": {
                    "account_key": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "writable_indexes": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "readonly_indexes": {
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "account_key",
                    "writable_indexes",
                    "readonly_indexes"
                ]
            },
            "SolanaMessageState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "completed",
                    "error_signing",
                    "aborted"
                ]
            },
            "SolanaMessageStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "asset_prices": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/SolanaMessageState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/SolanaMessageState"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "asset_prices",
                    "new_state"
                ]
            },
            "SolanaMessageType": {
                "type": "string",
                "enum": [
                    "personal_message_type"
                ]
            },
            "SolanaMessageVersion": {
                "type": "string",
                "enum": [
                    "legacy",
                    "v0"
                ]
            },
            "SolanaNativeAsset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "type": {
                        "enum": [
                            "solana_native_asset"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "SolanaNativeAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain"
                ]
            },
            "SolanaNativeCurrencyBalanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "address",
                    "diff"
                ]
            },
            "SolanaNativeCurrencyTransfer": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "from",
                    "to",
                    "amount"
                ]
            },
            "SolanaNativeTransferDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "native_transfer"
                        ],
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "is_internal": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "direction",
                    "sender",
                    "recipient"
                ]
            },
            "SolanaPersonalMessageRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "personal_message_type"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    },
                    "raw_data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "raw_data"
                ]
            },
            "SolanaRawTransactionDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "raw_transaction"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "SolanaReversion": {
                "properties": {
                    "state": {
                        "$ref": "#/components/schemas/SolanaReversionState"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "state"
                ]
            },
            "SolanaReversionState": {
                "type": "string",
                "enum": [
                    "not_reverted",
                    "unknown_revert",
                    "contract_asserted",
                    "insufficient_funds_gas_and_value",
                    "insufficient_funds_for_rent"
                ]
            },
            "SolanaSplTokenAsset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "type": {
                        "enum": [
                            "solana_spl_token_asset"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "SolanaSplTokenAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "spl_token"
                        ],
                        "type": "string"
                    },
                    "token": {
                        "$ref": "#/components/schemas/SolanaAddressRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "token"
                ]
            },
            "SolanaSuggestedFees": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "chain_unique_id": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    },
                    "fee_per_signature": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain_unique_id",
                    "fee_per_signature"
                ]
            },
            "SolanaTokenBalanceChange": {
                "properties": {
                    "type": {
                        "enum": [
                            "spl_token"
                        ],
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/SplTokenContract"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "owner",
                    "diff",
                    "token_contract"
                ]
            },
            "SolanaTokenTransfer": {
                "properties": {
                    "type": {
                        "enum": [
                            "spl_token"
                        ],
                        "type": "string"
                    },
                    "from": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "to": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "token_contract": {
                        "$ref": "#/components/schemas/SplTokenContract"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "from",
                    "to",
                    "amount",
                    "token_contract"
                ]
            },
            "SolanaTokenTransferDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "token_transfer"
                        ],
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "is_internal": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "direction",
                    "sender",
                    "recipient"
                ]
            },
            "SolanaTransaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "solana_transaction_type_details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/SolanaNativeTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaTokenTransferDetails"
                            },
                            {
                                "$ref": "#/components/schemas/SolanaRawTransactionDetails"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "native_transfer": "#/components/schemas/SolanaNativeTransferDetails",
                                "raw_transaction": "#/components/schemas/SolanaRawTransactionDetails",
                                "token_transfer": "#/components/schemas/SolanaTokenTransferDetails"
                            }
                        }
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedSolanaChain"
                    },
                    "state": {
                        "$ref": "#/components/schemas/SolanaTransactionState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionStateChange"
                        },
                        "type": "array"
                    },
                    "version": {
                        "$ref": "#/components/schemas/SolanaMessageVersion"
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaCompiledInstruction"
                        },
                        "type": "array"
                    },
                    "accounts": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionAccount"
                        },
                        "type": "array"
                    },
                    "address_table_lookups": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaEnrichedMessageAddressTableLookup"
                        },
                        "type": "array"
                    },
                    "sender": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "raw_transaction": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 88,
                        "minLength": 64,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "FAWA66fudpiwdRDDQ4DRxdJsRvawvauwg4vQkm98ZHFpXmW5N7xzRiTRpt8QiZ19s1aVbzKgXW6kEZanwHeDFNS"
                    },
                    "recent_blockhash": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"
                    },
                    "block": {
                        "$ref": "#/components/schemas/SolanaBlockData"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/SolanaTransactionResult"
                    },
                    "simulation_status_result": {
                        "$ref": "#/components/schemas/SimulationStatusResult"
                    },
                    "mined_result": {
                        "$ref": "#/components/schemas/SolanaTransactionResult"
                    },
                    "explorer_url": {
                        "example": "https://solscan.io/tx/FAWA66f...6kEZanwHeDFNS",
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "direction",
                    "type",
                    "solana_transaction_type_details",
                    "chain",
                    "state",
                    "state_changes",
                    "version",
                    "instructions",
                    "accounts",
                    "address_table_lookups",
                    "sender",
                    "simulation_status_result"
                ]
            },
            "SolanaTransactionAccount": {
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EnrichedSolanaAddress"
                    },
                    "writable": {
                        "type": "boolean"
                    },
                    "signer": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "writable",
                    "signer"
                ]
            },
            "SolanaTransactionAccountRequest": {
                "properties": {
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    },
                    "writable": {
                        "type": "boolean"
                    },
                    "signer": {
                        "type": "boolean"
                    },
                    "ephemeral_key": {
                        "type": "string",
                        "maxLength": 88,
                        "minLength": 88,
                        "example": "lnNyP8kFPEaVpvUo/SIlhdZlzhPU8r7yT/h0gG5ajzQ="
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "writable",
                    "signer"
                ]
            },
            "SolanaTransactionResult": {
                "properties": {
                    "reversion": {
                        "$ref": "#/components/schemas/SolanaReversion"
                    },
                    "transaction_error": {
                        "type": "string"
                    },
                    "fee": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "deprecated": true,
                        "example": "1000000000000000000"
                    },
                    "enriched_fee": {
                        "$ref": "#/components/schemas/SolanaFee"
                    },
                    "effects": {
                        "$ref": "#/components/schemas/SolanaEffects"
                    },
                    "instruction_error": {
                        "$ref": "#/components/schemas/InstructionError"
                    }
                },
                "type": "object",
                "required": [
                    "reversion",
                    "fee",
                    "enriched_fee",
                    "effects"
                ]
            },
            "SolanaTransactionSignaturesRequest": {
                "properties": {
                    "data": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object"
            },
            "SolanaTransactionState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "pushed_to_blockchain",
                    "mined",
                    "completed",
                    "aborted",
                    "error_pushing_to_blockchain",
                    "mined_reverted",
                    "completed_reverted",
                    "error_signing",
                    "dropped"
                ]
            },
            "SolanaTransactionStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "asset_prices": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/SolanaTransactionState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/SolanaTransactionState"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "asset_prices",
                    "new_state"
                ]
            },
            "SolanaTransactionType": {
                "type": "string",
                "enum": [
                    "native_transfer",
                    "token_transfer",
                    "raw_transaction"
                ]
            },
            "SolanaTransferEffect": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/SolanaNativeCurrencyTransfer"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTokenTransfer"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "native": "#/components/schemas/SolanaNativeCurrencyTransfer",
                        "spl_token": "#/components/schemas/SolanaTokenTransfer"
                    }
                }
            },
            "SolanaVault": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "derivation_path": {
                        "type": "string",
                        "deprecated": true,
                        "example": "m/44/60/0/0/0"
                    },
                    "public_key_compressed": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "derivation_info": {
                        "$ref": "#/components/schemas/VaultDerivationInfo"
                    },
                    "keyset": {
                        "$ref": "#/components/schemas/KeysetRef"
                    },
                    "key_holder": {
                        "$ref": "#/components/schemas/EndUserRef"
                    },
                    "vault_group": {
                        "$ref": "#/components/schemas/VaultGroupRef"
                    },
                    "pending_vault_group_action": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionAdd"
                            },
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "add": "#/components/schemas/PendingVaultGroupActionAdd",
                                "remove": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultState"
                    },
                    "type": {
                        "enum": [
                            "solana"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "created_by",
                    "derivation_path",
                    "public_key_compressed",
                    "derivation_info",
                    "keyset",
                    "vault_group",
                    "state",
                    "type",
                    "address"
                ]
            },
            "SplToken": {
                "properties": {
                    "type": {
                        "enum": [
                            "spl_token"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/SolanaAddress"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "decimals": {
                        "type": "integer"
                    },
                    "logo_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "address",
                    "name",
                    "symbol",
                    "decimals"
                ]
            },
            "SplTokenContract": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "dapp": {
                        "$ref": "#/components/schemas/Dapp"
                    },
                    "is_verified": {
                        "type": "boolean"
                    },
                    "token": {
                        "$ref": "#/components/schemas/SplToken"
                    }
                },
                "type": "object",
                "required": [
                    "is_verified",
                    "token"
                ]
            },
            "StartOnboardingRequest": {
                "properties": {
                    "organization_name": {
                        "type": "string"
                    },
                    "organization_type": {
                        "$ref": "#/components/schemas/OrganizationType"
                    },
                    "admin_email": {
                        "type": "string",
                        "format": "email"
                    },
                    "should_support_end_users": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "organization_name",
                    "organization_type",
                    "admin_email",
                    "should_support_end_users"
                ]
            },
            "StartOnboardingResponse": {
                "properties": {
                    "organization_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "organization_id"
                ]
            },
            "StdCoin": {
                "properties": {
                    "denom": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "denom",
                    "amount"
                ]
            },
            "StdFee": {
                "properties": {
                    "coins": {
                        "items": {
                            "$ref": "#/components/schemas/CosmosCoinWithAmount"
                        },
                        "type": "array"
                    },
                    "gas": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "payer": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "granter": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    },
                    "fee_payer": {
                        "$ref": "#/components/schemas/EnrichedCosmosBechAddress"
                    }
                },
                "type": "object",
                "required": [
                    "coins",
                    "gas"
                ]
            },
            "StdFeeRequest": {
                "properties": {
                    "amount": {
                        "items": {
                            "$ref": "#/components/schemas/StdCoin"
                        },
                        "type": "array"
                    },
                    "gas": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "payer": {
                        "default": "",
                        "type": "string"
                    },
                    "granter": {
                        "default": "",
                        "type": "string"
                    },
                    "fee_payer": {
                        "default": "",
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "amount",
                    "gas"
                ]
            },
            "StdSignDoc": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedCosmosChain"
                    },
                    "account_number": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "sequence": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "timeout_height": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    },
                    "fee": {
                        "$ref": "#/components/schemas/StdFee"
                    },
                    "messages": {
                        "$ref": "#/components/schemas/AminoMessagesList"
                    },
                    "memo": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "account_number",
                    "sequence",
                    "fee",
                    "messages",
                    "memo"
                ]
            },
            "SubmitChangeProposalErrorType": {
                "type": "string",
                "enum": [
                    "invalid_group_name",
                    "cannot_submit_change_proposal_with_non_existing_users",
                    "cannot_submit_change_proposal_for_users_state",
                    "cannot_submit_change_proposal_for_users_type",
                    "cannot_submit_change_proposal_without_changes"
                ]
            },
            "SubmitSignedTransactionRequest": {
                "properties": {},
                "type": "object"
            },
            "SubmitTransactionsPolicyProposalRequest": {
                "properties": {
                    "rules": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRuleRequest"
                        },
                        "type": "array"
                    },
                    "default_action": {
                        "$ref": "#/components/schemas/RuleActionRequest"
                    }
                },
                "type": "object",
                "required": [
                    "default_action"
                ]
            },
            "SubmitUserChangeProposalRequest": {
                "properties": {
                    "new_role": {
                        "type": "string",
                        "enum": [
                            "admin",
                            "trader"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "new_role"
                ]
            },
            "SubmitUserGroupChangeProposalRequest": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "user_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array",
                        "maxItems": 300
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "SubmitVaultGroupChangeProposalRequest": {
                "properties": {
                    "new_name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "added_vault_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "removed_vault_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "SuggestedFees": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CosmosSuggestedFees"
                    },
                    {
                        "$ref": "#/components/schemas/EvmSuggestedFees"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaSuggestedFees"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoSuggestedFees"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "cosmos": "#/components/schemas/CosmosSuggestedFees",
                        "evm": "#/components/schemas/EvmSuggestedFees",
                        "solana": "#/components/schemas/SolanaSuggestedFees",
                        "utxo": "#/components/schemas/UtxoSuggestedFees"
                    }
                }
            },
            "TestWebhookErrorType": {
                "type": "string",
                "enum": [
                    "http_error",
                    "server_disconnected",
                    "timeout",
                    "client_connection_error",
                    "unexpected_error"
                ]
            },
            "TestWebhookRequest": {
                "properties": {
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    }
                },
                "type": "object",
                "required": [
                    "url"
                ]
            },
            "TimestampedSignature": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "timestamp": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "signature",
                    "timestamp"
                ]
            },
            "TokenTransferDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "token_transfer"
                        ],
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "recipient": {
                        "$ref": "#/components/schemas/EnrichedEvmAddress"
                    },
                    "is_internal": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "direction",
                    "recipient"
                ]
            },
            "Transaction": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxSignature"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/EvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/EvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/BlackBoxSignature",
                        "cosmos_transaction": "#/components/schemas/CosmosTransaction",
                        "evm_message": "#/components/schemas/EvmMessage",
                        "evm_transaction": "#/components/schemas/EvmTransaction",
                        "solana_message": "#/components/schemas/SolanaMessage",
                        "solana_transaction": "#/components/schemas/SolanaTransaction",
                        "utxo_transaction": "#/components/schemas/UtxoTransaction"
                    }
                }
            },
            "TransactionAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "transaction"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "transaction": {
                        "$ref": "#/components/schemas/Transaction"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "transaction"
                ]
            },
            "TransactionDetailsCosmosTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TypedCosmosRawTransactionRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TypedCosmosTransferRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "cosmos_raw_transaction": "#/components/schemas/TypedCosmosRawTransactionRequest",
                                "cosmos_transfer": "#/components/schemas/TypedCosmosTransferRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "TransactionDetailsEvmMessageRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TransactionDetailsEvmTypedMessageRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TransactionDetailsEvmPersonalMessageRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "personal_message_type": "#/components/schemas/TransactionDetailsEvmPersonalMessageRequest",
                                "typed_message_type": "#/components/schemas/TransactionDetailsEvmTypedMessageRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "TransactionDetailsEvmPersonalMessageRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "personal_message_type"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "raw_data": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "raw_data"
                ]
            },
            "TransactionDetailsEvmRawTransactionRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "to": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "data": {
                        "$ref": "#/components/schemas/EvmDataRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "to",
                    "value"
                ]
            },
            "TransactionDetailsEvmRevokeAllowanceRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_revoke_allowance"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "token": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "spender": {
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "token",
                    "spender"
                ]
            },
            "TransactionDetailsEvmTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TransactionDetailsEvmRawTransactionRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TransactionDetailsEvmTransferRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TransactionDetailsEvmRevokeAllowanceRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "evm_raw_transaction": "#/components/schemas/TransactionDetailsEvmRawTransactionRequest",
                                "evm_revoke_allowance": "#/components/schemas/TransactionDetailsEvmRevokeAllowanceRequest",
                                "evm_transfer": "#/components/schemas/TransactionDetailsEvmTransferRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "TransactionDetailsEvmTransferRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "evm_transfer"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "chain": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 42,
                                "minLength": 42,
                                "pattern": "^0[xX][a-fA-F0-9]+$",
                                "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                            },
                            {
                                "type": "string",
                                "format": "uuid"
                            }
                        ]
                    },
                    "token": {
                        "deprecated": true,
                        "type": "string",
                        "maxLength": 42,
                        "minLength": 42,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EvmAssetIdentifierRequest"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateEvmTransferRequestExplicitValue"
                            },
                            {
                                "$ref": "#/components/schemas/CreateEvmTransferRequestMaxValue"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "max": "#/components/schemas/CreateEvmTransferRequestMaxValue",
                                "value": "#/components/schemas/CreateEvmTransferRequestExplicitValue"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "to",
                    "value"
                ]
            },
            "TransactionDetailsEvmTypedMessageRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "typed_message_type"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChainRequest"
                    },
                    "raw_data": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "raw_data"
                ]
            },
            "TransactionDetailsSolanaMessageRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "solana_message"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/SolanaPersonalMessageRequest"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "TransactionDetailsSolanaRawTransactionRequest": {
                "properties": {
                    "version": {
                        "$ref": "#/components/schemas/SolanaMessageVersion"
                    },
                    "instructions": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaCompiledInstruction"
                        },
                        "type": "array"
                    },
                    "accounts": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionAccountRequest"
                        },
                        "type": "array"
                    },
                    "address_table_lookups": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaMessageAddressTableLookupRequest"
                        },
                        "type": "array"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/SolanaTransactionSignaturesRequest"
                        },
                        "type": "array"
                    },
                    "recent_blockhash": {
                        "type": "string",
                        "maxLength": 44,
                        "minLength": 32,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZAMdL4VZHirAn"
                    },
                    "type": {
                        "enum": [
                            "solana_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "skip_simulation": {
                        "type": "boolean",
                        "default": false
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "version",
                    "instructions",
                    "accounts",
                    "address_table_lookups",
                    "type",
                    "chain"
                ]
            },
            "TransactionDetailsSolanaTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/TransactionDetailsSolanaTransferRequest"
                            },
                            {
                                "$ref": "#/components/schemas/TransactionDetailsSolanaRawTransactionRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "solana_raw_transaction": "#/components/schemas/TransactionDetailsSolanaRawTransactionRequest",
                                "solana_transfer": "#/components/schemas/TransactionDetailsSolanaTransferRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "TransactionDetailsSolanaTransferRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "solana_transfer"
                        ],
                        "type": "string"
                    },
                    "fail_on_prediction_failure": {
                        "type": "boolean",
                        "default": true
                    },
                    "skip_simulation": {
                        "type": "boolean",
                        "default": false
                    },
                    "to": {
                        "anyOf": [
                            {
                                "type": "string",
                                "maxLength": 44,
                                "minLength": 32,
                                "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                                "example": "4fYNw3dojWmQ4dXtSGE9epjRGy9pFSx62YypT7avPYvA"
                            },
                            {
                                "type": "string",
                                "format": "uuid"
                            }
                        ]
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateSolanaTransferRequestExplicitAmount"
                            },
                            {
                                "$ref": "#/components/schemas/CreateSolanaTransferRequestMaxAmount"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "max": "#/components/schemas/CreateSolanaTransferRequestMaxAmount",
                                "value": "#/components/schemas/CreateSolanaTransferRequestExplicitAmount"
                            }
                        }
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/SolanaAssetIdentifierRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "to",
                    "value",
                    "asset_identifier"
                ]
            },
            "TransactionDetailsUtxoTransactionRequest": {
                "properties": {
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "type": {
                        "enum": [
                            "utxo_transaction"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/TransactionDetailsUtxoTransferRequest"
                    }
                },
                "type": "object",
                "required": [
                    "vault_id",
                    "type",
                    "details"
                ]
            },
            "TransactionDetailsUtxoTransferRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "utxo_transfer"
                        ],
                        "type": "string"
                    },
                    "outputs": {
                        "items": {
                            "$ref": "#/components/schemas/UtxoOutputRequest"
                        },
                        "type": "array"
                    },
                    "fee_per_byte": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/FeePriorityRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CustomFeeRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "custom": "#/components/schemas/CustomFeeRequest",
                                "priority": "#/components/schemas/FeePriorityRequest"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "outputs",
                    "fee_per_byte"
                ]
            },
            "TransactionDirection": {
                "type": "string",
                "enum": [
                    "outgoing",
                    "incoming"
                ]
            },
            "TransactionPolicyMatchActionType": {
                "type": "string",
                "enum": [
                    "allow",
                    "block",
                    "require_approval"
                ]
            },
            "TransactionRisk": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TransactionRiskType"
                    },
                    "severity": {
                        "$ref": "#/components/schemas/TransactionRiskSeverity"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "severity",
                    "title",
                    "description"
                ]
            },
            "TransactionRiskSeverity": {
                "type": "string",
                "enum": [
                    "low",
                    "medium",
                    "high"
                ]
            },
            "TransactionRiskType": {
                "type": "string",
                "enum": [
                    "transfer_to_erc20_contract",
                    "organization_not_interacted_with_address",
                    "vault_not_interacted_with_address",
                    "allowance_to_eoa",
                    "unlimited_allowance",
                    "contract_not_verified",
                    "bridge_dest_differ_from_sender",
                    "nft_approve_for_all",
                    "missing_simulation",
                    "unsupported_simulation"
                ]
            },
            "TransactionRule": {
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "rule_conditions": {
                        "$ref": "#/components/schemas/TransactionRuleConditions"
                    },
                    "rule_action": {
                        "$ref": "#/components/schemas/RuleAction"
                    },
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "rule_conditions",
                    "rule_action",
                    "id",
                    "created_at",
                    "modified_at",
                    "modified_by"
                ]
            },
            "TransactionRuleConditions": {
                "properties": {
                    "transaction_types": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionTypeCondition"
                        },
                        "type": "array"
                    },
                    "initiators": {
                        "deprecated": true,
                        "items": {
                            "$ref": "#/components/schemas/UserRef"
                        },
                        "type": "array"
                    },
                    "transaction_initiators": {
                        "$ref": "#/components/schemas/InitiatorsCondition"
                    },
                    "origin_vaults": {
                        "items": {
                            "$ref": "#/components/schemas/VaultRef"
                        },
                        "type": "array"
                    },
                    "origin_vault_groups": {
                        "items": {
                            "$ref": "#/components/schemas/VaultGroupRef"
                        },
                        "type": "array"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/RecipientsCondition"
                    },
                    "transaction_assets": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    },
                    "amount_limit": {
                        "$ref": "#/components/schemas/AmountLimitCondition"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_initiators",
                    "recipients"
                ]
            },
            "TransactionRuleConditionsRequest": {
                "properties": {
                    "initiators": {
                        "$ref": "#/components/schemas/InitiatorsConditionRequest"
                    },
                    "origin_vault_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "origin_vault_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "transaction_types": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionTypeCondition"
                        },
                        "type": "array"
                    },
                    "recipients": {
                        "$ref": "#/components/schemas/RecipientsConditionRequest"
                    },
                    "assets": {
                        "items": {
                            "$ref": "#/components/schemas/AssetIdentifierRequest"
                        },
                        "type": "array"
                    },
                    "amount_limit": {
                        "$ref": "#/components/schemas/AmountLimitCondition"
                    }
                },
                "type": "object"
            },
            "TransactionRuleDiff": {
                "type": "string",
                "enum": [
                    "unmodified",
                    "edited",
                    "new",
                    "deleted",
                    "moved_up",
                    "moved_down"
                ]
            },
            "TransactionRuleRequest": {
                "properties": {
                    "existing_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "conditions": {
                        "$ref": "#/components/schemas/TransactionRuleConditionsRequest"
                    },
                    "action": {
                        "$ref": "#/components/schemas/RuleActionRequest"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "action"
                ]
            },
            "TransactionSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "modified_at_asc",
                    "modified_at_desc",
                    "type_asc",
                    "type_desc",
                    "chains_asc",
                    "chains_desc",
                    "initiators_asc",
                    "initiators_desc",
                    "state_asc",
                    "state_desc"
                ]
            },
            "TransactionSpamState": {
                "type": "string",
                "enum": [
                    "unset",
                    "manually_set",
                    "automatically_set"
                ]
            },
            "TransactionState": {
                "type": "string",
                "enum": [
                    "pending",
                    "finalized",
                    "approved",
                    "stuck",
                    "completed",
                    "completed_reverted"
                ]
            },
            "TransactionSubType": {
                "type": "string",
                "enum": [
                    "transfer",
                    "allowance",
                    "cross_chain_bridge",
                    "transaction",
                    "contract_call",
                    "message_signature",
                    "allowance_signature"
                ]
            },
            "TransactionType": {
                "type": "string",
                "enum": [
                    "black_box_signature",
                    "cosmos_transaction",
                    "evm_message",
                    "evm_transaction",
                    "solana_message",
                    "solana_transaction",
                    "utxo_transaction"
                ]
            },
            "TransactionTypeCondition": {
                "type": "string",
                "enum": [
                    "transfer",
                    "allowance",
                    "contract_call",
                    "message_signature",
                    "black_box_signature"
                ]
            },
            "TransactionsPolicy": {
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "default_action": {
                        "$ref": "#/components/schemas/RuleAction"
                    },
                    "rules": {
                        "items": {
                            "$ref": "#/components/schemas/TransactionRule"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "default_action",
                    "rules"
                ]
            },
            "TransactionsPolicyAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "transactions_policy"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "proposal": {
                        "$ref": "#/components/schemas/TransactionsPolicyProposal"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "state",
                    "proposal"
                ]
            },
            "TransactionsPolicyProposal": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "default_action": {
                        "$ref": "#/components/schemas/ProposedDefaultAction"
                    },
                    "rules": {
                        "items": {
                            "$ref": "#/components/schemas/ProposedTransactionRule"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/TransactionsPolicyProposalState"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "created_by",
                    "default_action",
                    "rules",
                    "state",
                    "approval_request"
                ]
            },
            "TransactionsPolicyProposalState": {
                "type": "string",
                "enum": [
                    "created",
                    "completed",
                    "aborted"
                ]
            },
            "TransferDirection": {
                "type": "string",
                "enum": [
                    "outgoing",
                    "incoming",
                    "internal"
                ]
            },
            "TypedCosmosRawTransactionRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos_raw_transaction"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChainUniqueId"
                    },
                    "request_data": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AminoRequestData"
                            },
                            {
                                "$ref": "#/components/schemas/DirectRequestData"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "format",
                            "mapping": {
                                "amino": "#/components/schemas/AminoRequestData",
                                "direct": "#/components/schemas/DirectRequestData"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain",
                    "request_data"
                ]
            },
            "TypedCosmosTransferRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "cosmos_transfer"
                        ],
                        "type": "string"
                    },
                    "to": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CosmosTransferToAddressRequest"
                            },
                            {
                                "$ref": "#/components/schemas/CosmosTransferToVaultIdRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "address": "#/components/schemas/CosmosTransferToAddressRequest",
                                "vault_id": "#/components/schemas/CosmosTransferToVaultIdRequest"
                            }
                        }
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/CosmosAssetIdentifierRequest"
                    },
                    "value": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/CreateCosmosTransferRequestExplicitValue"
                            },
                            {
                                "$ref": "#/components/schemas/CreateCosmosTransferRequestMaxValue"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "max": "#/components/schemas/CreateCosmosTransferRequestMaxValue",
                                "value": "#/components/schemas/CreateCosmosTransferRequestExplicitValue"
                            }
                        }
                    },
                    "memo": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "to",
                    "asset_identifier",
                    "value"
                ]
            },
            "UnknownTypedMessageEvmMessage": {
                "properties": {
                    "domain": {
                        "$ref": "#/components/schemas/EvmMessageDomainData"
                    },
                    "type": {
                        "enum": [
                            "unknown"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "domain",
                    "type"
                ]
            },
            "UpdateAssetConfiguration": {
                "properties": {
                    "asset": {
                        "$ref": "#/components/schemas/AssetIdentifierRequest"
                    },
                    "hidden": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "asset",
                    "hidden"
                ]
            },
            "UpdateContractRequest": {
                "properties": {
                    "contract": {
                        "$ref": "#/components/schemas/EvmAddressRequest"
                    },
                    "dapp_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "contract"
                ]
            },
            "UpdateContractResponse": {
                "properties": {
                    "updated_contract": {
                        "$ref": "#/components/schemas/EvmContractMetadata"
                    }
                },
                "type": "object",
                "required": [
                    "updated_contract"
                ]
            },
            "UpdateDevicePushTokenRequest": {
                "properties": {
                    "push_token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "push_token"
                ]
            },
            "UpdateOrganizationRequest": {
                "properties": {
                    "organization_type": {
                        "$ref": "#/components/schemas/OrganizationType"
                    },
                    "is_deprecated": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UpdateTransactionForSigningRequest": {
                "properties": {},
                "type": "object"
            },
            "UpdateTransactionForSigningResponse": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxSignature"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/EvmMessage"
                    },
                    {
                        "$ref": "#/components/schemas/EvmTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaMessage"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaTransaction"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoTransaction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box_signature": "#/components/schemas/BlackBoxSignature",
                        "cosmos_transaction": "#/components/schemas/CosmosTransaction",
                        "evm_message": "#/components/schemas/EvmMessage",
                        "evm_transaction": "#/components/schemas/EvmTransaction",
                        "solana_message": "#/components/schemas/SolanaMessage",
                        "solana_transaction": "#/components/schemas/SolanaTransaction",
                        "utxo_transaction": "#/components/schemas/UtxoTransaction"
                    }
                }
            },
            "UpdateTransactionSpamStateRequest": {
                "properties": {
                    "is_spam": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "is_spam"
                ]
            },
            "UpdateVaultGroupPermissionsErrorType": {
                "type": "string",
                "enum": [
                    "user_groups_not_found",
                    "users_not_found"
                ]
            },
            "UpdateVaultGroupPermissionsRequest": {
                "properties": {
                    "permissions": {
                        "$ref": "#/components/schemas/VaultGroupPermissionsRequest"
                    }
                },
                "type": "object",
                "required": [
                    "permissions"
                ]
            },
            "UploadKeysetEncryptedDeviceSharesRequest": {
                "properties": {
                    "backup_id": {
                        "type": "string"
                    },
                    "ecdsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "ecdsa_public": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "eddsa": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "eddsa_public": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "ecdsa_stark": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "ecdsa_stark_public": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "backup_id"
                ]
            },
            "User": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Person"
                    },
                    {
                        "$ref": "#/components/schemas/ApiUser"
                    },
                    {
                        "$ref": "#/components/schemas/ApiSigner"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_signer": "#/components/schemas/ApiSigner",
                        "api_user": "#/components/schemas/ApiUser",
                        "person": "#/components/schemas/Person"
                    }
                }
            },
            "UserAction": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/AddPersonMembershipAction"
                    },
                    {
                        "$ref": "#/components/schemas/AddApiSignerAction"
                    },
                    {
                        "$ref": "#/components/schemas/UserGroupChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/ContactChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/AddressGroupChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionAction"
                    },
                    {
                        "$ref": "#/components/schemas/TransactionsPolicyAction"
                    },
                    {
                        "$ref": "#/components/schemas/CreateBackupAction"
                    },
                    {
                        "$ref": "#/components/schemas/BackupEmailChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/VaultGroupChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/AdminQuorumChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/UserChangeAction"
                    },
                    {
                        "$ref": "#/components/schemas/AddDeviceAction"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "add_api_signer": "#/components/schemas/AddApiSignerAction",
                        "add_device": "#/components/schemas/AddDeviceAction",
                        "add_person_membership": "#/components/schemas/AddPersonMembershipAction",
                        "addressbook_contact_change": "#/components/schemas/ContactChangeAction",
                        "addressbook_group_change": "#/components/schemas/AddressGroupChangeAction",
                        "admin_quorum_change": "#/components/schemas/AdminQuorumChangeAction",
                        "backup_email_change": "#/components/schemas/BackupEmailChangeAction",
                        "create_backup": "#/components/schemas/CreateBackupAction",
                        "transaction": "#/components/schemas/TransactionAction",
                        "transactions_policy": "#/components/schemas/TransactionsPolicyAction",
                        "user_change": "#/components/schemas/UserChangeAction",
                        "user_group_change": "#/components/schemas/UserGroupChangeAction",
                        "vault_group_change": "#/components/schemas/VaultGroupChangeAction"
                    }
                }
            },
            "UserActionSortableFields": {
                "type": "string",
                "enum": [
                    "modified_at_asc",
                    "modified_at_desc"
                ]
            },
            "UserChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "user_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "user_role": {
                        "$ref": "#/components/schemas/UserRole"
                    },
                    "pending_change": {
                        "$ref": "#/components/schemas/PendingUserChange"
                    },
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "user",
                    "user_role",
                    "pending_change",
                    "change_request_id",
                    "state",
                    "approval_request"
                ]
            },
            "UserExt": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PersonExt"
                    },
                    {
                        "$ref": "#/components/schemas/ApiUserExt"
                    },
                    {
                        "$ref": "#/components/schemas/ApiSignerExt"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_signer": "#/components/schemas/ApiSignerExt",
                        "api_user": "#/components/schemas/ApiUserExt",
                        "person": "#/components/schemas/PersonExt"
                    }
                }
            },
            "UserGroup": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "users_count": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserGroupState"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "proposed_change": {
                        "$ref": "#/components/schemas/UserGroupChangeRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "users_count",
                    "state",
                    "modified_by"
                ]
            },
            "UserGroupChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "user_group_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/UserRef"
                        },
                        "type": "array"
                    },
                    "proposed_change": {
                        "$ref": "#/components/schemas/UserGroupChangeRequest"
                    },
                    "request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "group_id",
                    "name",
                    "proposed_change",
                    "request_id",
                    "approval_request",
                    "state"
                ]
            },
            "UserGroupChangeRequest": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "new_name": {
                        "type": "string"
                    },
                    "added_users": {
                        "items": {
                            "$ref": "#/components/schemas/GroupUserRef"
                        },
                        "type": "array"
                    },
                    "removed_users": {
                        "items": {
                            "$ref": "#/components/schemas/GroupUserRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "created_by"
                ]
            },
            "UserGroupRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "users_count": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "state": {
                        "$ref": "#/components/schemas/UserGroupState"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "users_count",
                    "state"
                ]
            },
            "UserGroupSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "modified_at_asc",
                    "modified_at_desc",
                    "name_asc",
                    "name_desc",
                    "users_count_asc",
                    "users_count_desc"
                ]
            },
            "UserGroupState": {
                "type": "string",
                "enum": [
                    "active",
                    "deleted"
                ]
            },
            "UserKeyset": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "desired_key_types": {
                        "items": {
                            "$ref": "#/components/schemas/KeyType"
                        },
                        "type": "array"
                    },
                    "ecdsa": {
                        "$ref": "#/components/schemas/KeysetKey"
                    },
                    "eddsa": {
                        "$ref": "#/components/schemas/KeysetKey"
                    },
                    "ecdsa_stark": {
                        "$ref": "#/components/schemas/KeysetKey"
                    },
                    "encrypted_device_shares_backups": {
                        "items": {
                            "$ref": "#/components/schemas/EncryptedDeviceSharesBackup"
                        },
                        "type": "array"
                    },
                    "scope": {
                        "enum": [
                            "user"
                        ],
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/EndUserRef"
                    },
                    "last_backup_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "scope",
                    "user",
                    "last_backup_at"
                ]
            },
            "UserRef": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/PersonRef"
                    },
                    {
                        "$ref": "#/components/schemas/ApiUserRef"
                    },
                    {
                        "$ref": "#/components/schemas/ApiSignerRef"
                    },
                    {
                        "$ref": "#/components/schemas/EndUserRef"
                    }
                ],
                "discriminator": {
                    "propertyName": "user_type",
                    "mapping": {
                        "api_signer": "#/components/schemas/ApiSignerRef",
                        "api_user": "#/components/schemas/ApiUserRef",
                        "end_user": "#/components/schemas/EndUserRef",
                        "person": "#/components/schemas/PersonRef"
                    }
                }
            },
            "UserRole": {
                "type": "string",
                "enum": [
                    "admin",
                    "trader",
                    "viewer"
                ]
            },
            "UserSortableFields": {
                "type": "string",
                "enum": [
                    "role_asc",
                    "role_desc",
                    "email_asc",
                    "email_desc",
                    "created_asc",
                    "created_desc",
                    "name_asc",
                    "name_desc",
                    "last_keep_alive_asc",
                    "last_keep_alive_desc",
                    "state_asc",
                    "state_desc",
                    "type_asc",
                    "type_desc"
                ]
            },
            "UserState": {
                "type": "string",
                "enum": [
                    "active",
                    "onboarding",
                    "pending_approval",
                    "deleted"
                ]
            },
            "UserStateOnGroup": {
                "type": "string",
                "enum": [
                    "active",
                    "pending_addition",
                    "pending_removal"
                ]
            },
            "UserType": {
                "type": "string",
                "enum": [
                    "person",
                    "api_signer",
                    "api_user"
                ]
            },
            "UserWithOrganization": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "organization_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "organization_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "user",
                    "organization_id",
                    "organization_name"
                ]
            },
            "UtxoAccountRepr": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "hex_repr": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "hex_repr"
                ]
            },
            "UtxoAddress": {
                "properties": {
                    "address": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    },
                    "address_type": {
                        "$ref": "#/components/schemas/UtxoAddressType"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/UtxoChain"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "address_type",
                    "chain"
                ]
            },
            "UtxoAddressBookContact": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "state": {
                        "$ref": "#/components/schemas/AddressBookContactState"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupRef"
                        },
                        "type": "array"
                    },
                    "pending_changes": {
                        "$ref": "#/components/schemas/AddressBookContactChanges"
                    },
                    "chain_type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "modified_by",
                    "state",
                    "groups",
                    "chain_type",
                    "address",
                    "chain"
                ]
            },
            "UtxoAddressBookContactAddress": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chain"
                ]
            },
            "UtxoAddressBookContactAddressRef": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/UtxoChain"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "address",
                    "chain"
                ]
            },
            "UtxoAddressType": {
                "type": "string",
                "enum": [
                    "legacy",
                    "p2sh",
                    "segwit",
                    "taproot"
                ]
            },
            "UtxoAsset": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "decimals": {
                        "type": "integer",
                        "minimum": 0.0
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "name": {
                        "type": "string"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "verified": {
                        "type": "boolean"
                    },
                    "asset_identifier": {
                        "$ref": "#/components/schemas/EnrichedAssetIdentifier"
                    },
                    "metadata_uri": {
                        "type": "string"
                    },
                    "type": {
                        "deprecated": true,
                        "enum": [
                            "utxo_asset"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/UtxoNativeAsset"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "decimals",
                    "name",
                    "symbol",
                    "hidden",
                    "verified",
                    "asset_identifier",
                    "type",
                    "details"
                ]
            },
            "UtxoAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/UtxoNativeAssetIdentifierRequest"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "details"
                ]
            },
            "UtxoBalanceChangeEffect": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "diff": {
                        "type": "string",
                        "pattern": "^-?\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault",
                    "diff"
                ]
            },
            "UtxoBlockData": {
                "properties": {
                    "number": {
                        "type": "integer"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "mined_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "number",
                    "hash",
                    "mined_at"
                ]
            },
            "UtxoChain": {
                "properties": {
                    "chain_type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "unique_id": {
                        "$ref": "#/components/schemas/UtxoChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "chain_type",
                    "unique_id"
                ]
            },
            "UtxoChainUniqueId": {
                "type": "string",
                "enum": [
                    "bitcoin_mainnet",
                    "bitcoin_testnet"
                ]
            },
            "UtxoEffects": {
                "properties": {
                    "inputs": {
                        "items": {
                            "$ref": "#/components/schemas/UtxoInput"
                        },
                        "type": "array"
                    },
                    "outputs": {
                        "items": {
                            "$ref": "#/components/schemas/UtxoOutput"
                        },
                        "type": "array"
                    },
                    "balance_changes": {
                        "items": {
                            "$ref": "#/components/schemas/UtxoBalanceChangeEffect"
                        },
                        "type": "array"
                    },
                    "total_value": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "inputs",
                    "outputs",
                    "balance_changes",
                    "total_value"
                ]
            },
            "UtxoFees": {
                "properties": {
                    "priority": {
                        "$ref": "#/components/schemas/FeePriorityLevel"
                    },
                    "fee_per_byte": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "total_fee": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    },
                    "fiat_price": {
                        "$ref": "#/components/schemas/Price"
                    }
                },
                "type": "object",
                "required": [
                    "priority",
                    "fee_per_byte",
                    "total_fee"
                ]
            },
            "UtxoInput": {
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EnrichedUtxoAddress"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "value"
                ]
            },
            "UtxoNativeAsset": {
                "properties": {
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    },
                    "type": {
                        "enum": [
                            "utxo_native_asset"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "chain",
                    "type"
                ]
            },
            "UtxoNativeAssetIdentifierRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "native"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/UtxoChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "chain"
                ]
            },
            "UtxoNativeTransferDetails": {
                "properties": {
                    "type": {
                        "enum": [
                            "native_transfer"
                        ],
                        "type": "string"
                    },
                    "direction": {
                        "deprecated": true,
                        "$ref": "#/components/schemas/TransferDirection"
                    },
                    "is_internal": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "direction"
                ]
            },
            "UtxoOutput": {
                "properties": {
                    "address": {
                        "$ref": "#/components/schemas/EnrichedUtxoAddress"
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "is_change_address": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "value"
                ]
            },
            "UtxoOutputRequest": {
                "properties": {
                    "to": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UtxoOutputToAddressRequest"
                            },
                            {
                                "$ref": "#/components/schemas/UtxoOutputToVaultAddressIdRequest"
                            },
                            {
                                "$ref": "#/components/schemas/UtxoOutputToVaultIdRequest"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "address": "#/components/schemas/UtxoOutputToAddressRequest",
                                "vault_address_id": "#/components/schemas/UtxoOutputToVaultAddressIdRequest",
                                "vault_id": "#/components/schemas/UtxoOutputToVaultIdRequest"
                            }
                        }
                    },
                    "value": {
                        "type": "string",
                        "pattern": "^0*[1-9]\\d*$",
                        "example": "1000000000000000000"
                    }
                },
                "type": "object",
                "required": [
                    "to",
                    "value"
                ]
            },
            "UtxoOutputToAddressRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "address"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "type": "string",
                        "maxLength": 74,
                        "minLength": 14,
                        "example": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "address"
                ]
            },
            "UtxoOutputToVaultAddressIdRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "vault_address_id"
                        ],
                        "type": "string"
                    },
                    "vault_address_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault_address_id"
                ]
            },
            "UtxoOutputToVaultIdRequest": {
                "properties": {
                    "type": {
                        "enum": [
                            "vault_id"
                        ],
                        "type": "string"
                    },
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "vault_id"
                ]
            },
            "UtxoSuggestedFees": {
                "properties": {
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "low": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "medium": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "high": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "chain_unique_id": {
                        "$ref": "#/components/schemas/UtxoChainUniqueId"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "low",
                    "medium",
                    "high",
                    "chain_unique_id"
                ]
            },
            "UtxoTransaction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "managed_transaction_data": {
                        "$ref": "#/components/schemas/ManagedTransactionData"
                    },
                    "signatures": {
                        "items": {
                            "$ref": "#/components/schemas/Signature"
                        },
                        "type": "array"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "default": "unset",
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "type": {
                        "enum": [
                            "utxo_transaction"
                        ],
                        "type": "string"
                    },
                    "utxo_transaction_type_details": {
                        "$ref": "#/components/schemas/UtxoNativeTransferDetails"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "explorer_url": {
                        "type": "string",
                        "maxLength": 2083,
                        "minLength": 1,
                        "format": "uri"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UtxoTransactionState"
                    },
                    "state_changes": {
                        "items": {
                            "$ref": "#/components/schemas/UtxoTransactionStateChange"
                        },
                        "type": "array"
                    },
                    "block": {
                        "$ref": "#/components/schemas/UtxoBlockData"
                    },
                    "expected_result": {
                        "$ref": "#/components/schemas/UtxoTransactionResult"
                    },
                    "mined_result": {
                        "$ref": "#/components/schemas/UtxoTransactionResult"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "signatures",
                    "direction",
                    "type",
                    "utxo_transaction_type_details",
                    "chain",
                    "state",
                    "state_changes"
                ]
            },
            "UtxoTransactionResult": {
                "properties": {
                    "fees": {
                        "$ref": "#/components/schemas/UtxoFees"
                    },
                    "effects": {
                        "$ref": "#/components/schemas/UtxoEffects"
                    }
                },
                "type": "object",
                "required": [
                    "fees",
                    "effects"
                ]
            },
            "UtxoTransactionState": {
                "type": "string",
                "enum": [
                    "waiting_for_approval",
                    "approved",
                    "signed",
                    "pushed_to_blockchain",
                    "mined",
                    "completed",
                    "aborted",
                    "error_signing",
                    "error_pushing_to_blockchain",
                    "stuck",
                    "insufficient_funds"
                ]
            },
            "UtxoTransactionStateChange": {
                "properties": {
                    "changed_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "previous_state": {
                        "$ref": "#/components/schemas/UtxoTransactionState"
                    },
                    "new_state": {
                        "$ref": "#/components/schemas/UtxoTransactionState"
                    },
                    "asset_prices": {
                        "items": {
                            "$ref": "#/components/schemas/PricedAsset"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "changed_at",
                    "new_state",
                    "asset_prices"
                ]
            },
            "UtxoTransactionType": {
                "type": "string",
                "enum": [
                    "native_transfer"
                ]
            },
            "UtxoVault": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "derivation_path": {
                        "type": "string",
                        "deprecated": true,
                        "example": "m/44/60/0/0/0"
                    },
                    "public_key_compressed": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "derivation_info": {
                        "$ref": "#/components/schemas/VaultDerivationInfo"
                    },
                    "keyset": {
                        "$ref": "#/components/schemas/KeysetRef"
                    },
                    "key_holder": {
                        "$ref": "#/components/schemas/EndUserRef"
                    },
                    "vault_group": {
                        "$ref": "#/components/schemas/VaultGroupRef"
                    },
                    "pending_vault_group_action": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionAdd"
                            },
                            {
                                "$ref": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "add": "#/components/schemas/PendingVaultGroupActionAdd",
                                "remove": "#/components/schemas/PendingVaultGroupActionRemove"
                            }
                        }
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultState"
                    },
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EnrichedUtxoChain"
                    },
                    "default_address": {
                        "$ref": "#/components/schemas/UtxoVaultAddress"
                    },
                    "default_next_address_name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "created_by",
                    "derivation_path",
                    "public_key_compressed",
                    "derivation_info",
                    "keyset",
                    "vault_group",
                    "state",
                    "type",
                    "chain",
                    "default_address",
                    "default_next_address_name"
                ]
            },
            "UtxoVaultAddress": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "vault": {
                        "$ref": "#/components/schemas/VaultRef"
                    },
                    "name": {
                        "type": "string"
                    },
                    "balance": {
                        "deprecated": true,
                        "type": "string",
                        "pattern": "^\\d+$",
                        "example": "1000000000000000000"
                    },
                    "balances": {
                        "$ref": "#/components/schemas/Balances"
                    },
                    "public_key_compressed": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "type": {
                        "enum": [
                            "utxo"
                        ],
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/UtxoAddress"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "vault",
                    "name",
                    "balances",
                    "public_key_compressed",
                    "type",
                    "address"
                ]
            },
            "UtxoVaultSubType": {
                "type": "string",
                "enum": [
                    "bitcoin_mainnet",
                    "bitcoin_testnet"
                ]
            },
            "ValidationError": {
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationErrorDetail"
                        },
                        "type": "array"
                    },
                    "request_id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "detail"
                ]
            },
            "ValidationErrorDetail": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "msg": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ]
            },
            "Vault": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/BlackBoxVault"
                    },
                    {
                        "$ref": "#/components/schemas/CosmosVault"
                    },
                    {
                        "$ref": "#/components/schemas/EvmVault"
                    },
                    {
                        "$ref": "#/components/schemas/SolanaVault"
                    },
                    {
                        "$ref": "#/components/schemas/UtxoVault"
                    }
                ],
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "black_box": "#/components/schemas/BlackBoxVault",
                        "cosmos": "#/components/schemas/CosmosVault",
                        "evm": "#/components/schemas/EvmVault",
                        "solana": "#/components/schemas/SolanaVault",
                        "utxo": "#/components/schemas/UtxoVault"
                    }
                }
            },
            "VaultAddressRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "vault_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "vault_id",
                    "name",
                    "address"
                ]
            },
            "VaultAddressSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "name_asc",
                    "name_desc"
                ]
            },
            "VaultDerivationInfo": {
                "properties": {
                    "derivation_path": {
                        "type": "string",
                        "pattern": "^m/44/[0-9]+/[0-9]+/[0-9]+/[0-9]+$",
                        "example": "m/44/60/0/0/0"
                    },
                    "master_public_key": {
                        "$ref": "#/components/schemas/MasterPublicKey"
                    }
                },
                "type": "object",
                "required": [
                    "derivation_path",
                    "master_public_key"
                ]
            },
            "VaultGroup": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "minLength": 2
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "vault_count": {
                        "type": "integer"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/VaultGroupPermissions"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/VaultGroupOwner"
                    },
                    "modified_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "pending_change_request": {
                        "$ref": "#/components/schemas/VaultGroupPendingChangeRequestInfo"
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultGroupState"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "vault_count",
                    "permissions",
                    "owner",
                    "state"
                ]
            },
            "VaultGroupAccessPermissions": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/VaultGroupAccessPermissionsAll"
                    },
                    {
                        "$ref": "#/components/schemas/VaultGroupAccessPermissionsPermitted"
                    }
                ],
                "discriminator": {
                    "propertyName": "access_type",
                    "mapping": {
                        "all": "#/components/schemas/VaultGroupAccessPermissionsAll",
                        "permitted": "#/components/schemas/VaultGroupAccessPermissionsPermitted"
                    }
                }
            },
            "VaultGroupAccessPermissionsAll": {
                "properties": {
                    "access_type": {
                        "enum": [
                            "all"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "access_type"
                ]
            },
            "VaultGroupAccessPermissionsPermitted": {
                "properties": {
                    "access_type": {
                        "enum": [
                            "permitted"
                        ],
                        "type": "string"
                    },
                    "user_groups": {
                        "items": {
                            "$ref": "#/components/schemas/UserGroupRef"
                        },
                        "type": "array"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/UserRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "access_type",
                    "user_groups",
                    "users"
                ]
            },
            "VaultGroupAccessPermissionsPermittedRequest": {
                "properties": {
                    "access_type": {
                        "enum": [
                            "permitted"
                        ],
                        "type": "string"
                    },
                    "user_group_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    },
                    "user_ids": {
                        "items": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "access_type",
                    "user_group_ids",
                    "user_ids"
                ]
            },
            "VaultGroupAccessPermissionsRequest": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/VaultGroupAccessPermissionsAll"
                    },
                    {
                        "$ref": "#/components/schemas/VaultGroupAccessPermissionsPermittedRequest"
                    }
                ],
                "discriminator": {
                    "propertyName": "access_type",
                    "mapping": {
                        "all": "#/components/schemas/VaultGroupAccessPermissionsAll",
                        "permitted": "#/components/schemas/VaultGroupAccessPermissionsPermittedRequest"
                    }
                }
            },
            "VaultGroupChangeAction": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "enum": [
                            "vault_group_change"
                        ],
                        "type": "string"
                    },
                    "is_pending": {
                        "type": "boolean"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "aborted_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "vault_group_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "group_name": {
                        "type": "string"
                    },
                    "pending_changes": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/AddVaultGroupChanges"
                            },
                            {
                                "$ref": "#/components/schemas/EditVaultGroupChanges"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "add_group": "#/components/schemas/AddVaultGroupChanges",
                                "edit_group": "#/components/schemas/EditVaultGroupChanges"
                            }
                        }
                    },
                    "change_request_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "created",
                            "completed",
                            "aborted",
                            "failed"
                        ]
                    },
                    "approval_request": {
                        "$ref": "#/components/schemas/ApprovalRequest"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "type",
                    "is_pending",
                    "created_by",
                    "vault_group_id",
                    "group_name",
                    "pending_changes",
                    "change_request_id",
                    "state",
                    "approval_request"
                ]
            },
            "VaultGroupOwner": {
                "type": "string",
                "enum": [
                    "system",
                    "user"
                ]
            },
            "VaultGroupPendingChangeRequestInfo": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "new_name": {
                        "type": "string"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "new_name",
                    "created_by",
                    "created_at"
                ]
            },
            "VaultGroupPermissions": {
                "properties": {
                    "access_permissions": {
                        "$ref": "#/components/schemas/VaultGroupAccessPermissions"
                    },
                    "can_non_admins_create_or_edit_vaults": {
                        "type": "boolean"
                    },
                    "can_current_user_create_or_edit_vaults": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "access_permissions",
                    "can_non_admins_create_or_edit_vaults",
                    "can_current_user_create_or_edit_vaults"
                ]
            },
            "VaultGroupPermissionsRequest": {
                "properties": {
                    "access_permissions": {
                        "$ref": "#/components/schemas/VaultGroupAccessPermissionsRequest"
                    },
                    "can_non_admins_create_or_edit_vaults": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "access_permissions",
                    "can_non_admins_create_or_edit_vaults"
                ]
            },
            "VaultGroupRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "vault_count": {
                        "type": "integer"
                    },
                    "can_current_user_create_or_edit_vaults": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "vault_count",
                    "can_current_user_create_or_edit_vaults"
                ]
            },
            "VaultGroupSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "name_asc",
                    "name_desc",
                    "vault_count_asc",
                    "vault_count_desc"
                ]
            },
            "VaultGroupState": {
                "type": "string",
                "enum": [
                    "pending_approval",
                    "active"
                ]
            },
            "VaultMetadata": {
                "properties": {
                    "master_key_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "derivation_path": {
                        "type": "string",
                        "pattern": "^m/44/[0-9]+/[0-9]+/[0-9]+/[0-9]+$",
                        "example": "m/44/60/0/0/0"
                    }
                },
                "type": "object",
                "required": [
                    "master_key_id",
                    "derivation_path"
                ]
            },
            "VaultRef": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/VaultState"
                    },
                    "end_user": {
                        "$ref": "#/components/schemas/EndUserRef"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "state"
                ]
            },
            "VaultSortableFields": {
                "type": "string",
                "enum": [
                    "created_at_asc",
                    "created_at_desc",
                    "name_asc",
                    "name_desc",
                    "vault_type_asc",
                    "vault_type_desc"
                ]
            },
            "VaultState": {
                "type": "string",
                "enum": [
                    "active",
                    "archived"
                ]
            },
            "VaultType": {
                "type": "string",
                "enum": [
                    "evm",
                    "solana",
                    "black_box",
                    "cosmos",
                    "utxo"
                ]
            },
            "VaultWithAssets": {
                "properties": {
                    "vault_info": {
                        "$ref": "#/components/schemas/Vault"
                    },
                    "total_value": {
                        "$ref": "#/components/schemas/FiatValue"
                    },
                    "has_more_assets": {
                        "type": "boolean"
                    },
                    "owned_assets": {
                        "items": {
                            "$ref": "#/components/schemas/OwnedAsset"
                        },
                        "type": "array"
                    },
                    "chains": {
                        "items": {
                            "$ref": "#/components/schemas/EnrichedChain"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "required": [
                    "vault_info",
                    "total_value",
                    "has_more_assets",
                    "owned_assets",
                    "chains"
                ]
            },
            "VerifyPublicKeyRequest": {
                "properties": {
                    "signature": {
                        "type": "string",
                        "example": "SGVsbG8="
                    }
                },
                "type": "object",
                "required": [
                    "signature"
                ]
            },
            "Webhook": {
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "modified_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string",
                        "example": "Main transaction processor"
                    },
                    "created_by": {
                        "$ref": "#/components/schemas/UserRef"
                    },
                    "events": {
                        "items": {
                            "$ref": "#/components/schemas/WebhookResourceType"
                        },
                        "type": "array"
                    },
                    "url": {
                        "type": "string",
                        "minLength": 1,
                        "format": "uri"
                    },
                    "last_successful_call_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "first_failed_call_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "state": {
                        "$ref": "#/components/schemas/WebhookState"
                    },
                    "is_retries_suspended": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "created_at",
                    "modified_at",
                    "name",
                    "created_by",
                    "events",
                    "url",
                    "last_successful_call_at",
                    "first_failed_call_at",
                    "state",
                    "is_retries_suspended"
                ]
            },
            "WebhookBlackBoxSignatureStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "black_box_signature"
                        ],
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/BlackBoxSignatureState"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "state"
                ]
            },
            "WebhookCosmosTransactionStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "cosmos_transaction"
                        ],
                        "type": "string"
                    },
                    "cosmos_transaction_type": {
                        "$ref": "#/components/schemas/CosmosTransactionType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/CosmosTransactionState"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 64,
                        "minLength": 64,
                        "pattern": "^[a-fA-F0-9]+$",
                        "example": "12BE33E7F1B6CA644CC006FB8CBD0C4C7C95B1072DA90E9F4C39CB837072BBF5"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/CosmosChain"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "cosmos_transaction_type",
                    "state",
                    "chain"
                ]
            },
            "WebhookEvent": {
                "$ref": "#/components/schemas/WebhookTransactionStatusChangeEvent"
            },
            "WebhookEvmMessageStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "evm_message"
                        ],
                        "type": "string"
                    },
                    "evm_message_type": {
                        "$ref": "#/components/schemas/EvmMessageType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/EvmMessageState"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChain"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "evm_message_type",
                    "state",
                    "chain"
                ]
            },
            "WebhookEvmTransactionStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "evm_transaction"
                        ],
                        "type": "string"
                    },
                    "evm_transaction_type": {
                        "$ref": "#/components/schemas/EvmTransactionType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/EvmTransactionState"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 66,
                        "minLength": 66,
                        "pattern": "^0[xX][a-fA-F0-9]+$",
                        "example": "0x780f21260f89d610f24eed21b34d29229611a37e0003e83dd0da91981d7131ae"
                    },
                    "raw_transaction": {
                        "type": "string",
                        "pattern": "^0[xX][a-fA-F0-9]+$"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/EvmChain"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "evm_transaction_type",
                    "state",
                    "chain"
                ]
            },
            "WebhookResourceType": {
                "type": "string",
                "enum": [
                    "transactions"
                ]
            },
            "WebhookSolanaMessageStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "solana_message"
                        ],
                        "type": "string"
                    },
                    "solana_message_type": {
                        "$ref": "#/components/schemas/SolanaMessageType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/SolanaMessageState"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChain"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "solana_message_type",
                    "state",
                    "chain"
                ]
            },
            "WebhookSolanaTransactionStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "solana_transaction"
                        ],
                        "type": "string"
                    },
                    "solana_transaction_type": {
                        "$ref": "#/components/schemas/SolanaTransactionType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/SolanaTransactionState"
                    },
                    "hash": {
                        "type": "string",
                        "maxLength": 88,
                        "minLength": 64,
                        "pattern": "^[a-km-zA-HJ-NP-Z1-9]+$",
                        "example": "FAWA66fudpiwdRDDQ4DRxdJsRvawvauwg4vQkm98ZHFpXmW5N7xzRiTRpt8QiZ19s1aVbzKgXW6kEZanwHeDFNS"
                    },
                    "raw_transaction": {
                        "type": "string",
                        "example": "SGVsbG8="
                    },
                    "chain": {
                        "$ref": "#/components/schemas/SolanaChain"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "solana_transaction_type",
                    "state",
                    "chain"
                ]
            },
            "WebhookState": {
                "type": "string",
                "enum": [
                    "active",
                    "suspended"
                ]
            },
            "WebhookTransactionStatusChangeEvent": {
                "properties": {
                    "webhook_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "event_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "attempt": {
                        "type": "integer",
                        "minimum": 1.0
                    },
                    "sent_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "event": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/WebhookBlackBoxSignatureStatusChangeEvent"
                            },
                            {
                                "$ref": "#/components/schemas/WebhookCosmosTransactionStatusChangeEvent"
                            },
                            {
                                "$ref": "#/components/schemas/WebhookEvmMessageStatusChangeEvent"
                            },
                            {
                                "$ref": "#/components/schemas/WebhookEvmTransactionStatusChangeEvent"
                            },
                            {
                                "$ref": "#/components/schemas/WebhookSolanaMessageStatusChangeEvent"
                            },
                            {
                                "$ref": "#/components/schemas/WebhookSolanaTransactionStatusChangeEvent"
                            },
                            {
                                "$ref": "#/components/schemas/WebhookUtxoTransactionStatusChangeEvent"
                            }
                        ],
                        "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                                "black_box_signature": "#/components/schemas/WebhookBlackBoxSignatureStatusChangeEvent",
                                "cosmos_transaction": "#/components/schemas/WebhookCosmosTransactionStatusChangeEvent",
                                "evm_message": "#/components/schemas/WebhookEvmMessageStatusChangeEvent",
                                "evm_transaction": "#/components/schemas/WebhookEvmTransactionStatusChangeEvent",
                                "solana_message": "#/components/schemas/WebhookSolanaMessageStatusChangeEvent",
                                "solana_transaction": "#/components/schemas/WebhookSolanaTransactionStatusChangeEvent",
                                "utxo_transaction": "#/components/schemas/WebhookUtxoTransactionStatusChangeEvent"
                            }
                        }
                    },
                    "event_type": {
                        "enum": [
                            "transaction_state_update"
                        ],
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "webhook_id",
                    "created_at",
                    "event_id",
                    "attempt",
                    "sent_at",
                    "event",
                    "event_type"
                ]
            },
            "WebhookUtxoTransactionStatusChangeEvent": {
                "properties": {
                    "transaction_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "is_managed_transaction": {
                        "type": "boolean",
                        "deprecated": true
                    },
                    "direction": {
                        "$ref": "#/components/schemas/TransactionDirection"
                    },
                    "note": {
                        "type": "string"
                    },
                    "spam_state": {
                        "$ref": "#/components/schemas/TransactionSpamState"
                    },
                    "type": {
                        "enum": [
                            "utxo_transaction"
                        ],
                        "type": "string"
                    },
                    "utxo_transaction_type": {
                        "$ref": "#/components/schemas/UtxoTransactionType"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UtxoTransactionState"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "chain": {
                        "$ref": "#/components/schemas/UtxoChain"
                    }
                },
                "type": "object",
                "required": [
                    "transaction_id",
                    "is_managed_transaction",
                    "direction",
                    "spam_state",
                    "type",
                    "utxo_transaction_type",
                    "state",
                    "chain"
                ]
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Users",
            "description": "This resource collection represents users.<h4>User types and roles</h4>There are three types of user in the Fordefi platform:<ul><li>**Person**: A human user of the platform. Only a person can have an admin role.<li>**API user**: An API client key that is trying to interact with the platform.See Create an API user and token.<li>**API signer**: Used to auto-sign transactions. See Automate Signing with API Signer.<li>**End user**: This represents the end user in a Consumer Wallet solution.</ul>In addition, a person can have one of two possible user roles, which define the permissions that the user is given:<ul><li>**Admin**: A user with high privileges in the organization. Only admins have permission to manage the policy, set up the backup, manage the address book, and add or remove users in the organization.<li>**Trader**: A user who can create vaults and transactions.</ul>"
        },
        {
            "name": "Authorization Tokens",
            "description": "This resource collection represents authorization tokens.<br><br>These tokens allow end users to authenticate with Fordefi. Each end user can have a maximum of ten active authorization tokens at any time. Each token is valid for 24 hours only."
        },
        {
            "name": "Blockchains",
            "description": "This resource collection represents blockchains."
        },
        {
            "name": "Keysets",
            "description": "This resource collection represents keysets.<br><br>A keyset is a high-level object that includes the three different key types: EdDSA, ECDSA, and ECDSA-Stark."
        },
        {
            "name": "Webhooks",
            "description": "This resource collection represents webhooks."
        },
        {
            "name": "Address Book",
            "description": "This resource collection represents an address book.<br><br>Address Book is an object that represents a contact (saved blockchain address and its alias) in the platform. The Address Book object can either be queried directly or returned as part of a transaction."
        },
        {
            "name": "Transactions",
            "description": "This resource collection represents a transaction. <br><br>A transaction is any object that can be signed cryptographically (with a private key). <br><br>In general, it can be one of the following types: <ul> <li> **EVM Transaction**: a native currency transfer or a smart contract call on an EVM-based chain.  <li> **EVM Message**: in which a message is signed for off-chain use on an EVM-based chain.  <li> **Solana Transaction**: a native currency transfer on a Solana-based chain.  <li> **Black Box Signature**: in which a payload is signed for use, external to the Fordefi platform. </ul> <h4>Monitor transactions</h4>  As transactions progress from creation through completion,  they can follow several workflows, during which they take on various statuses. Status is returned in  the `state` field of the Get Transaction and List Transaction requests. <br><br> For a list of possible statuses, see [Transaction Lifecycle](https://docs.fordefi.com/docs/transaction-lifecycle). "
        },
        {
            "name": "Vaults",
            "description": "This resource collection represents a vault.<br><br>The vault is the basic unit to manage funds. A vault has a single public address but is multi-chain, meaning you can use it across all chains that are compatible with the address and are supported by Fordefi.<br><br>In general, Fordefi supports the following vault types: <ul> <li> **EVM**: a vault to be used in supported EVM chains.  <li> **Solana**: a vault to be used in supported Solana chains.  <li> **Black Box**: in which the user can leverage Fordefi for MPC and policy, but is responsible for managing the transaction lifecycle. <li> **Cosmos**: a vault to be used in supported Cosmos chains.</ul>"
        },
        {
            "name": "Vault Groups",
            "description": "This resource collection represents a vault group.<br><br>TBD"
        },
        {
            "name": "Assets",
            "description": "This resource collection represents assets.<ul> <li> 'Assets', in general, refer to the assets that are supported by Fordefi and can be held by an organization. The Fetch Asset Prices API, for example, returns the current prices of all the assets that are recognized by the system. <li>'Owned assets' reflects the balance of specific assets that are owned by an organization. "
        },
        {
            "name": "End Users",
            "description": "This resource collection represents end users.<br><br>End users are the users of a third-party app that embeds cryptographic technology provided by Fordefi. Each end user's mobile device can have a unique key-share, where Fordefi holds the matching key-share."
        }
    ],
    "security": [
        {
            "bearerAuth": []
        }
    ]
}